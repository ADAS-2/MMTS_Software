
MMTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  080095e8  080095e8  000195e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b7c  08009b7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b84  08009b84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001e0  08009d6c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08009d6c  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3b6  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1a  00000000  00000000  0002b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017077  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c89c  00000000  00000000  00045d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d466  00000000  00000000  000525e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfa49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  000dfa9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080095cc 	.word	0x080095cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080095cc 	.word	0x080095cc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b9ae 	b.w	8000f20 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83e 	bl	8000c4c <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4605      	mov	r5, r0
 8000be0:	460c      	mov	r4, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	2300      	movs	r3, #0
 8000be6:	4628      	mov	r0, r5
 8000be8:	4621      	mov	r1, r4
 8000bea:	f7ff ff09 	bl	8000a00 <__aeabi_dcmplt>
 8000bee:	b928      	cbnz	r0, 8000bfc <__aeabi_d2lz+0x20>
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf8:	f000 b80a 	b.w	8000c10 <__aeabi_d2ulz>
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c02:	f000 f805 	bl	8000c10 <__aeabi_d2ulz>
 8000c06:	4240      	negs	r0, r0
 8000c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop

08000c10 <__aeabi_d2ulz>:
 8000c10:	b5d0      	push	{r4, r6, r7, lr}
 8000c12:	2200      	movs	r2, #0
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <__aeabi_d2ulz+0x34>)
 8000c16:	4606      	mov	r6, r0
 8000c18:	460f      	mov	r7, r1
 8000c1a:	f7ff fc7f 	bl	800051c <__aeabi_dmul>
 8000c1e:	f7ff ff55 	bl	8000acc <__aeabi_d2uiz>
 8000c22:	4604      	mov	r4, r0
 8000c24:	f7ff fc00 	bl	8000428 <__aeabi_ui2d>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <__aeabi_d2ulz+0x38>)
 8000c2c:	f7ff fc76 	bl	800051c <__aeabi_dmul>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	4630      	mov	r0, r6
 8000c36:	4639      	mov	r1, r7
 8000c38:	f7ff fab8 	bl	80001ac <__aeabi_dsub>
 8000c3c:	f7ff ff46 	bl	8000acc <__aeabi_d2uiz>
 8000c40:	4621      	mov	r1, r4
 8000c42:	bdd0      	pop	{r4, r6, r7, pc}
 8000c44:	3df00000 	.word	0x3df00000
 8000c48:	41f00000 	.word	0x41f00000

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	4688      	mov	r8, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14d      	bne.n	8000cf8 <__udivmoddi4+0xac>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d968      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b152      	cbz	r2, 8000c7e <__udivmoddi4+0x32>
 8000c68:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6c:	f1c2 0120 	rsb	r1, r2, #32
 8000c70:	fa20 f101 	lsr.w	r1, r0, r1
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	ea41 0803 	orr.w	r8, r1, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c82:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb01 8817 	mls	r8, r1, r7, r8
 8000c8e:	fb07 f00e 	mul.w	r0, r7, lr
 8000c92:	0c23      	lsrs	r3, r4, #16
 8000c94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x66>
 8000c9c:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000ca4:	f080 811e 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f240 811b 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4463      	add	r3, ip
 8000cb2:	1a1b      	subs	r3, r3, r0
 8000cb4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000cb8:	fb01 3310 	mls	r3, r1, r0, r3
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	b2a4      	uxth	r4, r4
 8000cc2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x94>
 8000cca:	eb1c 0404 	adds.w	r4, ip, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	f080 8109 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f240 8106 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cdc:	4464      	add	r4, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cea:	b11e      	cbz	r6, 8000cf4 <__udivmoddi4+0xa8>
 8000cec:	2300      	movs	r3, #0
 8000cee:	40d4      	lsrs	r4, r2
 8000cf0:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	f000 80ee 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d02:	2100      	movs	r1, #0
 8000d04:	e9c6 0500 	strd	r0, r5, [r6]
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80fc 	bhi.w	8000f18 <__udivmoddi4+0x2cc>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb65 0303 	sbc.w	r3, r5, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d0e2      	beq.n	8000cf4 <__udivmoddi4+0xa8>
 8000d2e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d32:	e7df      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8091 	bne.w	8000e64 <__udivmoddi4+0x218>
 8000d42:	eba1 000c 	sub.w	r0, r1, ip
 8000d46:	2101      	movs	r1, #1
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d54:	fb07 0013 	mls	r0, r7, r3, r0
 8000d58:	0c25      	lsrs	r5, r4, #16
 8000d5a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0505 	adds.w	r5, ip, r5
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	f200 80ce 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a2d      	subs	r5, r5, r0
 8000d7a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d7e:	fb07 5510 	mls	r5, r7, r0, r5
 8000d82:	fb0e fe00 	mul.w	lr, lr, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80b6 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000da0:	4628      	mov	r0, r5
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79e      	b.n	8000cea <__udivmoddi4+0x9e>
 8000dac:	f1c1 0720 	rsb	r7, r1, #32
 8000db0:	408b      	lsls	r3, r1
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa25 fa07 	lsr.w	sl, r5, r7
 8000dbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc2:	fbba f8f9 	udiv	r8, sl, r9
 8000dc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dca:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dce:	408d      	lsls	r5, r1
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	431d      	orrs	r5, r3
 8000dd6:	fa00 f301 	lsl.w	r3, r0, r1
 8000dda:	fb08 f00e 	mul.w	r0, r8, lr
 8000dde:	0c2c      	lsrs	r4, r5, #16
 8000de0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	42a0      	cmp	r0, r4
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4464      	add	r4, ip
 8000e04:	1a24      	subs	r4, r4, r0
 8000e06:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e0a:	fb09 4410 	mls	r4, r9, r0, r4
 8000e0e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e12:	b2ad      	uxth	r5, r5
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9502 	umull	r9, r5, r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	42ac      	cmp	r4, r5
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46ae      	mov	lr, r5
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	d069      	beq.n	8000f1c <__udivmoddi4+0x2d0>
 8000e48:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4c:	eb64 040e 	sbc.w	r4, r4, lr
 8000e50:	fa22 f301 	lsr.w	r3, r2, r1
 8000e54:	fa04 f707 	lsl.w	r7, r4, r7
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	40cc      	lsrs	r4, r1
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	2100      	movs	r1, #0
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	f1c2 0120 	rsb	r1, r2, #32
 8000e6c:	fa25 f301 	lsr.w	r3, r5, r1
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa20 f101 	lsr.w	r1, r0, r1
 8000e78:	4095      	lsls	r5, r2
 8000e7a:	430d      	orrs	r5, r1
 8000e7c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e80:	fb07 3311 	mls	r3, r7, r1, r3
 8000e84:	fa1f fe8c 	uxth.w	lr, ip
 8000e88:	0c28      	lsrs	r0, r5, #16
 8000e8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e8e:	fb01 f30e 	mul.w	r3, r1, lr
 8000e92:	4283      	cmp	r3, r0
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0000 	adds.w	r0, ip, r0
 8000e9e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	4283      	cmp	r3, r0
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3902      	subs	r1, #2
 8000eaa:	4460      	add	r0, ip
 8000eac:	1ac0      	subs	r0, r0, r3
 8000eae:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb2:	fb07 0013 	mls	r0, r7, r3, r0
 8000eb6:	b2ad      	uxth	r5, r5
 8000eb8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ebc:	fb03 f00e 	mul.w	r0, r3, lr
 8000ec0:	42a8      	cmp	r0, r5
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0505 	adds.w	r5, ip, r5
 8000ec8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	4465      	add	r5, ip
 8000ed6:	1a28      	subs	r0, r5, r0
 8000ed8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e707      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000ee4:	462f      	mov	r7, r5
 8000ee6:	e6e4      	b.n	8000cb2 <__udivmoddi4+0x66>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f9      	b.n	8000ce0 <__udivmoddi4+0x94>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4643      	mov	r3, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4628      	mov	r0, r5
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4641      	mov	r1, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	4464      	add	r4, ip
 8000f0e:	3802      	subs	r0, #2
 8000f10:	e747      	b.n	8000da2 <__udivmoddi4+0x156>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	4465      	add	r5, ip
 8000f16:	e72f      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e706      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e6e9      	b.n	8000cf4 <__udivmoddi4+0xa8>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <Ringbuf_init+0x38>)
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <Ringbuf_init+0x3c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <Ringbuf_init+0x40>)
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <Ringbuf_init+0x44>)
 8000f32:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <Ringbuf_init+0x48>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <Ringbuf_init+0x48>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0201 	orr.w	r2, r2, #1
 8000f42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <Ringbuf_init+0x48>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <Ringbuf_init+0x48>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0220 	orr.w	r2, r2, #32
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	200002c4 	.word	0x200002c4
 8000f60:	200001fc 	.word	0x200001fc
 8000f64:	200002c8 	.word	0x200002c8
 8000f68:	20000260 	.word	0x20000260
 8000f6c:	2000034c 	.word	0x2000034c

08000f70 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	0853      	lsrs	r3, r2, #1
 8000f84:	490d      	ldr	r1, [pc, #52]	; (8000fbc <store_char+0x4c>)
 8000f86:	fba1 1303 	umull	r1, r3, r1, r3
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	215a      	movs	r1, #90	; 0x5a
 8000f8e:	fb01 f303 	mul.w	r3, r1, r3
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d007      	beq.n	8000fb0 <store_char+0x40>
    buffer->buffer[buffer->head] = c;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	79f9      	ldrb	r1, [r7, #7]
 8000fa8:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	65da      	str	r2, [r3, #92]	; 0x5c
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	b60b60b7 	.word	0xb60b60b7

08000fc0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <Uart_read+0x58>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <Uart_read+0x58>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d102      	bne.n	8000fdc <Uart_read+0x1c>
  {
    return -1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e017      	b.n	800100c <Uart_read+0x4c>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <Uart_read+0x58>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <Uart_read+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <Uart_read+0x58>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <Uart_read+0x58>)
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	0853      	lsrs	r3, r2, #1
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <Uart_read+0x5c>)
 8000ffa:	fba0 0303 	umull	r0, r3, r0, r3
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	205a      	movs	r0, #90	; 0x5a
 8001002:	fb00 f303 	mul.w	r3, r0, r3
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	660b      	str	r3, [r1, #96]	; 0x60
    return c;
 800100a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200002c4 	.word	0x200002c4
 800101c:	b60b60b7 	.word	0xb60b60b7

08001020 <Uart_write>:

void Uart_write(int c)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db28      	blt.n	8001080 <Uart_write+0x60>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <Uart_write+0x6c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	0853      	lsrs	r3, r2, #1
 8001038:	4915      	ldr	r1, [pc, #84]	; (8001090 <Uart_write+0x70>)
 800103a:	fba1 1303 	umull	r1, r3, r1, r3
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	215a      	movs	r1, #90	; 0x5a
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800104a:	bf00      	nop
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <Uart_write+0x6c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d0f9      	beq.n	800104c <Uart_write+0x2c>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <Uart_write+0x6c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <Uart_write+0x6c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	b2c9      	uxtb	r1, r1
 8001066:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <Uart_write+0x6c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	65da      	str	r2, [r3, #92]	; 0x5c

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <Uart_write+0x74>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <Uart_write+0x74>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800107e:	60da      	str	r2, [r3, #12]
	}
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200002c8 	.word	0x200002c8
 8001090:	b60b60b7 	.word	0xb60b60b7
 8001094:	2000034c 	.word	0x2000034c

08001098 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <IsDataAvailable+0x38>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <IsDataAvailable+0x38>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	335a      	adds	r3, #90	; 0x5a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	085a      	lsrs	r2, r3, #1
 80010b6:	4907      	ldr	r1, [pc, #28]	; (80010d4 <IsDataAvailable+0x3c>)
 80010b8:	fba1 1202 	umull	r1, r2, r1, r2
 80010bc:	0952      	lsrs	r2, r2, #5
 80010be:	215a      	movs	r1, #90	; 0x5a
 80010c0:	fb01 f202 	mul.w	r2, r1, r2
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200002c4 	.word	0x200002c4
 80010d4:	b60b60b7 	.word	0xb60b60b7

080010d8 <Uart_flush>:
		indx++;
	}
}

void Uart_flush (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <Uart_flush+0x20>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	225a      	movs	r2, #90	; 0x5a
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fe2d 	bl	8004d44 <memset>
	_rx_buffer->head = 0;
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <Uart_flush+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002c4 	.word	0x200002c4

080010fc <Uart_peek>:

int Uart_peek()
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <Uart_peek+0x30>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <Uart_peek+0x30>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	429a      	cmp	r2, r3
 800110e:	d102      	bne.n	8001116 <Uart_peek+0x1a>
  {
    return -1;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	e005      	b.n	8001122 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <Uart_peek+0x30>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <Uart_peek+0x30>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001120:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200002c4 	.word	0x200002c4

08001130 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff f828 	bl	8000194 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 800114c:	bf00      	nop
 800114e:	f7ff ffa3 	bl	8001098 <IsDataAvailable>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0fa      	beq.n	800114e <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8001158:	e022      	b.n	80011a0 <Copy_upto+0x70>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <Copy_upto+0xf0>)
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <Copy_upto+0xf0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	4403      	add	r3, r0
 800116a:	5c8a      	ldrb	r2, [r1, r2]
 800116c:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <Copy_upto+0xf0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <Copy_upto+0xf0>)
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	0853      	lsrs	r3, r2, #1
 800117c:	4829      	ldr	r0, [pc, #164]	; (8001224 <Copy_upto+0xf4>)
 800117e:	fba0 0303 	umull	r0, r3, r0, r3
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	205a      	movs	r0, #90	; 0x5a
 8001186:	fb00 f303 	mul.w	r3, r0, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	660b      	str	r3, [r1, #96]	; 0x60
			indx++;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001194:	bf00      	nop
 8001196:	f7ff ff7f 	bl	8001098 <IsDataAvailable>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0fa      	beq.n	8001196 <Copy_upto+0x66>
	while (Uart_peek() != string[so_far])
 80011a0:	f7ff ffac 	bl	80010fc <Uart_peek>
 80011a4:	4601      	mov	r1, r0
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d1d3      	bne.n	800115a <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 80011b2:	e019      	b.n	80011e8 <Copy_upto+0xb8>
	{
		so_far++;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80011ba:	f7ff ff01 	bl	8000fc0 <Uart_read>
 80011be:	4601      	mov	r1, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	613a      	str	r2, [r7, #16]
 80011c6:	461a      	mov	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	b2ca      	uxtb	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d101      	bne.n	80011dc <Copy_upto+0xac>
 80011d8:	2301      	movs	r3, #1
 80011da:	e01d      	b.n	8001218 <Copy_upto+0xe8>
		while (!IsDataAvailable());
 80011dc:	bf00      	nop
 80011de:	f7ff ff5b 	bl	8001098 <IsDataAvailable>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0fa      	beq.n	80011de <Copy_upto+0xae>
	while (Uart_peek() == string [so_far])
 80011e8:	f7ff ff88 	bl	80010fc <Uart_peek>
 80011ec:	4601      	mov	r1, r0
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d0dc      	beq.n	80011b4 <Copy_upto+0x84>
	}

	if (so_far != len)
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d002      	beq.n	8001208 <Copy_upto+0xd8>
	{
		so_far = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
		goto again;
 8001206:	e7a1      	b.n	800114c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d101      	bne.n	8001214 <Copy_upto+0xe4>
 8001210:	2301      	movs	r3, #1
 8001212:	e001      	b.n	8001218 <Copy_upto+0xe8>
	else return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002c4 	.word	0x200002c4
 8001224:	b60b60b7 	.word	0xb60b60b7

08001228 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7fe ffad 	bl	8000194 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 800123e:	bf00      	nop
 8001240:	f7ff ff2a 	bl	8001098 <IsDataAvailable>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0fa      	beq.n	8001240 <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800124a:	e00f      	b.n	800126c <Wait_for+0x44>
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <Wait_for+0xb4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <Wait_for+0xb4>)
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	0853      	lsrs	r3, r2, #1
 800125a:	4821      	ldr	r0, [pc, #132]	; (80012e0 <Wait_for+0xb8>)
 800125c:	fba0 0303 	umull	r0, r3, r0, r3
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	205a      	movs	r0, #90	; 0x5a
 8001264:	fb00 f303 	mul.w	r3, r0, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	660b      	str	r3, [r1, #96]	; 0x60
 800126c:	f7ff ff46 	bl	80010fc <Uart_peek>
 8001270:	4601      	mov	r1, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4299      	cmp	r1, r3
 800127c:	d1e6      	bne.n	800124c <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 800127e:	e010      	b.n	80012a2 <Wait_for+0x7a>
	{
		so_far++;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8001286:	f7ff fe9b 	bl	8000fc0 <Uart_read>
		if (so_far == len) return 1;
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	429a      	cmp	r2, r3
 8001290:	d101      	bne.n	8001296 <Wait_for+0x6e>
 8001292:	2301      	movs	r3, #1
 8001294:	e01d      	b.n	80012d2 <Wait_for+0xaa>
		while (!IsDataAvailable());
 8001296:	bf00      	nop
 8001298:	f7ff fefe 	bl	8001098 <IsDataAvailable>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0fa      	beq.n	8001298 <Wait_for+0x70>
	while (Uart_peek() == string [so_far])
 80012a2:	f7ff ff2b 	bl	80010fc <Uart_peek>
 80012a6:	4601      	mov	r1, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4299      	cmp	r1, r3
 80012b2:	d0e5      	beq.n	8001280 <Wait_for+0x58>
	}

	if (so_far != len)
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d002      	beq.n	80012c2 <Wait_for+0x9a>
	{
		so_far = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
		goto again;
 80012c0:	e7bd      	b.n	800123e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d101      	bne.n	80012ce <Wait_for+0xa6>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e001      	b.n	80012d2 <Wait_for+0xaa>
	else return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	b60b60b7 	.word	0xb60b60b7

080012e4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d013      	beq.n	800132e <Uart_isr+0x4a>
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <Uart_isr+0xb8>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe22 	bl	8000f70 <store_char>
        return;
 800132c:	e033      	b.n	8001396 <Uart_isr+0xb2>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02e      	beq.n	8001396 <Uart_isr+0xb2>
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	2b00      	cmp	r3, #0
 8001340:	d029      	beq.n	8001396 <Uart_isr+0xb2>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <Uart_isr+0xbc>)
 8001344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <Uart_isr+0xbc>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	429a      	cmp	r2, r3
 800134c:	d108      	bne.n	8001360 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800135e:	e019      	b.n	8001394 <Uart_isr+0xb0>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <Uart_isr+0xbc>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <Uart_isr+0xbc>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <Uart_isr+0xbc>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	0853      	lsrs	r3, r2, #1
 8001372:	490c      	ldr	r1, [pc, #48]	; (80013a4 <Uart_isr+0xc0>)
 8001374:	fba1 1303 	umull	r1, r3, r1, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	215a      	movs	r1, #90	; 0x5a
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <Uart_isr+0xbc>)
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
    	      huart->Instance->SR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7bba      	ldrb	r2, [r7, #14]
 8001392:	605a      	str	r2, [r3, #4]
    	return;
 8001394:	bf00      	nop
    }
}
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002c4 	.word	0x200002c4
 80013a0:	20000260 	.word	0x20000260
 80013a4:	b60b60b7 	.word	0xb60b60b7

080013a8 <data_from_iot>:
void motor_drive_stop(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int data_from_iot(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
		 * checking for IoT data, if available read from UART 1 and storing data in a variable
		 * and Validating the data, if data = 1, return 1; if data = 0, return 0;
		 */
//	Uart_flush();

	uint8_t count=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
	uint8_t quote_double=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71bb      	strb	r3, [r7, #6]
	uint8_t name_increment=0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	717b      	strb	r3, [r7, #5]
	uint8_t mode_increment=0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	713b      	strb	r3, [r7, #4]
    uint8_t time_increment=0;
 80013be:	2300      	movs	r3, #0
 80013c0:	70fb      	strb	r3, [r7, #3]

	if (IsDataAvailable()) {
 80013c2:	f7ff fe69 	bl	8001098 <IsDataAvailable>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 809d 	beq.w	8001508 <data_from_iot+0x160>

        if(Wait_for("{")==1)
 80013ce:	4850      	ldr	r0, [pc, #320]	; (8001510 <data_from_iot+0x168>)
 80013d0:	f7ff ff2a 	bl	8001228 <Wait_for>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10d      	bne.n	80013f6 <data_from_iot+0x4e>
        {
        	Copy_upto("}", buff1);
 80013da:	494e      	ldr	r1, [pc, #312]	; (8001514 <data_from_iot+0x16c>)
 80013dc:	484e      	ldr	r0, [pc, #312]	; (8001518 <data_from_iot+0x170>)
 80013de:	f7ff fea7 	bl	8001130 <Copy_upto>
        	HAL_UART_Transmit(&huart2, buff1, strlen(buff1),
 80013e2:	484c      	ldr	r0, [pc, #304]	; (8001514 <data_from_iot+0x16c>)
 80013e4:	f7fe fed6 	bl	8000194 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	4949      	ldr	r1, [pc, #292]	; (8001514 <data_from_iot+0x16c>)
 80013f0:	484a      	ldr	r0, [pc, #296]	; (800151c <data_from_iot+0x174>)
 80013f2:	f002 ff98 	bl	8004326 <HAL_UART_Transmit>

        }


		while (1) {
			if (buff1[count] == '"') {
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <data_from_iot+0x16c>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	2b22      	cmp	r3, #34	; 0x22
 80013fe:	d102      	bne.n	8001406 <data_from_iot+0x5e>
				++quote_double;
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	3301      	adds	r3, #1
 8001404:	71bb      	strb	r3, [r7, #6]

			}

			if (quote_double == 3) {
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d10f      	bne.n	800142c <data_from_iot+0x84>
				if (buff1[count + 1] != '"') {
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3301      	adds	r3, #1
 8001410:	4a40      	ldr	r2, [pc, #256]	; (8001514 <data_from_iot+0x16c>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	2b22      	cmp	r3, #34	; 0x22
 8001416:	d009      	beq.n	800142c <data_from_iot+0x84>
					User_Name[name_increment] = buff1[count + 1];
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	493d      	ldr	r1, [pc, #244]	; (8001514 <data_from_iot+0x16c>)
 8001420:	5c89      	ldrb	r1, [r1, r2]
 8001422:	4a3f      	ldr	r2, [pc, #252]	; (8001520 <data_from_iot+0x178>)
 8001424:	54d1      	strb	r1, [r2, r3]
					name_increment++;
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	3301      	adds	r3, #1
 800142a:	717b      	strb	r3, [r7, #5]
				}

			}
			if (quote_double == 7) {
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	2b07      	cmp	r3, #7
 8001430:	d10f      	bne.n	8001452 <data_from_iot+0xaa>
				if (buff1[count + 1] != '"') {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3301      	adds	r3, #1
 8001436:	4a37      	ldr	r2, [pc, #220]	; (8001514 <data_from_iot+0x16c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	2b22      	cmp	r3, #34	; 0x22
 800143c:	d009      	beq.n	8001452 <data_from_iot+0xaa>
					Mode_of_Rotation[mode_increment] = buff1[count + 1];
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	4933      	ldr	r1, [pc, #204]	; (8001514 <data_from_iot+0x16c>)
 8001446:	5c89      	ldrb	r1, [r1, r2]
 8001448:	4a36      	ldr	r2, [pc, #216]	; (8001524 <data_from_iot+0x17c>)
 800144a:	54d1      	strb	r1, [r2, r3]
					mode_increment++;
 800144c:	793b      	ldrb	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	713b      	strb	r3, [r7, #4]
				}

			}
			if (quote_double == 11) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b0b      	cmp	r3, #11
 8001456:	d10f      	bne.n	8001478 <data_from_iot+0xd0>
				if (buff1[count + 1] != '"') {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3301      	adds	r3, #1
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <data_from_iot+0x16c>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	2b22      	cmp	r3, #34	; 0x22
 8001462:	d009      	beq.n	8001478 <data_from_iot+0xd0>
					Time_Duration[time_increment] = buff1[count + 1];
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	492a      	ldr	r1, [pc, #168]	; (8001514 <data_from_iot+0x16c>)
 800146c:	5c89      	ldrb	r1, [r1, r2]
 800146e:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <data_from_iot+0x180>)
 8001470:	54d1      	strb	r1, [r2, r3]
					time_increment++;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	3301      	adds	r3, #1
 8001476:	70fb      	strb	r3, [r7, #3]
				}

			}
			if (quote_double == 12) {
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d003      	beq.n	8001486 <data_from_iot+0xde>
				break;
			}

			++count;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	3301      	adds	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
			if (buff1[count] == '"') {
 8001484:	e7b7      	b.n	80013f6 <data_from_iot+0x4e>
				break;
 8001486:	bf00      	nop
		}
		Time_from_Iot = atoi(Time_Duration);
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <data_from_iot+0x180>)
 800148a:	f003 fc2d 	bl	8004ce8 <atoi>
 800148e:	4603      	mov	r3, r0
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <data_from_iot+0x184>)
 8001494:	701a      	strb	r2, [r3, #0]
		sprintf(buff2,"Mode:%d\r\n",Time_from_Iot);
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <data_from_iot+0x184>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4924      	ldr	r1, [pc, #144]	; (8001530 <data_from_iot+0x188>)
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <data_from_iot+0x18c>)
 80014a0:	f004 faca 	bl	8005a38 <siprintf>
		HAL_UART_Transmit(&huart2, buff2,strlen(buff2),100);
 80014a4:	4823      	ldr	r0, [pc, #140]	; (8001534 <data_from_iot+0x18c>)
 80014a6:	f7fe fe75 	bl	8000194 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	4920      	ldr	r1, [pc, #128]	; (8001534 <data_from_iot+0x18c>)
 80014b2:	481a      	ldr	r0, [pc, #104]	; (800151c <data_from_iot+0x174>)
 80014b4:	f002 ff37 	bl	8004326 <HAL_UART_Transmit>
		if(strcmp(Mode_of_Rotation,"clock")==0 && Time_from_Iot)
 80014b8:	491f      	ldr	r1, [pc, #124]	; (8001538 <data_from_iot+0x190>)
 80014ba:	481a      	ldr	r0, [pc, #104]	; (8001524 <data_from_iot+0x17c>)
 80014bc:	f7fe fe60 	bl	8000180 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <data_from_iot+0x150>
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <data_from_iot+0x184>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d014      	beq.n	80014f8 <data_from_iot+0x150>
		{

			sprintf(buff2,"Duration:%d\r\n",Time_from_Iot);
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <data_from_iot+0x184>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4919      	ldr	r1, [pc, #100]	; (800153c <data_from_iot+0x194>)
 80014d6:	4817      	ldr	r0, [pc, #92]	; (8001534 <data_from_iot+0x18c>)
 80014d8:	f004 faae 	bl	8005a38 <siprintf>
			HAL_UART_Transmit(&huart2, buff2,strlen(buff2),100);
 80014dc:	4815      	ldr	r0, [pc, #84]	; (8001534 <data_from_iot+0x18c>)
 80014de:	f7fe fe59 	bl	8000194 <strlen>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	2364      	movs	r3, #100	; 0x64
 80014e8:	4912      	ldr	r1, [pc, #72]	; (8001534 <data_from_iot+0x18c>)
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <data_from_iot+0x174>)
 80014ec:	f002 ff1b 	bl	8004326 <HAL_UART_Transmit>
			Uart_flush();
 80014f0:	f7ff fdf2 	bl	80010d8 <Uart_flush>
			return 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e007      	b.n	8001508 <data_from_iot+0x160>
		}
		else{
			HAL_UART_Transmit(&huart2, "exit\r\n", strlen("exit\r\n"),100);
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	2206      	movs	r2, #6
 80014fc:	4910      	ldr	r1, [pc, #64]	; (8001540 <data_from_iot+0x198>)
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <data_from_iot+0x174>)
 8001500:	f002 ff11 	bl	8004326 <HAL_UART_Transmit>
			return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e7ff      	b.n	8001508 <data_from_iot+0x160>





}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	080095e8 	.word	0x080095e8
 8001514:	20000434 	.word	0x20000434
 8001518:	080095ec 	.word	0x080095ec
 800151c:	20000390 	.word	0x20000390
 8001520:	200003d4 	.word	0x200003d4
 8001524:	200003f4 	.word	0x200003f4
 8001528:	20000414 	.word	0x20000414
 800152c:	20000432 	.word	0x20000432
 8001530:	080095f0 	.word	0x080095f0
 8001534:	20000490 	.word	0x20000490
 8001538:	080095fc 	.word	0x080095fc
 800153c:	08009604 	.word	0x08009604
 8001540:	08009614 	.word	0x08009614

08001544 <motor_drive_clockwise>:

void motor_drive_clockwise(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	     * start motor clockwise to reach Default position
		 * Motor Input 1 - SET
		 * Motor Input 2 - RESET
		 */

	HAL_UART_Transmit(&huart2, "clock enter\r\n", strlen("clock enter\r\n"),
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	220d      	movs	r2, #13
 800154c:	490a      	ldr	r1, [pc, #40]	; (8001578 <motor_drive_clockwise+0x34>)
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <motor_drive_clockwise+0x38>)
 8001550:	f002 fee9 	bl	8004326 <HAL_UART_Transmit>
			100);
	TIM2->CCR1 = 40;
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	2228      	movs	r2, #40	; 0x28
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //Motor ON
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001562:	4807      	ldr	r0, [pc, #28]	; (8001580 <motor_drive_clockwise+0x3c>)
 8001564:	f001 f9a3 	bl	80028ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //Direction of Pin(CLOCK WISE)
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <motor_drive_clockwise+0x3c>)
 8001570:	f001 f99d 	bl	80028ae <HAL_GPIO_WritePin>
//		HAL_Delay(200);

//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN2_Pin, GPIO_PIN_RESET);

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0800961c 	.word	0x0800961c
 800157c:	20000390 	.word	0x20000390
 8001580:	40020400 	.word	0x40020400

08001584 <motor_drive_anticlockwise>:
void motor_drive_anticlockwise(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
		 * start motor anti - clockwise to reach 90 degree position
		 * Motor Input 1- RESET
		 * Motor Input 2- SET
		 */

	HAL_UART_Transmit(&huart2, "motor enter\r\n", strlen("motor enter\r\n"),
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	220d      	movs	r2, #13
 800158c:	490a      	ldr	r1, [pc, #40]	; (80015b8 <motor_drive_anticlockwise+0x34>)
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <motor_drive_anticlockwise+0x38>)
 8001590:	f002 fec9 	bl	8004326 <HAL_UART_Transmit>
			100);
	TIM2->CCR1 = 25;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	2219      	movs	r2, #25
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //Motor ON
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <motor_drive_anticlockwise+0x3c>)
 80015a4:	f001 f983 	bl	80028ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET); //Direction of Pin(COUNTER CLOCK WISE)
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <motor_drive_anticlockwise+0x3c>)
 80015b0:	f001 f97d 	bl	80028ae <HAL_GPIO_WritePin>


//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN2_Pin, GPIO_PIN_SET);

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800962c 	.word	0x0800962c
 80015bc:	20000390 	.word	0x20000390
 80015c0:	40020400 	.word	0x40020400

080015c4 <motor_drive_stop>:
void motor_drive_stop(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	/*
		 * turn off the motor
		 * Motor Input 1- Reset
		 * Motor Input 2- Reset
		 */
	HAL_UART_Transmit(&huart2, "motor stop\r\n", strlen("motor stop\r\n"), 100);
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	220c      	movs	r2, #12
 80015cc:	4905      	ldr	r1, [pc, #20]	; (80015e4 <motor_drive_stop+0x20>)
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <motor_drive_stop+0x24>)
 80015d0:	f002 fea9 	bl	8004326 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //Motor OFF
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	4804      	ldr	r0, [pc, #16]	; (80015ec <motor_drive_stop+0x28>)
 80015dc:	f001 f967 	bl	80028ae <HAL_GPIO_WritePin>

//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOC, MOTOR2_IN2_Pin, GPIO_PIN_RESET);

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800963c 	.word	0x0800963c
 80015e8:	20000390 	.word	0x20000390
 80015ec:	40020400 	.word	0x40020400

080015f0 <timer_start>:
void timer_start(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	 /*
		  *  start timer for 10 seconds and buzzer on
		  */

	HAL_UART_Transmit(&huart2, "time enter\r\n", strlen("time enter\r\n"), 100);
 80015f4:	2364      	movs	r3, #100	; 0x64
 80015f6:	220c      	movs	r2, #12
 80015f8:	4906      	ldr	r1, [pc, #24]	; (8001614 <timer_start+0x24>)
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <timer_start+0x28>)
 80015fc:	f002 fe93 	bl	8004326 <HAL_UART_Transmit>

	Buzzer();
 8001600:	f000 f810 	bl	8001624 <Buzzer>
	HAL_TIM_Base_Start_IT(&htim6);
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <timer_start+0x2c>)
 8001606:	f001 ffeb 	bl	80035e0 <HAL_TIM_Base_Start_IT>

	time_flag = 1; // Set Timer flag to indicate the timer on call laser detect function in superloop
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <timer_start+0x30>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0800964c 	.word	0x0800964c
 8001618:	20000390 	.word	0x20000390
 800161c:	2000030c 	.word	0x2000030c
 8001620:	200004ec 	.word	0x200004ec

08001624 <Buzzer>:
void Buzzer(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	/*
		 *  buzzer to indicate timer as started
		 */
	HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <Buzzer+0x24>)
 800162e:	f001 f93e 	bl	80028ae <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001636:	f000 fde5 	bl	8002204 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <Buzzer+0x24>)
 8001640:	f001 f935 	bl	80028ae <HAL_GPIO_WritePin>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020400 	.word	0x40020400

0800164c <laser_detect>:

void laser_detect(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
		 * as timer started meanwhile start detecting the laser gun is short r not,
		 * if laser gun is short then move motor to default position (clock-wise direction),
		 * stop the timer.
		 *
		 */
	if (HAL_GPIO_ReadPin(GPIOC, LASER_Pin) == 1) {
 8001650:	2110      	movs	r1, #16
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <laser_detect+0x60>)
 8001654:	f001 f914 	bl	8002880 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d124      	bne.n	80016a8 <laser_detect+0x5c>
		HAL_UART_Transmit(&huart2, "laser enter\r\n", strlen("laser enter\r\n"),
 800165e:	2364      	movs	r3, #100	; 0x64
 8001660:	220d      	movs	r2, #13
 8001662:	4913      	ldr	r1, [pc, #76]	; (80016b0 <laser_detect+0x64>)
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <laser_detect+0x68>)
 8001666:	f002 fe5e 	bl	8004326 <HAL_UART_Transmit>
				100);
		HAL_TIM_Base_Stop_IT(&htim6);
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <laser_detect+0x6c>)
 800166c:	f002 f80a 	bl	8003684 <HAL_TIM_Base_Stop_IT>
		Buzzer();
 8001670:	f7ff ffd8 	bl	8001624 <Buzzer>
		Uart_write(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff fcd3 	bl	8001020 <Uart_write>
		memset(Time_Duration,0,sizeof(Time_Duration));
 800167a:	221e      	movs	r2, #30
 800167c:	2100      	movs	r1, #0
 800167e:	480f      	ldr	r0, [pc, #60]	; (80016bc <laser_detect+0x70>)
 8001680:	f003 fb60 	bl	8004d44 <memset>
		HAL_Delay(5000);
 8001684:	f241 3088 	movw	r0, #5000	; 0x1388
 8001688:	f000 fdbc 	bl	8002204 <HAL_Delay>

		motor_drive_anticlockwise();
 800168c:	f7ff ff7a 	bl	8001584 <motor_drive_anticlockwise>
		time_flag = 0; // Reset timer flag for another time will execute this function
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <laser_detect+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
        sw1_flag=1;// Increment sw flag to turn on switch sw2
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <laser_detect+0x78>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
		count_sec=0;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <laser_detect+0x7c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim6);
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <laser_detect+0x6c>)
 80016a4:	f001 ffee 	bl	8003684 <HAL_TIM_Base_Stop_IT>



	}

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020800 	.word	0x40020800
 80016b0:	0800965c 	.word	0x0800965c
 80016b4:	20000390 	.word	0x20000390
 80016b8:	2000030c 	.word	0x2000030c
 80016bc:	20000414 	.word	0x20000414
 80016c0:	200004ec 	.word	0x200004ec
 80016c4:	200004f0 	.word	0x200004f0
 80016c8:	200004ea 	.word	0x200004ea

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f000 fd29 	bl	8002126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f8aa 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f000 f9ea 	bl	8001ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016dc:	f000 f9be 	bl	8001a5c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80016e0:	f000 f95c 	bl	800199c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80016e4:	f000 f990 	bl	8001a08 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016e8:	f000 f8e6 	bl	80018b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init ();
 80016ec:	f7ff fc1a 	bl	8000f24 <Ringbuf_init>
  HAL_TIM_Base_Start(&htim2);
 80016f0:	4842      	ldr	r0, [pc, #264]	; (80017fc <main+0x130>)
 80016f2:	f001 ff2b 	bl	800354c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016f6:	2100      	movs	r1, #0
 80016f8:	4840      	ldr	r0, [pc, #256]	; (80017fc <main+0x130>)
 80016fa:	f002 f831 	bl	8003760 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	if (iot_flag == 0) {       //  if IoT flag is clear then entering to Data_from_iot
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <main+0x134>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <main+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	2101      	movs	r1, #1
 800170a:	483e      	ldr	r0, [pc, #248]	; (8001804 <main+0x138>)
 800170c:	f001 f8cf 	bl	80028ae <HAL_GPIO_WritePin>

			if (data_from_iot())// Data_from_IoT function return 1 then set the I0T flag
 8001710:	f7ff fe4a 	bl	80013a8 <data_from_iot>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <main+0x54>
				iot_flag = 1;
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <main+0x134>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
		}

		if (iot_flag) { //if IoT flag is set enter into the  function
 8001720:	4b37      	ldr	r3, [pc, #220]	; (8001800 <main+0x134>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ea      	beq.n	80016fe <main+0x32>

			/*
						 * initially switch-1 flag is zero,
						 * then motor start running from default position to 90 degree position (anti-clock wise direction).
						 */
			if ( sw1_flag == 0)
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <main+0x13c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <main+0x7a>

			{
				sw1_flag=2;
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <main+0x13c>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "anticlockwise motor start\r\n",strlen("anticlockwise motor start\r\n"), 100);
 8001736:	2364      	movs	r3, #100	; 0x64
 8001738:	221b      	movs	r2, #27
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <main+0x140>)
 800173c:	4834      	ldr	r0, [pc, #208]	; (8001810 <main+0x144>)
 800173e:	f002 fdf2 	bl	8004326 <HAL_UART_Transmit>
//				motor_drive_anticlockwise();
				motor_drive_clockwise();
 8001742:	f7ff feff 	bl	8001544 <motor_drive_clockwise>

			   /*
				* once motor touch switch-2 then motor stop, timer starts for 10 seconds,
				* and motor also stay in 90 degree position
				*/
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1 && sw2_flag == 0)
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4832      	ldr	r0, [pc, #200]	; (8001814 <main+0x148>)
 800174a:	f001 f899 	bl	8002880 <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d114      	bne.n	800177e <main+0xb2>
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <main+0x14c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d110      	bne.n	800177e <main+0xb2>

			{
				sw2_flag=1;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <main+0x14c>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "motor stop\r\n",strlen("motor stop\r\n"), 100);
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	220c      	movs	r2, #12
 8001766:	492d      	ldr	r1, [pc, #180]	; (800181c <main+0x150>)
 8001768:	4829      	ldr	r0, [pc, #164]	; (8001810 <main+0x144>)
 800176a:	f002 fddc 	bl	8004326 <HAL_UART_Transmit>
				motor_drive_stop();
 800176e:	f7ff ff29 	bl	80015c4 <motor_drive_stop>
				HAL_Delay(1000);
 8001772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001776:	f000 fd45 	bl	8002204 <HAL_Delay>
				timer_start();
 800177a:	f7ff ff39 	bl	80015f0 <timer_start>

			}
			 /*if laser is not short until after 10 seconds,
			             * then motor start running from 90 degree position to default position(clockwise direction)
			             */
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0 && sw2_flag == 1) {
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <main+0x148>)
 8001782:	f001 f87d 	bl	8002880 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <main+0xce>
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <main+0x14c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d102      	bne.n	800179a <main+0xce>
				sw2_flag=0;
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <main+0x14c>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

			}
			/*
						 * Once motor touch the switch-1 again(default position) stop the motor
						 */
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1 && sw1_flag == 1)
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <main+0x138>)
 800179e:	f001 f86f 	bl	8002880 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d114      	bne.n	80017d2 <main+0x106>
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <main+0x13c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d110      	bne.n	80017d2 <main+0x106>

			{
				time_end_flag=0;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <main+0x154>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
				sw1_flag = 0;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <main+0x13c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "default position\r\n",strlen("default position\r\n"), 100);
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	2212      	movs	r2, #18
 80017c0:	4918      	ldr	r1, [pc, #96]	; (8001824 <main+0x158>)
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <main+0x144>)
 80017c4:	f002 fdaf 	bl	8004326 <HAL_UART_Transmit>
				motor_drive_stop();
 80017c8:	f7ff fefc 	bl	80015c4 <motor_drive_stop>
				iot_flag = 0;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <main+0x134>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
			}
			/*
						 *  once the timer flag is set call the laser_detect function
						 *  if timer flag is clear then stop transmitting the RF signal
						 */
			if (time_flag == 1) {
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <main+0x15c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <main+0x114>
				laser_detect();
 80017da:	f7ff ff37 	bl	800164c <laser_detect>
 80017de:	e004      	b.n	80017ea <main+0x11e>
			 */
			else
			{
				//HAL_UART_Transmit(&huart2, "RF 0\r\n",strlen("RF 0\r\n"), 100);

               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2101      	movs	r1, #1
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <main+0x138>)
 80017e6:	f001 f862 	bl	80028ae <HAL_GPIO_WritePin>

			}
			if(time_end_flag)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <main+0x154>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d085      	beq.n	80016fe <main+0x32>
			{

				Uart_flush();
 80017f2:	f7ff fc71 	bl	80010d8 <Uart_flush>
				motor_drive_anticlockwise();
 80017f6:	f7ff fec5 	bl	8001584 <motor_drive_anticlockwise>
	if (iot_flag == 0) {       //  if IoT flag is clear then entering to Data_from_iot
 80017fa:	e780      	b.n	80016fe <main+0x32>
 80017fc:	200002cc 	.word	0x200002cc
 8001800:	200004f3 	.word	0x200004f3
 8001804:	40020000 	.word	0x40020000
 8001808:	200004f0 	.word	0x200004f0
 800180c:	0800966c 	.word	0x0800966c
 8001810:	20000390 	.word	0x20000390
 8001814:	40020400 	.word	0x40020400
 8001818:	200004f1 	.word	0x200004f1
 800181c:	0800963c 	.word	0x0800963c
 8001820:	200004f2 	.word	0x200004f2
 8001824:	08009688 	.word	0x08009688
 8001828:	200004ec 	.word	0x200004ec

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b092      	sub	sp, #72	; 0x48
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2234      	movs	r2, #52	; 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fa82 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <SystemClock_Config+0x88>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <SystemClock_Config+0x88>)
 8001858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185e:	2302      	movs	r3, #2
 8001860:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001862:	2301      	movs	r3, #1
 8001864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001866:	2310      	movs	r3, #16
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f834 	bl	80028e0 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800187e:	f000 fa09 	bl	8001c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001886:	2301      	movs	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fb50 	bl	8002f40 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80018a6:	f000 f9f5 	bl	8001c94 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3748      	adds	r7, #72	; 0x48
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000

080018b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_TIM2_Init+0xe0>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <MX_TIM2_Init+0xe0>)
 80018ec:	220f      	movs	r2, #15
 80018ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <MX_TIM2_Init+0xe0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <MX_TIM2_Init+0xe0>)
 80018f8:	2263      	movs	r2, #99	; 0x63
 80018fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <MX_TIM2_Init+0xe0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_TIM2_Init+0xe0>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001908:	4823      	ldr	r0, [pc, #140]	; (8001998 <MX_TIM2_Init+0xe0>)
 800190a:	f001 fddf 	bl	80034cc <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001914:	f000 f9be 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	4619      	mov	r1, r3
 8001924:	481c      	ldr	r0, [pc, #112]	; (8001998 <MX_TIM2_Init+0xe0>)
 8001926:	f002 f94b 	bl	8003bc0 <HAL_TIM_ConfigClockSource>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001930:	f000 f9b0 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001934:	4818      	ldr	r0, [pc, #96]	; (8001998 <MX_TIM2_Init+0xe0>)
 8001936:	f001 fecb 	bl	80036d0 <HAL_TIM_PWM_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001940:	f000 f9a8 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	4619      	mov	r1, r3
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <MX_TIM2_Init+0xe0>)
 8001954:	f002 fc3c 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800195e:	f000 f999 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001962:	2360      	movs	r3, #96	; 0x60
 8001964:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM2_Init+0xe0>)
 800197a:	f002 f863 	bl	8003a44 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001984:	f000 f986 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM2_Init+0xe0>)
 800198a:	f000 f9f1 	bl	8001d70 <HAL_TIM_MspPostInit>

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002cc 	.word	0x200002cc

0800199c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019ac:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019b2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80019b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019ce:	f001 fd7d 	bl	80034cc <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019d8:	f000 f95c 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_TIM6_Init+0x64>)
 80019ea:	f002 fbf1 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019f4:	f000 f94e 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000030c 	.word	0x2000030c
 8001a04:	40001000 	.word	0x40001000

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_USART1_UART_Init+0x50>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a40:	f002 fc24 	bl	800428c <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a4a:	f000 f923 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000034c 	.word	0x2000034c
 8001a58:	40013800 	.word	0x40013800

08001a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART2_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f002 fbfa 	bl	800428c <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f8f9 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000390 	.word	0x20000390
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a34      	ldr	r2, [pc, #208]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <MX_GPIO_Init+0x134>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LED_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2121      	movs	r1, #33	; 0x21
 8001b2a:	482f      	ldr	r0, [pc, #188]	; (8001be8 <MX_GPIO_Init+0x138>)
 8001b2c:	f000 febf 	bl	80028ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|BUZZER_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f246 0110 	movw	r1, #24592	; 0x6010
 8001b36:	482d      	ldr	r0, [pc, #180]	; (8001bec <MX_GPIO_Init+0x13c>)
 8001b38:	f000 feb9 	bl	80028ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <MX_GPIO_Init+0x140>)
 8001b54:	f000 fd04 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED_Pin;
 8001b58:	2321      	movs	r3, #33	; 0x21
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481e      	ldr	r0, [pc, #120]	; (8001be8 <MX_GPIO_Init+0x138>)
 8001b70:	f000 fcf6 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <MX_GPIO_Init+0x138>)
 8001b88:	f000 fcea 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_Pin */
  GPIO_InitStruct.Pin = LASER_Pin;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LASER_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <MX_GPIO_Init+0x140>)
 8001ba0:	f000 fcde 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 BUZZER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|BUZZER_Pin;
 8001ba4:	f246 0310 	movw	r3, #24592	; 0x6010
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <MX_GPIO_Init+0x13c>)
 8001bbe:	f000 fccf 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8001bc2:	2340      	movs	r3, #64	; 0x40
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_GPIO_Init+0x13c>)
 8001bd6:	f000 fcc3 	bl	8002560 <HAL_GPIO_Init>

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// if timer is elapsed for 10 seconds and laser is not short, then send the RF signal to  paint gun ECU
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	count_sec++;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c06:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, "done\r\n", strlen("done\r\n"), 100);
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	2206      	movs	r2, #6
 8001c0c:	4918      	ldr	r1, [pc, #96]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c0e:	4819      	ldr	r0, [pc, #100]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c10:	f002 fb89 	bl	8004326 <HAL_UART_Transmit>

	laser_detect();
 8001c14:	f7ff fd1a 	bl	800164c <laser_detect>
		if(count_sec==Time_from_Iot)
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d11e      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			Uart_write(0);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f9fb 	bl	8001020 <Uart_write>
			memset(Time_Duration,0,sizeof(Time_Duration));
 8001c2a:	221e      	movs	r2, #30
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4813      	ldr	r0, [pc, #76]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c30:	f003 f888 	bl	8004d44 <memset>
			Uart_flush();
 8001c34:	f7ff fa50 	bl	80010d8 <Uart_flush>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c3a:	f001 fd23 	bl	8003684 <HAL_TIM_Base_Stop_IT>
			time_end_flag=1;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]

            sw1_flag=1;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, "Time over\r\n",strlen("Time over\r\n"), 100);
 8001c4a:	2364      	movs	r3, #100	; 0x64
 8001c4c:	220b      	movs	r2, #11
 8001c4e:	490f      	ldr	r1, [pc, #60]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c52:	f002 fb68 	bl	8004326 <HAL_UART_Transmit>
			time_flag=0;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
			count_sec=0;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]


       }
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200004ea 	.word	0x200004ea
 8001c70:	0800969c 	.word	0x0800969c
 8001c74:	20000390 	.word	0x20000390
 8001c78:	20000432 	.word	0x20000432
 8001c7c:	20000414 	.word	0x20000414
 8001c80:	2000030c 	.word	0x2000030c
 8001c84:	200004f2 	.word	0x200004f2
 8001c88:	200004f0 	.word	0x200004f0
 8001c8c:	080096a4 	.word	0x080096a4
 8001c90:	200004ec 	.word	0x200004ec

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cb0:	6253      	str	r3, [r2, #36]	; 0x24
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cee:	2007      	movs	r0, #7
 8001cf0:	f000 fb76 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d10c      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6253      	str	r3, [r2, #36]	; 0x24
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001d2a:	e018      	b.n	8001d5e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_TIM_Base_MspInit+0x6c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d113      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	6253      	str	r3, [r2, #36]	; 0x24
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_TIM_Base_MspInit+0x68>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	202b      	movs	r0, #43	; 0x2b
 8001d54:	f000 fb4f 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001d58:	202b      	movs	r0, #43	; 0x2b
 8001d5a:	f000 fb68 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40001000 	.word	0x40001000

08001d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d11c      	bne.n	8001dcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x64>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_TIM_MspPostInit+0x64>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_TIM_MspPostInit+0x64>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <HAL_TIM_MspPostInit+0x68>)
 8001dc8:	f000 fbca 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <HAL_UART_MspInit+0xe8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d131      	bne.n	8001e62 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e40:	2307      	movs	r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4820      	ldr	r0, [pc, #128]	; (8001ecc <HAL_UART_MspInit+0xf0>)
 8001e4c:	f000 fb88 	bl	8002560 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2025      	movs	r0, #37	; 0x25
 8001e56:	f000 face 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5a:	2025      	movs	r0, #37	; 0x25
 8001e5c:	f000 fae7 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e60:	e02c      	b.n	8001ebc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d127      	bne.n	8001ebc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	6253      	str	r3, [r2, #36]	; 0x24
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	61d3      	str	r3, [r2, #28]
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_UART_MspInit+0xec>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eac:	2307      	movs	r3, #7
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <HAL_UART_MspInit+0xf0>)
 8001eb8:	f000 fb52 	bl	8002560 <HAL_GPIO_Init>
}
 8001ebc:	bf00      	nop
 8001ebe:	3730      	adds	r7, #48	; 0x30
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40004400 	.word	0x40004400

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 f957 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <USART1_IRQHandler+0x14>)
 8001f2a:	f7ff f9db 	bl	80012e4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f2e:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART1_IRQHandler+0x14>)
 8001f30:	f002 fa8c 	bl	800444c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000034c 	.word	0x2000034c

08001f3c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM6_IRQHandler+0x10>)
 8001f42:	f001 fca3 	bl	800388c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000030c 	.word	0x2000030c

08001f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <_kill>:

int _kill(int pid, int sig)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f68:	f002 fec2 	bl	8004cf0 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2216      	movs	r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
	return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_exit>:

void _exit (int status)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f86:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffe7 	bl	8001f5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f90:	e7fe      	b.n	8001f90 <_exit+0x12>

08001f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e00a      	b.n	8001fba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	4601      	mov	r1, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	b2ca      	uxtb	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf0      	blt.n	8001fa4 <_read+0x12>
	}

return len;
 8001fc2:	687b      	ldr	r3, [r7, #4]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e009      	b.n	8001ff2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbf1      	blt.n	8001fde <_write+0x12>
	}
	return len;
 8001ffa:	687b      	ldr	r3, [r7, #4]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_close>:

int _close(int file)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202a:	605a      	str	r2, [r3, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <_isatty>:

int _isatty(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	return 1;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f002 fe2c 	bl	8004cf0 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20014000 	.word	0x20014000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	200004f4 	.word	0x200004f4
 80020cc:	20000510 	.word	0x20000510

080020d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	; (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002102:	f7ff ffe5 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f002 fdf9 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210a:	f7ff fadf 	bl	80016cc <main>
  bx lr
 800210e:	4770      	bx	lr
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002118:	08009b8c 	.word	0x08009b8c
  ldr r2, =_sbss
 800211c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002120:	2000050c 	.word	0x2000050c

08002124 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_IRQHandler>

08002126 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 f955 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002136:	2000      	movs	r0, #0
 8002138:	f000 f80e 	bl	8002158 <HAL_InitTick>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	71fb      	strb	r3, [r7, #7]
 8002146:	e001      	b.n	800214c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002148:	f7ff fdaa 	bl	8001ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214c:	79fb      	ldrb	r3, [r7, #7]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_InitTick+0x68>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d022      	beq.n	80021b2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_InitTick+0x6c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_InitTick+0x68>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002178:	fbb1 f3f3 	udiv	r3, r1, r3
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f962 	bl	800244a <HAL_SYSTICK_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10f      	bne.n	80021ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d809      	bhi.n	80021a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002192:	2200      	movs	r2, #0
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	f04f 30ff 	mov.w	r0, #4294967295
 800219a:	f000 f92c 	bl	80023f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_InitTick+0x70>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e004      	b.n	80021b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e001      	b.n	80021b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x1c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x20>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x1c>)
 80021dc:	6013      	str	r3, [r2, #0]
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200004f8 	.word	0x200004f8
 80021ec:	20000008 	.word	0x20000008

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_GetTick+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	200004f8 	.word	0x200004f8

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff fff0 	bl	80021f0 <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d004      	beq.n	8002228 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_Delay+0x40>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002228:	bf00      	nop
 800222a:	f7ff ffe1 	bl	80021f0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d8f7      	bhi.n	800222a <HAL_Delay+0x26>
  {
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000008 	.word	0x20000008

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff90 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff2d 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff42 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff90 	bl	8002338 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5f 	bl	80022e4 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d008      	beq.n	800248c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2204      	movs	r2, #4
 800247e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e022      	b.n	80024d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 020e 	bic.w	r2, r2, #14
 800249a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f003 021c 	and.w	r2, r3, #28
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d005      	beq.n	8002500 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e029      	b.n	8002554 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f003 021c 	and.w	r2, r3, #28
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
    }
  }
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002576:	e160      	b.n	800283a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8152 	beq.w	8002834 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80ac 	beq.w	8002834 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_GPIO_Init+0x2f8>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a5d      	ldr	r2, [pc, #372]	; (8002858 <HAL_GPIO_Init+0x2f8>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_GPIO_Init+0x2f8>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80026f4:	4a59      	ldr	r2, [pc, #356]	; (800285c <HAL_GPIO_Init+0x2fc>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_GPIO_Init+0x300>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d025      	beq.n	800276c <HAL_GPIO_Init+0x20c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a50      	ldr	r2, [pc, #320]	; (8002864 <HAL_GPIO_Init+0x304>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01f      	beq.n	8002768 <HAL_GPIO_Init+0x208>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_GPIO_Init+0x308>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d019      	beq.n	8002764 <HAL_GPIO_Init+0x204>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4e      	ldr	r2, [pc, #312]	; (800286c <HAL_GPIO_Init+0x30c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_GPIO_Init+0x200>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <HAL_GPIO_Init+0x310>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00d      	beq.n	800275c <HAL_GPIO_Init+0x1fc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_GPIO_Init+0x314>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x1f8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_GPIO_Init+0x318>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_GPIO_Init+0x1f4>
 8002750:	2306      	movs	r3, #6
 8002752:	e00c      	b.n	800276e <HAL_GPIO_Init+0x20e>
 8002754:	2307      	movs	r3, #7
 8002756:	e00a      	b.n	800276e <HAL_GPIO_Init+0x20e>
 8002758:	2305      	movs	r3, #5
 800275a:	e008      	b.n	800276e <HAL_GPIO_Init+0x20e>
 800275c:	2304      	movs	r3, #4
 800275e:	e006      	b.n	800276e <HAL_GPIO_Init+0x20e>
 8002760:	2303      	movs	r3, #3
 8002762:	e004      	b.n	800276e <HAL_GPIO_Init+0x20e>
 8002764:	2302      	movs	r3, #2
 8002766:	e002      	b.n	800276e <HAL_GPIO_Init+0x20e>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_GPIO_Init+0x20e>
 800276c:	2300      	movs	r3, #0
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	f002 0203 	and.w	r2, r2, #3
 8002774:	0092      	lsls	r2, r2, #2
 8002776:	4093      	lsls	r3, r2
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800277e:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_GPIO_Init+0x2fc>)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_GPIO_Init+0x31c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027b0:	4a32      	ldr	r2, [pc, #200]	; (800287c <HAL_GPIO_Init+0x31c>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_GPIO_Init+0x31c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_GPIO_Init+0x31c>)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e0:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_GPIO_Init+0x31c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_GPIO_Init+0x31c>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_GPIO_Init+0x31c>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800282e:	4a13      	ldr	r2, [pc, #76]	; (800287c <HAL_GPIO_Init+0x31c>)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f ae97 	bne.w	8002578 <HAL_GPIO_Init+0x18>
  }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40010000 	.word	0x40010000
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40010400 	.word	0x40010400

08002880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e001      	b.n	80028a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]
 80028ba:	4613      	mov	r3, r2
 80028bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028be:	787b      	ldrb	r3, [r7, #1]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c4:	887a      	ldrh	r2, [r7, #2]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80028ca:	e003      	b.n	80028d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	041a      	lsls	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e31d      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	4b94      	ldr	r3, [pc, #592]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028fc:	4b91      	ldr	r3, [pc, #580]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d07b      	beq.n	8002a0a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d006      	beq.n	8002926 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x5e>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d10b      	bne.n	800293e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002926:	4b87      	ldr	r3, [pc, #540]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d06a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x128>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d166      	bne.n	8002a08 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e2f7      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x74>
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e02d      	b.n	80029b0 <HAL_RCC_OscConfig+0xd0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x96>
 800295c:	4b79      	ldr	r3, [pc, #484]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a78      	ldr	r2, [pc, #480]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a75      	ldr	r2, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0xd0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0xb8>
 800297e:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6d      	ldr	r2, [pc, #436]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0xd0>
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a66      	ldr	r2, [pc, #408]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff fc1a 	bl	80021f0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7ff fc16 	bl	80021f0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e2ad      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d2:	4b5c      	ldr	r3, [pc, #368]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe0>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff fc06 	bl	80021f0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7ff fc02 	bl	80021f0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e299      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x108>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d05a      	beq.n	8002acc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d119      	bne.n	8002a56 <HAL_RCC_OscConfig+0x176>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d116      	bne.n	8002a56 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_OscConfig+0x160>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e276      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	493d      	ldr	r1, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a54:	e03a      	b.n	8002acc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCC_OscConfig+0x268>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fbc4 	bl	80021f0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7ff fbc0 	bl	80021f0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e257      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	492a      	ldr	r1, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e015      	b.n	8002acc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_OscConfig+0x268>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fba3 	bl	80021f0 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aae:	f7ff fb9f 	bl	80021f0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e236      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80b8 	beq.w	8002c4a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d170      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x218>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e21a      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d921      	bls.n	8002b4c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fc7d 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e208      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4906      	ldr	r1, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4901      	ldr	r1, [pc, #4]	; (8002b44 <HAL_RCC_OscConfig+0x264>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
 8002b42:	e020      	b.n	8002b86 <HAL_RCC_OscConfig+0x2a6>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4c:	4b99      	ldr	r3, [pc, #612]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4996      	ldr	r1, [pc, #600]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5e:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4991      	ldr	r1, [pc, #580]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fc48 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1d3      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	0b5b      	lsrs	r3, r3, #13
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b96:	4a87      	ldr	r2, [pc, #540]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	0912      	lsrs	r2, r2, #4
 8002b9c:	f002 020f 	and.w	r2, r2, #15
 8002ba0:	4985      	ldr	r1, [pc, #532]	; (8002db8 <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	5c8a      	ldrb	r2, [r1, r2]
 8002ba4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ba6:	4a85      	ldr	r2, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x4dc>)
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x4e0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fad2 	bl	8002158 <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d045      	beq.n	8002c4a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	e1b5      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d029      	beq.n	8002c1e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bca:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x4e4>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff fb0e 	bl	80021f0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd8:	f7ff fb0a 	bl	80021f0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1a1      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bea:	4b72      	ldr	r3, [pc, #456]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	496c      	ldr	r1, [pc, #432]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4967      	ldr	r1, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c1e:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x4e4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff fae4 	bl	80021f0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fae0 	bl	80021f0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e177      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d030      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7ff fac4 	bl	80021f0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff fac0 	bl	80021f0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e157      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c7e:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x38c>
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <HAL_RCC_OscConfig+0x4e8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7ff faad 	bl	80021f0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7ff faa9 	bl	80021f0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e140      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cac:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b5 	beq.w	8002e30 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	4a36      	ldr	r2, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6253      	str	r3, [r2, #36]	; 0x24
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fa71 	bl	80021f0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7ff fa6d 	bl	80021f0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e104      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x466>
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d42:	6353      	str	r3, [r2, #52]	; 0x34
 8002d44:	e02d      	b.n	8002da2 <HAL_RCC_OscConfig+0x4c2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x488>
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	6353      	str	r3, [r2, #52]	; 0x34
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d64:	6353      	str	r3, [r2, #52]	; 0x34
 8002d66:	e01c      	b.n	8002da2 <HAL_RCC_OscConfig+0x4c2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4aa>
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6353      	str	r3, [r2, #52]	; 0x34
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x4c2>
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d94:	6353      	str	r3, [r2, #52]	; 0x34
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x4d4>)
 8002d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7ff fa21 	bl	80021f0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db0:	e019      	b.n	8002de6 <HAL_RCC_OscConfig+0x506>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	080096bc 	.word	0x080096bc
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	42470020 	.word	0x42470020
 8002dc8:	42470680 	.word	0x42470680
 8002dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7ff fa0e 	bl	80021f0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0a3      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ee      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4f0>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7ff f9fc 	bl	80021f0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f9f8 	bl	80021f0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e08d      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ee      	bne.n	8002dfc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d079      	beq.n	8002f2c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d056      	beq.n	8002eec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d13b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x65c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f9d0 	bl	80021f0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff f9cc 	bl	80021f0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e063      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	4319      	orrs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	492b      	ldr	r1, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <HAL_RCC_OscConfig+0x65c>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7ff f9ab 	bl	80021f0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7ff f9a7 	bl	80021f0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e03e      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x5be>
 8002ebc:	e036      	b.n	8002f2c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <HAL_RCC_OscConfig+0x65c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f994 	bl	80021f0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7ff f990 	bl	80021f0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e027      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5ec>
 8002eea:	e01f      	b.n	8002f2c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01a      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x658>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470060 	.word	0x42470060

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e11a      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b8f      	ldr	r3, [pc, #572]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d919      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x34>
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a89      	ldr	r2, [pc, #548]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0201 	bic.w	r2, r3, #1
 8002f7c:	4985      	ldr	r1, [pc, #532]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f84:	4b83      	ldr	r3, [pc, #524]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0f9      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa2:	4b7d      	ldr	r3, [pc, #500]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	497a      	ldr	r1, [pc, #488]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 808e 	beq.w	80030de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fca:	4b73      	ldr	r3, [pc, #460]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0d7      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0bf      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0b7      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	495c      	ldr	r1, [pc, #368]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7ff f8e0 	bl	80021f0 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d112      	bne.n	8003060 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7ff f8d8 	bl	80021f0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e09b      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_ClockConfig+0xfc>
 800305e:	e03e      	b.n	80030de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d112      	bne.n	800308e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306a:	f7ff f8c1 	bl	80021f0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e084      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d1ee      	bne.n	800306a <HAL_RCC_ClockConfig+0x12a>
 800308c:	e027      	b.n	80030de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d11d      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7ff f8aa 	bl	80021f0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e06d      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_ClockConfig+0x158>
 80030ba:	e010      	b.n	80030de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7ff f898 	bl	80021f0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e05b      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d219      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1be>
 80030f2:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0201 	bic.w	r2, r3, #1
 8003106:	4923      	ldr	r1, [pc, #140]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_RCC_ClockConfig+0x254>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e034      	b.n	800318a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4917      	ldr	r1, [pc, #92]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490f      	ldr	r1, [pc, #60]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f823 	bl	80031a8 <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCC_ClockConfig+0x258>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490b      	ldr	r1, [pc, #44]	; (800319c <HAL_RCC_ClockConfig+0x25c>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x260>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x264>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe ffea 	bl	8002158 <HAL_InitTick>
 8003184:	4603      	mov	r3, r0
 8003186:	72fb      	strb	r3, [r7, #11]

  return status;
 8003188:	7afb      	ldrb	r3, [r7, #11]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023c00 	.word	0x40023c00
 8003198:	40023800 	.word	0x40023800
 800319c:	080096bc 	.word	0x080096bc
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b092      	sub	sp, #72	; 0x48
 80031ae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d00d      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x34>
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 80d5 	bhi.w	8003370 <HAL_RCC_GetSysClockFreq+0x1c8>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x28>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x2e>
 80031ce:	e0cf      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b72      	ldr	r3, [pc, #456]	; (800339c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031d4:	e0da      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80031d8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031da:	e0d7      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4b6f      	ldr	r3, [pc, #444]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031e6:	5c9b      	ldrb	r3, [r3, r2]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	0d9b      	lsrs	r3, r3, #22
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031f6:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d05d      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2200      	movs	r2, #0
 8003206:	4618      	mov	r0, r3
 8003208:	4611      	mov	r1, r2
 800320a:	4604      	mov	r4, r0
 800320c:	460d      	mov	r5, r1
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4621      	mov	r1, r4
 8003228:	1a51      	subs	r1, r2, r1
 800322a:	6139      	str	r1, [r7, #16]
 800322c:	4629      	mov	r1, r5
 800322e:	eb63 0301 	sbc.w	r3, r3, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003240:	4659      	mov	r1, fp
 8003242:	018b      	lsls	r3, r1, #6
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800324a:	4651      	mov	r1, sl
 800324c:	018a      	lsls	r2, r1, #6
 800324e:	46d4      	mov	ip, sl
 8003250:	ebb2 080c 	subs.w	r8, r2, ip
 8003254:	4659      	mov	r1, fp
 8003256:	eb63 0901 	sbc.w	r9, r3, r1
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4623      	mov	r3, r4
 8003274:	eb18 0303 	adds.w	r3, r8, r3
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	462b      	mov	r3, r5
 800327c:	eb49 0303 	adc.w	r3, r9, r3
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328e:	4629      	mov	r1, r5
 8003290:	024b      	lsls	r3, r1, #9
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	4604      	mov	r4, r0
 8003298:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800329c:	4601      	mov	r1, r0
 800329e:	024a      	lsls	r2, r1, #9
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a6:	2200      	movs	r2, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032b0:	f7fd fc7c 	bl	8000bac <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4613      	mov	r3, r2
 80032ba:	647b      	str	r3, [r7, #68]	; 0x44
 80032bc:	e055      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2200      	movs	r2, #0
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	627a      	str	r2, [r7, #36]	; 0x24
 80032c6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ca:	4642      	mov	r2, r8
 80032cc:	464b      	mov	r3, r9
 80032ce:	f04f 0000 	mov.w	r0, #0
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	0159      	lsls	r1, r3, #5
 80032d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032dc:	0150      	lsls	r0, r2, #5
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	46c4      	mov	ip, r8
 80032e4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80032e8:	4640      	mov	r0, r8
 80032ea:	4649      	mov	r1, r9
 80032ec:	468c      	mov	ip, r1
 80032ee:	eb63 0b0c 	sbc.w	fp, r3, ip
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032fe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003302:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003306:	ebb2 040a 	subs.w	r4, r2, sl
 800330a:	eb63 050b 	sbc.w	r5, r3, fp
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	00eb      	lsls	r3, r5, #3
 8003318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331c:	00e2      	lsls	r2, r4, #3
 800331e:	4614      	mov	r4, r2
 8003320:	461d      	mov	r5, r3
 8003322:	4603      	mov	r3, r0
 8003324:	18e3      	adds	r3, r4, r3
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	eb45 0303 	adc.w	r3, r5, r3
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333c:	4629      	mov	r1, r5
 800333e:	028b      	lsls	r3, r1, #10
 8003340:	4620      	mov	r0, r4
 8003342:	4629      	mov	r1, r5
 8003344:	4604      	mov	r4, r0
 8003346:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800334a:	4601      	mov	r1, r0
 800334c:	028a      	lsls	r2, r1, #10
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003354:	2200      	movs	r2, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	61fa      	str	r2, [r7, #28]
 800335a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335e:	f7fd fc25 	bl	8000bac <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4613      	mov	r3, r2
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800336e:	e00d      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0b5b      	lsrs	r3, r3, #13
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	3301      	adds	r3, #1
 8003380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800338a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800338e:	4618      	mov	r0, r3
 8003390:	3748      	adds	r7, #72	; 0x48
 8003392:	46bd      	mov	sp, r7
 8003394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	007a1200 	.word	0x007a1200
 80033a4:	080096b0 	.word	0x080096b0

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000

080033bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c0:	f7ff fff2 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	080096cc 	.word	0x080096cc

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e8:	f7ff ffde 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0adb      	lsrs	r3, r3, #11
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	080096cc 	.word	0x080096cc

0800340c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d12c      	bne.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e016      	b.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6253      	str	r3, [r2, #36]	; 0x24
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800345c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003470:	d105      	bne.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003478:	d101      	bne.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800347a:	2301      	movs	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0f      	ldr	r2, [pc, #60]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 0201 	bic.w	r2, r3, #1
 8003498:	490b      	ldr	r1, [pc, #44]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	40023c00 	.word	0x40023c00

080034cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e031      	b.n	8003542 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe fc04 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fc40 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d00e      	beq.n	8003594 <HAL_TIM_Base_Start+0x48>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIM_Base_Start+0x88>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_TIM_Base_Start+0x48>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <HAL_TIM_Base_Start+0x8c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_TIM_Base_Start+0x48>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_TIM_Base_Start+0x90>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d010      	beq.n	80035c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b6:	e007      	b.n	80035c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40010800 	.word	0x40010800

080035e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d001      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e03a      	b.n	800366e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d00e      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <HAL_TIM_Base_Start_IT+0x98>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <HAL_TIM_Base_Start_IT+0x9c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_TIM_Base_Start_IT+0xa0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d010      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	e007      	b.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40010800 	.word	0x40010800

08003684 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_Base_Stop_IT+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e031      	b.n	8003746 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f829 	bl	800374e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fb3e 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_TIM_PWM_Start+0x24>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e022      	b.n	80037ca <HAL_TIM_PWM_Start+0x6a>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d109      	bne.n	800379e <HAL_TIM_PWM_Start+0x3e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e015      	b.n	80037ca <HAL_TIM_PWM_Start+0x6a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d109      	bne.n	80037b8 <HAL_TIM_PWM_Start+0x58>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e008      	b.n	80037ca <HAL_TIM_PWM_Start+0x6a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e051      	b.n	8003876 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Start+0x82>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80037e0:	e013      	b.n	800380a <HAL_TIM_PWM_Start+0xaa>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0x92>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80037f0:	e00b      	b.n	800380a <HAL_TIM_PWM_Start+0xaa>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0xa2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003800:	e003      	b.n	800380a <HAL_TIM_PWM_Start+0xaa>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fcb7 	bl	8004186 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_PWM_Start+0xe0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_TIM_PWM_Start+0x120>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_TIM_PWM_Start+0xe0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIM_PWM_Start+0x124>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_PWM_Start+0xe0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_TIM_PWM_Start+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d010      	beq.n	8003874 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	e007      	b.n	8003874 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40010800 	.word	0x40010800

0800388c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0202 	mvn.w	r2, #2
 80038b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa43 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa36 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa45 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0204 	mvn.w	r2, #4
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa19 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa0c 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fa1b 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0208 	mvn.w	r2, #8
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9ef 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9e2 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9f1 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2208      	movs	r2, #8
 80039ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9c5 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9b8 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f9c7 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0201 	mvn.w	r2, #1
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe f8f2 	bl	8001bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9a1 	bl	8003d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0ac      	b.n	8003bb8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	f200 809f 	bhi.w	8003bac <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003bad 	.word	0x08003bad
 8003a7c:	08003bad 	.word	0x08003bad
 8003a80:	08003bad 	.word	0x08003bad
 8003a84:	08003ae9 	.word	0x08003ae9
 8003a88:	08003bad 	.word	0x08003bad
 8003a8c:	08003bad 	.word	0x08003bad
 8003a90:	08003bad 	.word	0x08003bad
 8003a94:	08003b2b 	.word	0x08003b2b
 8003a98:	08003bad 	.word	0x08003bad
 8003a9c:	08003bad 	.word	0x08003bad
 8003aa0:	08003bad 	.word	0x08003bad
 8003aa4:	08003b6b 	.word	0x08003b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f9de 	bl	8003e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	619a      	str	r2, [r3, #24]
      break;
 8003ae6:	e062      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f9fa 	bl	8003ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6999      	ldr	r1, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	021a      	lsls	r2, r3, #8
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	619a      	str	r2, [r3, #24]
      break;
 8003b28:	e041      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fa17 	bl	8003f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0208 	orr.w	r2, r2, #8
 8003b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0204 	bic.w	r2, r2, #4
 8003b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69d9      	ldr	r1, [r3, #28]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]
      break;
 8003b68:	e021      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fa34 	bl	8003fde <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	021a      	lsls	r2, r3, #8
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	61da      	str	r2, [r3, #28]
      break;
 8003baa:	e000      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_ConfigClockSource+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e0b3      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x180>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c10:	d03e      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xd0>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	f200 8087 	bhi.w	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	f000 8085 	beq.w	8003d2c <HAL_TIM_ConfigClockSource+0x16c>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d87f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c28:	2b70      	cmp	r3, #112	; 0x70
 8003c2a:	d01a      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xa2>
 8003c2c:	2b70      	cmp	r3, #112	; 0x70
 8003c2e:	d87b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	d050      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x116>
 8003c34:	2b60      	cmp	r3, #96	; 0x60
 8003c36:	d877      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c38:	2b50      	cmp	r3, #80	; 0x50
 8003c3a:	d03c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0xf6>
 8003c3c:	2b50      	cmp	r3, #80	; 0x50
 8003c3e:	d873      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d058      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x136>
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d86f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c48:	2b30      	cmp	r3, #48	; 0x30
 8003c4a:	d064      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x156>
 8003c4c:	2b30      	cmp	r3, #48	; 0x30
 8003c4e:	d86b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d060      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x156>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d867      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x156>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d05a      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c60:	e062      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f000 fa69 	bl	8004148 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
      break;
 8003c8e:	e04e      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f000 fa52 	bl	8004148 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cb2:	609a      	str	r2, [r3, #8]
      break;
 8003cb4:	e03b      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 f9c9 	bl	800405a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2150      	movs	r1, #80	; 0x50
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa20 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e02b      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 f9e7 	bl	80040b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2160      	movs	r1, #96	; 0x60
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa10 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e01b      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 f9a9 	bl	800405a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fa00 	bl	8004114 <TIM_ITRx_SetConfig>
      break;
 8003d14:	e00b      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f000 f9f7 	bl	8004114 <TIM_ITRx_SetConfig>
        break;
 8003d26:	e002      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <TIM_Base_SetConfig+0xc8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <TIM_Base_SetConfig+0xcc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <TIM_Base_SetConfig+0xd0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <TIM_Base_SetConfig+0xd4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d017      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <TIM_Base_SetConfig+0xc8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <TIM_Base_SetConfig+0xcc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00f      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <TIM_Base_SetConfig+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <TIM_Base_SetConfig+0xd4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <TIM_Base_SetConfig+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_Base_SetConfig+0x82>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <TIM_Base_SetConfig+0xdc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010800 	.word	0x40010800
 8003e68:	40010c00 	.word	0x40010c00
 8003e6c:	40011000 	.word	0x40011000

08003e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0302 	bic.w	r3, r3, #2
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	031b      	lsls	r3, r3, #12
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	621a      	str	r2, [r3, #32]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405a:	b480      	push	{r7}
 800405c:	b087      	sub	sp, #28
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f023 0201 	bic.w	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 030a 	bic.w	r3, r3, #10
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	f043 0307 	orr.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	431a      	orrs	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2201      	movs	r2, #1
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	401a      	ands	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e046      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a10      	ldr	r2, [pc, #64]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40010800 	.word	0x40010800

0800428c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e03f      	b.n	800431e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fd92 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fc25 	bl	8004b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b08a      	sub	sp, #40	; 0x28
 800432a:	af02      	add	r7, sp, #8
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b20      	cmp	r3, #32
 8004344:	d17c      	bne.n	8004440 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_UART_Transmit+0x2c>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e075      	b.n	8004442 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Transmit+0x3e>
 8004360:	2302      	movs	r3, #2
 8004362:	e06e      	b.n	8004442 <HAL_UART_Transmit+0x11c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2221      	movs	r2, #33	; 0x21
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437a:	f7fd ff39 	bl	80021f0 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d108      	bne.n	80043a8 <HAL_UART_Transmit+0x82>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e003      	b.n	80043b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b8:	e02a      	b.n	8004410 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fa11 	bl	80047ec <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e036      	b.n	8004442 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e007      	b.n	8004402 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1cf      	bne.n	80043ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f9e1 	bl	80047ec <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_UART_IRQHandler+0x52>
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa99 	bl	80049ce <UART_Receive_IT>
      return;
 800449c:	e17b      	b.n	8004796 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80b1 	beq.w	8004608 <HAL_UART_IRQHandler+0x1bc>
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_UART_IRQHandler+0x70>
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a6 	beq.w	8004608 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_UART_IRQHandler+0x90>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_UART_IRQHandler+0xb0>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f043 0202 	orr.w	r2, r3, #2
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_UART_IRQHandler+0xd0>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00f      	beq.n	8004546 <HAL_UART_IRQHandler+0xfa>
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <HAL_UART_IRQHandler+0xee>
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0208 	orr.w	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 811e 	beq.w	800478c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_UART_IRQHandler+0x11e>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa32 	bl	80049ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <HAL_UART_IRQHandler+0x146>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d031      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f974 	bl	8004880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d123      	bne.n	80045ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	4a76      	ldr	r2, [pc, #472]	; (800479c <HAL_UART_IRQHandler+0x350>)
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd ff86 	bl	80024dc <HAL_DMA_Abort_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e0:	4610      	mov	r0, r2
 80045e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e00e      	b.n	8004604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8ec 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e00a      	b.n	8004604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8e8 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	e006      	b.n	8004604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8e4 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004602:	e0c3      	b.n	800478c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	bf00      	nop
    return;
 8004606:	e0c1      	b.n	800478c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 80a1 	bne.w	8004754 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 809b 	beq.w	8004754 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8095 	beq.w	8004754 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d14e      	bne.n	80046ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004658:	8a3b      	ldrh	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8098 	beq.w	8004790 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004664:	8a3a      	ldrh	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	f080 8092 	bcs.w	8004790 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8a3a      	ldrh	r2, [r7, #16]
 8004670:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b20      	cmp	r3, #32
 800467a:	d02b      	beq.n	80046d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0210 	bic.w	r2, r2, #16
 80046c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd fec7 	bl	8002462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f876 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046ea:	e051      	b.n	8004790 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d047      	beq.n	8004794 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004704:	8a7b      	ldrh	r3, [r7, #18]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004718:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0210 	bic.w	r2, r2, #16
 8004746:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004748:	8a7b      	ldrh	r3, [r7, #18]
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f842 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004752:	e01f      	b.n	8004794 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_UART_IRQHandler+0x324>
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8c9 	bl	8004900 <UART_Transmit_IT>
    return;
 800476e:	e012      	b.n	8004796 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <HAL_UART_IRQHandler+0x34a>
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f90a 	bl	800499e <UART_EndTransmit_IT>
    return;
 800478a:	e004      	b.n	8004796 <HAL_UART_IRQHandler+0x34a>
    return;
 800478c:	bf00      	nop
 800478e:	e002      	b.n	8004796 <HAL_UART_IRQHandler+0x34a>
      return;
 8004790:	bf00      	nop
 8004792:	e000      	b.n	8004796 <HAL_UART_IRQHandler+0x34a>
      return;
 8004794:	bf00      	nop
  }
}
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	080048d9 	.word	0x080048d9

080047a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fc:	e02c      	b.n	8004858 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d028      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <UART_WaitOnFlagUntilTimeout+0x30>
 800480c:	f7fd fcf0 	bl	80021f0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	429a      	cmp	r2, r3
 800481a:	d21d      	bcs.n	8004858 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800482a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e00f      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	429a      	cmp	r2, r3
 8004874:	d0c3      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004896:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0210 	bic.w	r2, r2, #16
 80048be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff66 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b21      	cmp	r3, #33	; 0x21
 8004912:	d13e      	bne.n	8004992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	d114      	bne.n	8004948 <UART_Transmit_IT+0x48>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d110      	bne.n	8004948 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]
 8004946:	e008      	b.n	800495a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6211      	str	r1, [r2, #32]
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29b      	uxth	r3, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4619      	mov	r1, r3
 8004968:	84d1      	strh	r1, [r2, #38]	; 0x26
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800497c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff feee 	bl	80047a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	f040 8099 	bne.w	8004b16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d117      	bne.n	8004a1e <UART_Receive_IT+0x50>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d113      	bne.n	8004a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a1c:	e026      	b.n	8004a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d007      	beq.n	8004a42 <UART_Receive_IT+0x74>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <UART_Receive_IT+0x82>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e008      	b.n	8004a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d148      	bne.n	8004b12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0220 	bic.w	r2, r2, #32
 8004a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d123      	bne.n	8004b08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0210 	bic.w	r2, r2, #16
 8004ad4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d10a      	bne.n	8004afa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fe68 	bl	80047d6 <HAL_UARTEx_RxEventCallback>
 8004b06:	e002      	b.n	8004b0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fe52 	bl	80047b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e002      	b.n	8004b18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b60:	f023 030c 	bic.w	r3, r3, #12
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a55      	ldr	r2, [pc, #340]	; (8004ce0 <UART_SetConfig+0x1c0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d103      	bne.n	8004b96 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b8e:	f7fe fc29 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	e002      	b.n	8004b9c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b96:	f7fe fc11 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8004b9a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d14c      	bne.n	8004c40 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a49      	ldr	r2, [pc, #292]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	0119      	lsls	r1, r3, #4
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009a      	lsls	r2, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bdc:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004bde:	fba3 0302 	umull	r0, r3, r3, r2
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2064      	movs	r0, #100	; 0x64
 8004be6:	fb00 f303 	mul.w	r3, r0, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	3332      	adds	r3, #50	; 0x32
 8004bf0:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bfe:	4419      	add	r1, r3
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009a      	lsls	r2, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c16:	4b33      	ldr	r3, [pc, #204]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004c18:	fba3 0302 	umull	r0, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	2064      	movs	r0, #100	; 0x64
 8004c20:	fb00 f303 	mul.w	r3, r0, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	3332      	adds	r3, #50	; 0x32
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	f003 0207 	and.w	r2, r3, #7
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c3e:	e04a      	b.n	8004cd6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009a      	lsls	r2, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	0119      	lsls	r1, r3, #4
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009a      	lsls	r2, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004c78:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2064      	movs	r0, #100	; 0x64
 8004c80:	fb00 f303 	mul.w	r3, r0, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c96:	4419      	add	r1, r3
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009a      	lsls	r2, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004cb0:	fba3 0302 	umull	r0, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2064      	movs	r0, #100	; 0x64
 8004cb8:	fb00 f303 	mul.w	r3, r0, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <UART_SetConfig+0x1c4>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40013800 	.word	0x40013800
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <atoi>:
 8004ce8:	220a      	movs	r2, #10
 8004cea:	2100      	movs	r1, #0
 8004cec:	f001 bd54 	b.w	8006798 <strtol>

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	2600      	movs	r6, #0
 8004d00:	4d0c      	ldr	r5, [pc, #48]	; (8004d34 <__libc_init_array+0x38>)
 8004d02:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	f004 fc5e 	bl	80095cc <_init>
 8004d10:	2600      	movs	r6, #0
 8004d12:	4d0a      	ldr	r5, [pc, #40]	; (8004d3c <__libc_init_array+0x40>)
 8004d14:	4c0a      	ldr	r4, [pc, #40]	; (8004d40 <__libc_init_array+0x44>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08009b84 	.word	0x08009b84
 8004d38:	08009b84 	.word	0x08009b84
 8004d3c:	08009b84 	.word	0x08009b84
 8004d40:	08009b88 	.word	0x08009b88

08004d44 <memset>:
 8004d44:	4603      	mov	r3, r0
 8004d46:	4402      	add	r2, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <__cvt>:
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	bfbb      	ittet	lt
 8004d5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d62:	461f      	movlt	r7, r3
 8004d64:	2300      	movge	r3, #0
 8004d66:	232d      	movlt	r3, #45	; 0x2d
 8004d68:	b088      	sub	sp, #32
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d70:	7013      	strb	r3, [r2, #0]
 8004d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d78:	f023 0820 	bic.w	r8, r3, #32
 8004d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d80:	d005      	beq.n	8004d8e <__cvt+0x3a>
 8004d82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d86:	d100      	bne.n	8004d8a <__cvt+0x36>
 8004d88:	3501      	adds	r5, #1
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e000      	b.n	8004d90 <__cvt+0x3c>
 8004d8e:	2303      	movs	r3, #3
 8004d90:	aa07      	add	r2, sp, #28
 8004d92:	9204      	str	r2, [sp, #16]
 8004d94:	aa06      	add	r2, sp, #24
 8004d96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d9a:	e9cd 3500 	strd	r3, r5, [sp]
 8004d9e:	4622      	mov	r2, r4
 8004da0:	463b      	mov	r3, r7
 8004da2:	f001 fd91 	bl	80068c8 <_dtoa_r>
 8004da6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004daa:	4606      	mov	r6, r0
 8004dac:	d102      	bne.n	8004db4 <__cvt+0x60>
 8004dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d522      	bpl.n	8004dfa <__cvt+0xa6>
 8004db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004db8:	eb06 0905 	add.w	r9, r6, r5
 8004dbc:	d110      	bne.n	8004de0 <__cvt+0x8c>
 8004dbe:	7833      	ldrb	r3, [r6, #0]
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d10a      	bne.n	8004dda <__cvt+0x86>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb fe0e 	bl	80009ec <__aeabi_dcmpeq>
 8004dd0:	b918      	cbnz	r0, 8004dda <__cvt+0x86>
 8004dd2:	f1c5 0501 	rsb	r5, r5, #1
 8004dd6:	f8ca 5000 	str.w	r5, [sl]
 8004dda:	f8da 3000 	ldr.w	r3, [sl]
 8004dde:	4499      	add	r9, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	4620      	mov	r0, r4
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fe00 	bl	80009ec <__aeabi_dcmpeq>
 8004dec:	b108      	cbz	r0, 8004df2 <__cvt+0x9e>
 8004dee:	f8cd 901c 	str.w	r9, [sp, #28]
 8004df2:	2230      	movs	r2, #48	; 0x30
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	454b      	cmp	r3, r9
 8004df8:	d307      	bcc.n	8004e0a <__cvt+0xb6>
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	9b07      	ldr	r3, [sp, #28]
 8004dfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e00:	1b9b      	subs	r3, r3, r6
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	b008      	add	sp, #32
 8004e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0a:	1c59      	adds	r1, r3, #1
 8004e0c:	9107      	str	r1, [sp, #28]
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e7f0      	b.n	8004df4 <__cvt+0xa0>

08004e12 <__exponent>:
 8004e12:	4603      	mov	r3, r0
 8004e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e16:	2900      	cmp	r1, #0
 8004e18:	f803 2b02 	strb.w	r2, [r3], #2
 8004e1c:	bfb6      	itet	lt
 8004e1e:	222d      	movlt	r2, #45	; 0x2d
 8004e20:	222b      	movge	r2, #43	; 0x2b
 8004e22:	4249      	neglt	r1, r1
 8004e24:	2909      	cmp	r1, #9
 8004e26:	7042      	strb	r2, [r0, #1]
 8004e28:	dd2b      	ble.n	8004e82 <__exponent+0x70>
 8004e2a:	f10d 0407 	add.w	r4, sp, #7
 8004e2e:	46a4      	mov	ip, r4
 8004e30:	270a      	movs	r7, #10
 8004e32:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e36:	460a      	mov	r2, r1
 8004e38:	46a6      	mov	lr, r4
 8004e3a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e3e:	2a63      	cmp	r2, #99	; 0x63
 8004e40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e44:	4631      	mov	r1, r6
 8004e46:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e4e:	dcf0      	bgt.n	8004e32 <__exponent+0x20>
 8004e50:	3130      	adds	r1, #48	; 0x30
 8004e52:	f1ae 0502 	sub.w	r5, lr, #2
 8004e56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	1c44      	adds	r4, r0, #1
 8004e5e:	4561      	cmp	r1, ip
 8004e60:	d30a      	bcc.n	8004e78 <__exponent+0x66>
 8004e62:	f10d 0209 	add.w	r2, sp, #9
 8004e66:	eba2 020e 	sub.w	r2, r2, lr
 8004e6a:	4565      	cmp	r5, ip
 8004e6c:	bf88      	it	hi
 8004e6e:	2200      	movhi	r2, #0
 8004e70:	4413      	add	r3, r2
 8004e72:	1a18      	subs	r0, r3, r0
 8004e74:	b003      	add	sp, #12
 8004e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e80:	e7ed      	b.n	8004e5e <__exponent+0x4c>
 8004e82:	2330      	movs	r3, #48	; 0x30
 8004e84:	3130      	adds	r1, #48	; 0x30
 8004e86:	7083      	strb	r3, [r0, #2]
 8004e88:	70c1      	strb	r1, [r0, #3]
 8004e8a:	1d03      	adds	r3, r0, #4
 8004e8c:	e7f1      	b.n	8004e72 <__exponent+0x60>
	...

08004e90 <_printf_float>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	b091      	sub	sp, #68	; 0x44
 8004e96:	460c      	mov	r4, r1
 8004e98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	461f      	mov	r7, r3
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	f002 fe65 	bl	8007b70 <_localeconv_r>
 8004ea6:	6803      	ldr	r3, [r0, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	f7fb f972 	bl	8000194 <strlen>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	930e      	str	r3, [sp, #56]	; 0x38
 8004eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb8:	900a      	str	r0, [sp, #40]	; 0x28
 8004eba:	3307      	adds	r3, #7
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	f103 0208 	add.w	r2, r3, #8
 8004ec4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ec8:	f8d4 b000 	ldr.w	fp, [r4]
 8004ecc:	f8c8 2000 	str.w	r2, [r8]
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ed8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004edc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	4b9c      	ldr	r3, [pc, #624]	; (800515c <_printf_float+0x2cc>)
 8004eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eec:	f7fb fdb0 	bl	8000a50 <__aeabi_dcmpun>
 8004ef0:	bb70      	cbnz	r0, 8004f50 <_printf_float+0xc0>
 8004ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4b98      	ldr	r3, [pc, #608]	; (800515c <_printf_float+0x2cc>)
 8004efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004efc:	f7fb fd8a 	bl	8000a14 <__aeabi_dcmple>
 8004f00:	bb30      	cbnz	r0, 8004f50 <_printf_float+0xc0>
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	4640      	mov	r0, r8
 8004f08:	4651      	mov	r1, sl
 8004f0a:	f7fb fd79 	bl	8000a00 <__aeabi_dcmplt>
 8004f0e:	b110      	cbz	r0, 8004f16 <_printf_float+0x86>
 8004f10:	232d      	movs	r3, #45	; 0x2d
 8004f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f16:	4b92      	ldr	r3, [pc, #584]	; (8005160 <_printf_float+0x2d0>)
 8004f18:	4892      	ldr	r0, [pc, #584]	; (8005164 <_printf_float+0x2d4>)
 8004f1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f1e:	bf94      	ite	ls
 8004f20:	4698      	movls	r8, r3
 8004f22:	4680      	movhi	r8, r0
 8004f24:	2303      	movs	r3, #3
 8004f26:	f04f 0a00 	mov.w	sl, #0
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	f02b 0304 	bic.w	r3, fp, #4
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	4633      	mov	r3, r6
 8004f34:	4621      	mov	r1, r4
 8004f36:	4628      	mov	r0, r5
 8004f38:	9700      	str	r7, [sp, #0]
 8004f3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f3c:	f000 f9d4 	bl	80052e8 <_printf_common>
 8004f40:	3001      	adds	r0, #1
 8004f42:	f040 8090 	bne.w	8005066 <_printf_float+0x1d6>
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	b011      	add	sp, #68	; 0x44
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	4642      	mov	r2, r8
 8004f52:	4653      	mov	r3, sl
 8004f54:	4640      	mov	r0, r8
 8004f56:	4651      	mov	r1, sl
 8004f58:	f7fb fd7a 	bl	8000a50 <__aeabi_dcmpun>
 8004f5c:	b148      	cbz	r0, 8004f72 <_printf_float+0xe2>
 8004f5e:	f1ba 0f00 	cmp.w	sl, #0
 8004f62:	bfb8      	it	lt
 8004f64:	232d      	movlt	r3, #45	; 0x2d
 8004f66:	4880      	ldr	r0, [pc, #512]	; (8005168 <_printf_float+0x2d8>)
 8004f68:	bfb8      	it	lt
 8004f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	; (800516c <_printf_float+0x2dc>)
 8004f70:	e7d3      	b.n	8004f1a <_printf_float+0x8a>
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	d142      	bne.n	8005002 <_printf_float+0x172>
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	9206      	str	r2, [sp, #24]
 8004f84:	aa0e      	add	r2, sp, #56	; 0x38
 8004f86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f8a:	aa0d      	add	r2, sp, #52	; 0x34
 8004f8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f90:	9203      	str	r2, [sp, #12]
 8004f92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	4653      	mov	r3, sl
 8004fa6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fa8:	f7ff fed4 	bl	8004d54 <__cvt>
 8004fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fae:	4680      	mov	r8, r0
 8004fb0:	2947      	cmp	r1, #71	; 0x47
 8004fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fb4:	d108      	bne.n	8004fc8 <_printf_float+0x138>
 8004fb6:	1cc8      	adds	r0, r1, #3
 8004fb8:	db02      	blt.n	8004fc0 <_printf_float+0x130>
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	dd40      	ble.n	8005042 <_printf_float+0x1b2>
 8004fc0:	f1a9 0902 	sub.w	r9, r9, #2
 8004fc4:	fa5f f989 	uxtb.w	r9, r9
 8004fc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fcc:	d81f      	bhi.n	800500e <_printf_float+0x17e>
 8004fce:	464a      	mov	r2, r9
 8004fd0:	3901      	subs	r1, #1
 8004fd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fd6:	910d      	str	r1, [sp, #52]	; 0x34
 8004fd8:	f7ff ff1b 	bl	8004e12 <__exponent>
 8004fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fde:	4682      	mov	sl, r0
 8004fe0:	1813      	adds	r3, r2, r0
 8004fe2:	2a01      	cmp	r2, #1
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	dc02      	bgt.n	8004fee <_printf_float+0x15e>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	07d2      	lsls	r2, r2, #31
 8004fec:	d501      	bpl.n	8004ff2 <_printf_float+0x162>
 8004fee:	3301      	adds	r3, #1
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d09b      	beq.n	8004f32 <_printf_float+0xa2>
 8004ffa:	232d      	movs	r3, #45	; 0x2d
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	e797      	b.n	8004f32 <_printf_float+0xa2>
 8005002:	2947      	cmp	r1, #71	; 0x47
 8005004:	d1bc      	bne.n	8004f80 <_printf_float+0xf0>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ba      	bne.n	8004f80 <_printf_float+0xf0>
 800500a:	2301      	movs	r3, #1
 800500c:	e7b7      	b.n	8004f7e <_printf_float+0xee>
 800500e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005012:	d118      	bne.n	8005046 <_printf_float+0x1b6>
 8005014:	2900      	cmp	r1, #0
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	dd0b      	ble.n	8005032 <_printf_float+0x1a2>
 800501a:	6121      	str	r1, [r4, #16]
 800501c:	b913      	cbnz	r3, 8005024 <_printf_float+0x194>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	07d0      	lsls	r0, r2, #31
 8005022:	d502      	bpl.n	800502a <_printf_float+0x19a>
 8005024:	3301      	adds	r3, #1
 8005026:	440b      	add	r3, r1
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	f04f 0a00 	mov.w	sl, #0
 800502e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005030:	e7df      	b.n	8004ff2 <_printf_float+0x162>
 8005032:	b913      	cbnz	r3, 800503a <_printf_float+0x1aa>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	07d2      	lsls	r2, r2, #31
 8005038:	d501      	bpl.n	800503e <_printf_float+0x1ae>
 800503a:	3302      	adds	r3, #2
 800503c:	e7f4      	b.n	8005028 <_printf_float+0x198>
 800503e:	2301      	movs	r3, #1
 8005040:	e7f2      	b.n	8005028 <_printf_float+0x198>
 8005042:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005048:	4299      	cmp	r1, r3
 800504a:	db05      	blt.n	8005058 <_printf_float+0x1c8>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	6121      	str	r1, [r4, #16]
 8005050:	07d8      	lsls	r0, r3, #31
 8005052:	d5ea      	bpl.n	800502a <_printf_float+0x19a>
 8005054:	1c4b      	adds	r3, r1, #1
 8005056:	e7e7      	b.n	8005028 <_printf_float+0x198>
 8005058:	2900      	cmp	r1, #0
 800505a:	bfcc      	ite	gt
 800505c:	2201      	movgt	r2, #1
 800505e:	f1c1 0202 	rsble	r2, r1, #2
 8005062:	4413      	add	r3, r2
 8005064:	e7e0      	b.n	8005028 <_printf_float+0x198>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	055a      	lsls	r2, r3, #21
 800506a:	d407      	bmi.n	800507c <_printf_float+0x1ec>
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	4642      	mov	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d12b      	bne.n	80050d2 <_printf_float+0x242>
 800507a:	e764      	b.n	8004f46 <_printf_float+0xb6>
 800507c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005080:	f240 80dd 	bls.w	800523e <_printf_float+0x3ae>
 8005084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	f7fb fcae 	bl	80009ec <__aeabi_dcmpeq>
 8005090:	2800      	cmp	r0, #0
 8005092:	d033      	beq.n	80050fc <_printf_float+0x26c>
 8005094:	2301      	movs	r3, #1
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	4a35      	ldr	r2, [pc, #212]	; (8005170 <_printf_float+0x2e0>)
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f af51 	beq.w	8004f46 <_printf_float+0xb6>
 80050a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050a8:	429a      	cmp	r2, r3
 80050aa:	db02      	blt.n	80050b2 <_printf_float+0x222>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07d8      	lsls	r0, r3, #31
 80050b0:	d50f      	bpl.n	80050d2 <_printf_float+0x242>
 80050b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	f43f af42 	beq.w	8004f46 <_printf_float+0xb6>
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	f104 091a 	add.w	r9, r4, #26
 80050ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4543      	cmp	r3, r8
 80050d0:	dc09      	bgt.n	80050e6 <_printf_float+0x256>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	079b      	lsls	r3, r3, #30
 80050d6:	f100 8102 	bmi.w	80052de <_printf_float+0x44e>
 80050da:	68e0      	ldr	r0, [r4, #12]
 80050dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050de:	4298      	cmp	r0, r3
 80050e0:	bfb8      	it	lt
 80050e2:	4618      	movlt	r0, r3
 80050e4:	e731      	b.n	8004f4a <_printf_float+0xba>
 80050e6:	2301      	movs	r3, #1
 80050e8:	464a      	mov	r2, r9
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f af28 	beq.w	8004f46 <_printf_float+0xb6>
 80050f6:	f108 0801 	add.w	r8, r8, #1
 80050fa:	e7e6      	b.n	80050ca <_printf_float+0x23a>
 80050fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dc38      	bgt.n	8005174 <_printf_float+0x2e4>
 8005102:	2301      	movs	r3, #1
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <_printf_float+0x2e0>)
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f af1a 	beq.w	8004f46 <_printf_float+0xb6>
 8005112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005116:	4313      	orrs	r3, r2
 8005118:	d102      	bne.n	8005120 <_printf_float+0x290>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	07d9      	lsls	r1, r3, #31
 800511e:	d5d8      	bpl.n	80050d2 <_printf_float+0x242>
 8005120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f af0b 	beq.w	8004f46 <_printf_float+0xb6>
 8005130:	f04f 0900 	mov.w	r9, #0
 8005134:	f104 0a1a 	add.w	sl, r4, #26
 8005138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800513a:	425b      	negs	r3, r3
 800513c:	454b      	cmp	r3, r9
 800513e:	dc01      	bgt.n	8005144 <_printf_float+0x2b4>
 8005140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005142:	e794      	b.n	800506e <_printf_float+0x1de>
 8005144:	2301      	movs	r3, #1
 8005146:	4652      	mov	r2, sl
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f aef9 	beq.w	8004f46 <_printf_float+0xb6>
 8005154:	f109 0901 	add.w	r9, r9, #1
 8005158:	e7ee      	b.n	8005138 <_printf_float+0x2a8>
 800515a:	bf00      	nop
 800515c:	7fefffff 	.word	0x7fefffff
 8005160:	080096d8 	.word	0x080096d8
 8005164:	080096dc 	.word	0x080096dc
 8005168:	080096e4 	.word	0x080096e4
 800516c:	080096e0 	.word	0x080096e0
 8005170:	080096e8 	.word	0x080096e8
 8005174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005178:	429a      	cmp	r2, r3
 800517a:	bfa8      	it	ge
 800517c:	461a      	movge	r2, r3
 800517e:	2a00      	cmp	r2, #0
 8005180:	4691      	mov	r9, r2
 8005182:	dc37      	bgt.n	80051f4 <_printf_float+0x364>
 8005184:	f04f 0b00 	mov.w	fp, #0
 8005188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800518c:	f104 021a 	add.w	r2, r4, #26
 8005190:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005194:	ebaa 0309 	sub.w	r3, sl, r9
 8005198:	455b      	cmp	r3, fp
 800519a:	dc33      	bgt.n	8005204 <_printf_float+0x374>
 800519c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051a0:	429a      	cmp	r2, r3
 80051a2:	db3b      	blt.n	800521c <_printf_float+0x38c>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	07da      	lsls	r2, r3, #31
 80051a8:	d438      	bmi.n	800521c <_printf_float+0x38c>
 80051aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051ae:	eba3 020a 	sub.w	r2, r3, sl
 80051b2:	eba3 0901 	sub.w	r9, r3, r1
 80051b6:	4591      	cmp	r9, r2
 80051b8:	bfa8      	it	ge
 80051ba:	4691      	movge	r9, r2
 80051bc:	f1b9 0f00 	cmp.w	r9, #0
 80051c0:	dc34      	bgt.n	800522c <_printf_float+0x39c>
 80051c2:	f04f 0800 	mov.w	r8, #0
 80051c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ca:	f104 0a1a 	add.w	sl, r4, #26
 80051ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	eba3 0309 	sub.w	r3, r3, r9
 80051d8:	4543      	cmp	r3, r8
 80051da:	f77f af7a 	ble.w	80050d2 <_printf_float+0x242>
 80051de:	2301      	movs	r3, #1
 80051e0:	4652      	mov	r2, sl
 80051e2:	4631      	mov	r1, r6
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	3001      	adds	r0, #1
 80051ea:	f43f aeac 	beq.w	8004f46 <_printf_float+0xb6>
 80051ee:	f108 0801 	add.w	r8, r8, #1
 80051f2:	e7ec      	b.n	80051ce <_printf_float+0x33e>
 80051f4:	4613      	mov	r3, r2
 80051f6:	4631      	mov	r1, r6
 80051f8:	4642      	mov	r2, r8
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	d1c0      	bne.n	8005184 <_printf_float+0x2f4>
 8005202:	e6a0      	b.n	8004f46 <_printf_float+0xb6>
 8005204:	2301      	movs	r3, #1
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	920b      	str	r2, [sp, #44]	; 0x2c
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f ae99 	beq.w	8004f46 <_printf_float+0xb6>
 8005214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005216:	f10b 0b01 	add.w	fp, fp, #1
 800521a:	e7b9      	b.n	8005190 <_printf_float+0x300>
 800521c:	4631      	mov	r1, r6
 800521e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	d1bf      	bne.n	80051aa <_printf_float+0x31a>
 800522a:	e68c      	b.n	8004f46 <_printf_float+0xb6>
 800522c:	464b      	mov	r3, r9
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	eb08 020a 	add.w	r2, r8, sl
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	d1c2      	bne.n	80051c2 <_printf_float+0x332>
 800523c:	e683      	b.n	8004f46 <_printf_float+0xb6>
 800523e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005240:	2a01      	cmp	r2, #1
 8005242:	dc01      	bgt.n	8005248 <_printf_float+0x3b8>
 8005244:	07db      	lsls	r3, r3, #31
 8005246:	d537      	bpl.n	80052b8 <_printf_float+0x428>
 8005248:	2301      	movs	r3, #1
 800524a:	4642      	mov	r2, r8
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f ae77 	beq.w	8004f46 <_printf_float+0xb6>
 8005258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f ae6f 	beq.w	8004f46 <_printf_float+0xb6>
 8005268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800526c:	2200      	movs	r2, #0
 800526e:	2300      	movs	r3, #0
 8005270:	f7fb fbbc 	bl	80009ec <__aeabi_dcmpeq>
 8005274:	b9d8      	cbnz	r0, 80052ae <_printf_float+0x41e>
 8005276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005278:	f108 0201 	add.w	r2, r8, #1
 800527c:	3b01      	subs	r3, #1
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	d10e      	bne.n	80052a6 <_printf_float+0x416>
 8005288:	e65d      	b.n	8004f46 <_printf_float+0xb6>
 800528a:	2301      	movs	r3, #1
 800528c:	464a      	mov	r2, r9
 800528e:	4631      	mov	r1, r6
 8005290:	4628      	mov	r0, r5
 8005292:	47b8      	blx	r7
 8005294:	3001      	adds	r0, #1
 8005296:	f43f ae56 	beq.w	8004f46 <_printf_float+0xb6>
 800529a:	f108 0801 	add.w	r8, r8, #1
 800529e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a0:	3b01      	subs	r3, #1
 80052a2:	4543      	cmp	r3, r8
 80052a4:	dcf1      	bgt.n	800528a <_printf_float+0x3fa>
 80052a6:	4653      	mov	r3, sl
 80052a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052ac:	e6e0      	b.n	8005070 <_printf_float+0x1e0>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	f104 091a 	add.w	r9, r4, #26
 80052b6:	e7f2      	b.n	800529e <_printf_float+0x40e>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4642      	mov	r2, r8
 80052bc:	e7df      	b.n	800527e <_printf_float+0x3ee>
 80052be:	2301      	movs	r3, #1
 80052c0:	464a      	mov	r2, r9
 80052c2:	4631      	mov	r1, r6
 80052c4:	4628      	mov	r0, r5
 80052c6:	47b8      	blx	r7
 80052c8:	3001      	adds	r0, #1
 80052ca:	f43f ae3c 	beq.w	8004f46 <_printf_float+0xb6>
 80052ce:	f108 0801 	add.w	r8, r8, #1
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052d6:	1a5b      	subs	r3, r3, r1
 80052d8:	4543      	cmp	r3, r8
 80052da:	dcf0      	bgt.n	80052be <_printf_float+0x42e>
 80052dc:	e6fd      	b.n	80050da <_printf_float+0x24a>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	f104 0919 	add.w	r9, r4, #25
 80052e6:	e7f4      	b.n	80052d2 <_printf_float+0x442>

080052e8 <_printf_common>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	4616      	mov	r6, r2
 80052ee:	4699      	mov	r9, r3
 80052f0:	688a      	ldr	r2, [r1, #8]
 80052f2:	690b      	ldr	r3, [r1, #16]
 80052f4:	4607      	mov	r7, r0
 80052f6:	4293      	cmp	r3, r2
 80052f8:	bfb8      	it	lt
 80052fa:	4613      	movlt	r3, r2
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005302:	460c      	mov	r4, r1
 8005304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005308:	b10a      	cbz	r2, 800530e <_printf_common+0x26>
 800530a:	3301      	adds	r3, #1
 800530c:	6033      	str	r3, [r6, #0]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	0699      	lsls	r1, r3, #26
 8005312:	bf42      	ittt	mi
 8005314:	6833      	ldrmi	r3, [r6, #0]
 8005316:	3302      	addmi	r3, #2
 8005318:	6033      	strmi	r3, [r6, #0]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	f015 0506 	ands.w	r5, r5, #6
 8005320:	d106      	bne.n	8005330 <_printf_common+0x48>
 8005322:	f104 0a19 	add.w	sl, r4, #25
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	6832      	ldr	r2, [r6, #0]
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	42ab      	cmp	r3, r5
 800532e:	dc28      	bgt.n	8005382 <_printf_common+0x9a>
 8005330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005334:	1e13      	subs	r3, r2, #0
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	bf18      	it	ne
 800533a:	2301      	movne	r3, #1
 800533c:	0692      	lsls	r2, r2, #26
 800533e:	d42d      	bmi.n	800539c <_printf_common+0xb4>
 8005340:	4649      	mov	r1, r9
 8005342:	4638      	mov	r0, r7
 8005344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d020      	beq.n	8005390 <_printf_common+0xa8>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	68e5      	ldr	r5, [r4, #12]
 8005352:	f003 0306 	and.w	r3, r3, #6
 8005356:	2b04      	cmp	r3, #4
 8005358:	bf18      	it	ne
 800535a:	2500      	movne	r5, #0
 800535c:	6832      	ldr	r2, [r6, #0]
 800535e:	f04f 0600 	mov.w	r6, #0
 8005362:	68a3      	ldr	r3, [r4, #8]
 8005364:	bf08      	it	eq
 8005366:	1aad      	subeq	r5, r5, r2
 8005368:	6922      	ldr	r2, [r4, #16]
 800536a:	bf08      	it	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	4293      	cmp	r3, r2
 8005372:	bfc4      	itt	gt
 8005374:	1a9b      	subgt	r3, r3, r2
 8005376:	18ed      	addgt	r5, r5, r3
 8005378:	341a      	adds	r4, #26
 800537a:	42b5      	cmp	r5, r6
 800537c:	d11a      	bne.n	80053b4 <_printf_common+0xcc>
 800537e:	2000      	movs	r0, #0
 8005380:	e008      	b.n	8005394 <_printf_common+0xac>
 8005382:	2301      	movs	r3, #1
 8005384:	4652      	mov	r2, sl
 8005386:	4649      	mov	r1, r9
 8005388:	4638      	mov	r0, r7
 800538a:	47c0      	blx	r8
 800538c:	3001      	adds	r0, #1
 800538e:	d103      	bne.n	8005398 <_printf_common+0xb0>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005398:	3501      	adds	r5, #1
 800539a:	e7c4      	b.n	8005326 <_printf_common+0x3e>
 800539c:	2030      	movs	r0, #48	; 0x30
 800539e:	18e1      	adds	r1, r4, r3
 80053a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053aa:	4422      	add	r2, r4
 80053ac:	3302      	adds	r3, #2
 80053ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b2:	e7c5      	b.n	8005340 <_printf_common+0x58>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4622      	mov	r2, r4
 80053b8:	4649      	mov	r1, r9
 80053ba:	4638      	mov	r0, r7
 80053bc:	47c0      	blx	r8
 80053be:	3001      	adds	r0, #1
 80053c0:	d0e6      	beq.n	8005390 <_printf_common+0xa8>
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7d9      	b.n	800537a <_printf_common+0x92>
	...

080053c8 <_printf_i>:
 80053c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	7e0f      	ldrb	r7, [r1, #24]
 80053ce:	4691      	mov	r9, r2
 80053d0:	2f78      	cmp	r7, #120	; 0x78
 80053d2:	4680      	mov	r8, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	469a      	mov	sl, r3
 80053d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053de:	d807      	bhi.n	80053f0 <_printf_i+0x28>
 80053e0:	2f62      	cmp	r7, #98	; 0x62
 80053e2:	d80a      	bhi.n	80053fa <_printf_i+0x32>
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	f000 80d9 	beq.w	800559c <_printf_i+0x1d4>
 80053ea:	2f58      	cmp	r7, #88	; 0x58
 80053ec:	f000 80a4 	beq.w	8005538 <_printf_i+0x170>
 80053f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053f8:	e03a      	b.n	8005470 <_printf_i+0xa8>
 80053fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053fe:	2b15      	cmp	r3, #21
 8005400:	d8f6      	bhi.n	80053f0 <_printf_i+0x28>
 8005402:	a101      	add	r1, pc, #4	; (adr r1, 8005408 <_printf_i+0x40>)
 8005404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005408:	08005461 	.word	0x08005461
 800540c:	08005475 	.word	0x08005475
 8005410:	080053f1 	.word	0x080053f1
 8005414:	080053f1 	.word	0x080053f1
 8005418:	080053f1 	.word	0x080053f1
 800541c:	080053f1 	.word	0x080053f1
 8005420:	08005475 	.word	0x08005475
 8005424:	080053f1 	.word	0x080053f1
 8005428:	080053f1 	.word	0x080053f1
 800542c:	080053f1 	.word	0x080053f1
 8005430:	080053f1 	.word	0x080053f1
 8005434:	08005583 	.word	0x08005583
 8005438:	080054a5 	.word	0x080054a5
 800543c:	08005565 	.word	0x08005565
 8005440:	080053f1 	.word	0x080053f1
 8005444:	080053f1 	.word	0x080053f1
 8005448:	080055a5 	.word	0x080055a5
 800544c:	080053f1 	.word	0x080053f1
 8005450:	080054a5 	.word	0x080054a5
 8005454:	080053f1 	.word	0x080053f1
 8005458:	080053f1 	.word	0x080053f1
 800545c:	0800556d 	.word	0x0800556d
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	1d1a      	adds	r2, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	602a      	str	r2, [r5, #0]
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005470:	2301      	movs	r3, #1
 8005472:	e0a4      	b.n	80055be <_printf_i+0x1f6>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	6829      	ldr	r1, [r5, #0]
 8005478:	0606      	lsls	r6, r0, #24
 800547a:	f101 0304 	add.w	r3, r1, #4
 800547e:	d50a      	bpl.n	8005496 <_printf_i+0xce>
 8005480:	680e      	ldr	r6, [r1, #0]
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	2e00      	cmp	r6, #0
 8005486:	da03      	bge.n	8005490 <_printf_i+0xc8>
 8005488:	232d      	movs	r3, #45	; 0x2d
 800548a:	4276      	negs	r6, r6
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	230a      	movs	r3, #10
 8005492:	485e      	ldr	r0, [pc, #376]	; (800560c <_printf_i+0x244>)
 8005494:	e019      	b.n	80054ca <_printf_i+0x102>
 8005496:	680e      	ldr	r6, [r1, #0]
 8005498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	bf18      	it	ne
 80054a0:	b236      	sxthne	r6, r6
 80054a2:	e7ef      	b.n	8005484 <_printf_i+0xbc>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	1d19      	adds	r1, r3, #4
 80054aa:	6029      	str	r1, [r5, #0]
 80054ac:	0601      	lsls	r1, r0, #24
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0xec>
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	e002      	b.n	80054ba <_printf_i+0xf2>
 80054b4:	0646      	lsls	r6, r0, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0xe8>
 80054b8:	881e      	ldrh	r6, [r3, #0]
 80054ba:	2f6f      	cmp	r7, #111	; 0x6f
 80054bc:	bf0c      	ite	eq
 80054be:	2308      	moveq	r3, #8
 80054c0:	230a      	movne	r3, #10
 80054c2:	4852      	ldr	r0, [pc, #328]	; (800560c <_printf_i+0x244>)
 80054c4:	2100      	movs	r1, #0
 80054c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ca:	6865      	ldr	r5, [r4, #4]
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	bfa8      	it	ge
 80054d0:	6821      	ldrge	r1, [r4, #0]
 80054d2:	60a5      	str	r5, [r4, #8]
 80054d4:	bfa4      	itt	ge
 80054d6:	f021 0104 	bicge.w	r1, r1, #4
 80054da:	6021      	strge	r1, [r4, #0]
 80054dc:	b90e      	cbnz	r6, 80054e2 <_printf_i+0x11a>
 80054de:	2d00      	cmp	r5, #0
 80054e0:	d04d      	beq.n	800557e <_printf_i+0x1b6>
 80054e2:	4615      	mov	r5, r2
 80054e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80054e8:	fb03 6711 	mls	r7, r3, r1, r6
 80054ec:	5dc7      	ldrb	r7, [r0, r7]
 80054ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054f2:	4637      	mov	r7, r6
 80054f4:	42bb      	cmp	r3, r7
 80054f6:	460e      	mov	r6, r1
 80054f8:	d9f4      	bls.n	80054e4 <_printf_i+0x11c>
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d10b      	bne.n	8005516 <_printf_i+0x14e>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	07de      	lsls	r6, r3, #31
 8005502:	d508      	bpl.n	8005516 <_printf_i+0x14e>
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	6861      	ldr	r1, [r4, #4]
 8005508:	4299      	cmp	r1, r3
 800550a:	bfde      	ittt	le
 800550c:	2330      	movle	r3, #48	; 0x30
 800550e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005512:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005516:	1b52      	subs	r2, r2, r5
 8005518:	6122      	str	r2, [r4, #16]
 800551a:	464b      	mov	r3, r9
 800551c:	4621      	mov	r1, r4
 800551e:	4640      	mov	r0, r8
 8005520:	f8cd a000 	str.w	sl, [sp]
 8005524:	aa03      	add	r2, sp, #12
 8005526:	f7ff fedf 	bl	80052e8 <_printf_common>
 800552a:	3001      	adds	r0, #1
 800552c:	d14c      	bne.n	80055c8 <_printf_i+0x200>
 800552e:	f04f 30ff 	mov.w	r0, #4294967295
 8005532:	b004      	add	sp, #16
 8005534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005538:	4834      	ldr	r0, [pc, #208]	; (800560c <_printf_i+0x244>)
 800553a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800553e:	6829      	ldr	r1, [r5, #0]
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	f851 6b04 	ldr.w	r6, [r1], #4
 8005546:	6029      	str	r1, [r5, #0]
 8005548:	061d      	lsls	r5, r3, #24
 800554a:	d514      	bpl.n	8005576 <_printf_i+0x1ae>
 800554c:	07df      	lsls	r7, r3, #31
 800554e:	bf44      	itt	mi
 8005550:	f043 0320 	orrmi.w	r3, r3, #32
 8005554:	6023      	strmi	r3, [r4, #0]
 8005556:	b91e      	cbnz	r6, 8005560 <_printf_i+0x198>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	2310      	movs	r3, #16
 8005562:	e7af      	b.n	80054c4 <_printf_i+0xfc>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f043 0320 	orr.w	r3, r3, #32
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	2378      	movs	r3, #120	; 0x78
 800556e:	4828      	ldr	r0, [pc, #160]	; (8005610 <_printf_i+0x248>)
 8005570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005574:	e7e3      	b.n	800553e <_printf_i+0x176>
 8005576:	0659      	lsls	r1, r3, #25
 8005578:	bf48      	it	mi
 800557a:	b2b6      	uxthmi	r6, r6
 800557c:	e7e6      	b.n	800554c <_printf_i+0x184>
 800557e:	4615      	mov	r5, r2
 8005580:	e7bb      	b.n	80054fa <_printf_i+0x132>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	6826      	ldr	r6, [r4, #0]
 8005586:	1d18      	adds	r0, r3, #4
 8005588:	6961      	ldr	r1, [r4, #20]
 800558a:	6028      	str	r0, [r5, #0]
 800558c:	0635      	lsls	r5, r6, #24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	d501      	bpl.n	8005596 <_printf_i+0x1ce>
 8005592:	6019      	str	r1, [r3, #0]
 8005594:	e002      	b.n	800559c <_printf_i+0x1d4>
 8005596:	0670      	lsls	r0, r6, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0x1ca>
 800559a:	8019      	strh	r1, [r3, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	4615      	mov	r5, r2
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	e7ba      	b.n	800551a <_printf_i+0x152>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	2100      	movs	r1, #0
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	681d      	ldr	r5, [r3, #0]
 80055ae:	6862      	ldr	r2, [r4, #4]
 80055b0:	4628      	mov	r0, r5
 80055b2:	f002 fafb 	bl	8007bac <memchr>
 80055b6:	b108      	cbz	r0, 80055bc <_printf_i+0x1f4>
 80055b8:	1b40      	subs	r0, r0, r5
 80055ba:	6060      	str	r0, [r4, #4]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	e7a8      	b.n	800551a <_printf_i+0x152>
 80055c8:	462a      	mov	r2, r5
 80055ca:	4649      	mov	r1, r9
 80055cc:	4640      	mov	r0, r8
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	47d0      	blx	sl
 80055d2:	3001      	adds	r0, #1
 80055d4:	d0ab      	beq.n	800552e <_printf_i+0x166>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	079b      	lsls	r3, r3, #30
 80055da:	d413      	bmi.n	8005604 <_printf_i+0x23c>
 80055dc:	68e0      	ldr	r0, [r4, #12]
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	4298      	cmp	r0, r3
 80055e2:	bfb8      	it	lt
 80055e4:	4618      	movlt	r0, r3
 80055e6:	e7a4      	b.n	8005532 <_printf_i+0x16a>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4632      	mov	r2, r6
 80055ec:	4649      	mov	r1, r9
 80055ee:	4640      	mov	r0, r8
 80055f0:	47d0      	blx	sl
 80055f2:	3001      	adds	r0, #1
 80055f4:	d09b      	beq.n	800552e <_printf_i+0x166>
 80055f6:	3501      	adds	r5, #1
 80055f8:	68e3      	ldr	r3, [r4, #12]
 80055fa:	9903      	ldr	r1, [sp, #12]
 80055fc:	1a5b      	subs	r3, r3, r1
 80055fe:	42ab      	cmp	r3, r5
 8005600:	dcf2      	bgt.n	80055e8 <_printf_i+0x220>
 8005602:	e7eb      	b.n	80055dc <_printf_i+0x214>
 8005604:	2500      	movs	r5, #0
 8005606:	f104 0619 	add.w	r6, r4, #25
 800560a:	e7f5      	b.n	80055f8 <_printf_i+0x230>
 800560c:	080096ea 	.word	0x080096ea
 8005610:	080096fb 	.word	0x080096fb

08005614 <_scanf_float>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	b087      	sub	sp, #28
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	688b      	ldr	r3, [r1, #8]
 800561e:	4617      	mov	r7, r2
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005626:	bf85      	ittet	hi
 8005628:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800562c:	195b      	addhi	r3, r3, r5
 800562e:	2300      	movls	r3, #0
 8005630:	9302      	strhi	r3, [sp, #8]
 8005632:	bf88      	it	hi
 8005634:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005638:	468b      	mov	fp, r1
 800563a:	f04f 0500 	mov.w	r5, #0
 800563e:	bf8c      	ite	hi
 8005640:	608b      	strhi	r3, [r1, #8]
 8005642:	9302      	strls	r3, [sp, #8]
 8005644:	680b      	ldr	r3, [r1, #0]
 8005646:	4680      	mov	r8, r0
 8005648:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800564c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005650:	460c      	mov	r4, r1
 8005652:	465e      	mov	r6, fp
 8005654:	46aa      	mov	sl, r5
 8005656:	46a9      	mov	r9, r5
 8005658:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800565c:	9501      	str	r5, [sp, #4]
 800565e:	68a2      	ldr	r2, [r4, #8]
 8005660:	b152      	cbz	r2, 8005678 <_scanf_float+0x64>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b4e      	cmp	r3, #78	; 0x4e
 8005668:	d864      	bhi.n	8005734 <_scanf_float+0x120>
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d83c      	bhi.n	80056e8 <_scanf_float+0xd4>
 800566e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005672:	b2c8      	uxtb	r0, r1
 8005674:	280e      	cmp	r0, #14
 8005676:	d93a      	bls.n	80056ee <_scanf_float+0xda>
 8005678:	f1b9 0f00 	cmp.w	r9, #0
 800567c:	d003      	beq.n	8005686 <_scanf_float+0x72>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800568a:	f1ba 0f01 	cmp.w	sl, #1
 800568e:	f200 8113 	bhi.w	80058b8 <_scanf_float+0x2a4>
 8005692:	455e      	cmp	r6, fp
 8005694:	f200 8105 	bhi.w	80058a2 <_scanf_float+0x28e>
 8005698:	2501      	movs	r5, #1
 800569a:	4628      	mov	r0, r5
 800569c:	b007      	add	sp, #28
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056a6:	2a0d      	cmp	r2, #13
 80056a8:	d8e6      	bhi.n	8005678 <_scanf_float+0x64>
 80056aa:	a101      	add	r1, pc, #4	; (adr r1, 80056b0 <_scanf_float+0x9c>)
 80056ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056b0:	080057ef 	.word	0x080057ef
 80056b4:	08005679 	.word	0x08005679
 80056b8:	08005679 	.word	0x08005679
 80056bc:	08005679 	.word	0x08005679
 80056c0:	0800584f 	.word	0x0800584f
 80056c4:	08005827 	.word	0x08005827
 80056c8:	08005679 	.word	0x08005679
 80056cc:	08005679 	.word	0x08005679
 80056d0:	080057fd 	.word	0x080057fd
 80056d4:	08005679 	.word	0x08005679
 80056d8:	08005679 	.word	0x08005679
 80056dc:	08005679 	.word	0x08005679
 80056e0:	08005679 	.word	0x08005679
 80056e4:	080057b5 	.word	0x080057b5
 80056e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056ec:	e7db      	b.n	80056a6 <_scanf_float+0x92>
 80056ee:	290e      	cmp	r1, #14
 80056f0:	d8c2      	bhi.n	8005678 <_scanf_float+0x64>
 80056f2:	a001      	add	r0, pc, #4	; (adr r0, 80056f8 <_scanf_float+0xe4>)
 80056f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056f8:	080057a7 	.word	0x080057a7
 80056fc:	08005679 	.word	0x08005679
 8005700:	080057a7 	.word	0x080057a7
 8005704:	0800583b 	.word	0x0800583b
 8005708:	08005679 	.word	0x08005679
 800570c:	08005755 	.word	0x08005755
 8005710:	08005791 	.word	0x08005791
 8005714:	08005791 	.word	0x08005791
 8005718:	08005791 	.word	0x08005791
 800571c:	08005791 	.word	0x08005791
 8005720:	08005791 	.word	0x08005791
 8005724:	08005791 	.word	0x08005791
 8005728:	08005791 	.word	0x08005791
 800572c:	08005791 	.word	0x08005791
 8005730:	08005791 	.word	0x08005791
 8005734:	2b6e      	cmp	r3, #110	; 0x6e
 8005736:	d809      	bhi.n	800574c <_scanf_float+0x138>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d8b2      	bhi.n	80056a2 <_scanf_float+0x8e>
 800573c:	2b54      	cmp	r3, #84	; 0x54
 800573e:	d077      	beq.n	8005830 <_scanf_float+0x21c>
 8005740:	2b59      	cmp	r3, #89	; 0x59
 8005742:	d199      	bne.n	8005678 <_scanf_float+0x64>
 8005744:	2d07      	cmp	r5, #7
 8005746:	d197      	bne.n	8005678 <_scanf_float+0x64>
 8005748:	2508      	movs	r5, #8
 800574a:	e029      	b.n	80057a0 <_scanf_float+0x18c>
 800574c:	2b74      	cmp	r3, #116	; 0x74
 800574e:	d06f      	beq.n	8005830 <_scanf_float+0x21c>
 8005750:	2b79      	cmp	r3, #121	; 0x79
 8005752:	e7f6      	b.n	8005742 <_scanf_float+0x12e>
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	05c8      	lsls	r0, r1, #23
 8005758:	d51a      	bpl.n	8005790 <_scanf_float+0x17c>
 800575a:	9b02      	ldr	r3, [sp, #8]
 800575c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005760:	6021      	str	r1, [r4, #0]
 8005762:	f109 0901 	add.w	r9, r9, #1
 8005766:	b11b      	cbz	r3, 8005770 <_scanf_float+0x15c>
 8005768:	3b01      	subs	r3, #1
 800576a:	3201      	adds	r2, #1
 800576c:	9302      	str	r3, [sp, #8]
 800576e:	60a2      	str	r2, [r4, #8]
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	3b01      	subs	r3, #1
 8005774:	60a3      	str	r3, [r4, #8]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	3301      	adds	r3, #1
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3b01      	subs	r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	f340 8084 	ble.w	8005890 <_scanf_float+0x27c>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	e766      	b.n	800565e <_scanf_float+0x4a>
 8005790:	eb1a 0f05 	cmn.w	sl, r5
 8005794:	f47f af70 	bne.w	8005678 <_scanf_float+0x64>
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800579e:	6022      	str	r2, [r4, #0]
 80057a0:	f806 3b01 	strb.w	r3, [r6], #1
 80057a4:	e7e4      	b.n	8005770 <_scanf_float+0x15c>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	0610      	lsls	r0, r2, #24
 80057aa:	f57f af65 	bpl.w	8005678 <_scanf_float+0x64>
 80057ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b2:	e7f4      	b.n	800579e <_scanf_float+0x18a>
 80057b4:	f1ba 0f00 	cmp.w	sl, #0
 80057b8:	d10e      	bne.n	80057d8 <_scanf_float+0x1c4>
 80057ba:	f1b9 0f00 	cmp.w	r9, #0
 80057be:	d10e      	bne.n	80057de <_scanf_float+0x1ca>
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057ca:	d108      	bne.n	80057de <_scanf_float+0x1ca>
 80057cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057d0:	f04f 0a01 	mov.w	sl, #1
 80057d4:	6022      	str	r2, [r4, #0]
 80057d6:	e7e3      	b.n	80057a0 <_scanf_float+0x18c>
 80057d8:	f1ba 0f02 	cmp.w	sl, #2
 80057dc:	d055      	beq.n	800588a <_scanf_float+0x276>
 80057de:	2d01      	cmp	r5, #1
 80057e0:	d002      	beq.n	80057e8 <_scanf_float+0x1d4>
 80057e2:	2d04      	cmp	r5, #4
 80057e4:	f47f af48 	bne.w	8005678 <_scanf_float+0x64>
 80057e8:	3501      	adds	r5, #1
 80057ea:	b2ed      	uxtb	r5, r5
 80057ec:	e7d8      	b.n	80057a0 <_scanf_float+0x18c>
 80057ee:	f1ba 0f01 	cmp.w	sl, #1
 80057f2:	f47f af41 	bne.w	8005678 <_scanf_float+0x64>
 80057f6:	f04f 0a02 	mov.w	sl, #2
 80057fa:	e7d1      	b.n	80057a0 <_scanf_float+0x18c>
 80057fc:	b97d      	cbnz	r5, 800581e <_scanf_float+0x20a>
 80057fe:	f1b9 0f00 	cmp.w	r9, #0
 8005802:	f47f af3c 	bne.w	800567e <_scanf_float+0x6a>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800580c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005810:	f47f af39 	bne.w	8005686 <_scanf_float+0x72>
 8005814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005818:	2501      	movs	r5, #1
 800581a:	6022      	str	r2, [r4, #0]
 800581c:	e7c0      	b.n	80057a0 <_scanf_float+0x18c>
 800581e:	2d03      	cmp	r5, #3
 8005820:	d0e2      	beq.n	80057e8 <_scanf_float+0x1d4>
 8005822:	2d05      	cmp	r5, #5
 8005824:	e7de      	b.n	80057e4 <_scanf_float+0x1d0>
 8005826:	2d02      	cmp	r5, #2
 8005828:	f47f af26 	bne.w	8005678 <_scanf_float+0x64>
 800582c:	2503      	movs	r5, #3
 800582e:	e7b7      	b.n	80057a0 <_scanf_float+0x18c>
 8005830:	2d06      	cmp	r5, #6
 8005832:	f47f af21 	bne.w	8005678 <_scanf_float+0x64>
 8005836:	2507      	movs	r5, #7
 8005838:	e7b2      	b.n	80057a0 <_scanf_float+0x18c>
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	0591      	lsls	r1, r2, #22
 800583e:	f57f af1b 	bpl.w	8005678 <_scanf_float+0x64>
 8005842:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005846:	6022      	str	r2, [r4, #0]
 8005848:	f8cd 9004 	str.w	r9, [sp, #4]
 800584c:	e7a8      	b.n	80057a0 <_scanf_float+0x18c>
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005854:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005858:	d006      	beq.n	8005868 <_scanf_float+0x254>
 800585a:	0550      	lsls	r0, r2, #21
 800585c:	f57f af0c 	bpl.w	8005678 <_scanf_float+0x64>
 8005860:	f1b9 0f00 	cmp.w	r9, #0
 8005864:	f43f af0f 	beq.w	8005686 <_scanf_float+0x72>
 8005868:	0591      	lsls	r1, r2, #22
 800586a:	bf58      	it	pl
 800586c:	9901      	ldrpl	r1, [sp, #4]
 800586e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005872:	bf58      	it	pl
 8005874:	eba9 0101 	subpl.w	r1, r9, r1
 8005878:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800587c:	f04f 0900 	mov.w	r9, #0
 8005880:	bf58      	it	pl
 8005882:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005886:	6022      	str	r2, [r4, #0]
 8005888:	e78a      	b.n	80057a0 <_scanf_float+0x18c>
 800588a:	f04f 0a03 	mov.w	sl, #3
 800588e:	e787      	b.n	80057a0 <_scanf_float+0x18c>
 8005890:	4639      	mov	r1, r7
 8005892:	4640      	mov	r0, r8
 8005894:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005898:	4798      	blx	r3
 800589a:	2800      	cmp	r0, #0
 800589c:	f43f aedf 	beq.w	800565e <_scanf_float+0x4a>
 80058a0:	e6ea      	b.n	8005678 <_scanf_float+0x64>
 80058a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058a6:	463a      	mov	r2, r7
 80058a8:	4640      	mov	r0, r8
 80058aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058ae:	4798      	blx	r3
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	e6ec      	b.n	8005692 <_scanf_float+0x7e>
 80058b8:	1e6b      	subs	r3, r5, #1
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d825      	bhi.n	800590a <_scanf_float+0x2f6>
 80058be:	2d02      	cmp	r5, #2
 80058c0:	d836      	bhi.n	8005930 <_scanf_float+0x31c>
 80058c2:	455e      	cmp	r6, fp
 80058c4:	f67f aee8 	bls.w	8005698 <_scanf_float+0x84>
 80058c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058cc:	463a      	mov	r2, r7
 80058ce:	4640      	mov	r0, r8
 80058d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058d4:	4798      	blx	r3
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	3b01      	subs	r3, #1
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	e7f1      	b.n	80058c2 <_scanf_float+0x2ae>
 80058de:	9802      	ldr	r0, [sp, #8]
 80058e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058e8:	463a      	mov	r2, r7
 80058ea:	9002      	str	r0, [sp, #8]
 80058ec:	4640      	mov	r0, r8
 80058ee:	4798      	blx	r3
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fa:	fa5f fa8a 	uxtb.w	sl, sl
 80058fe:	f1ba 0f02 	cmp.w	sl, #2
 8005902:	d1ec      	bne.n	80058de <_scanf_float+0x2ca>
 8005904:	3d03      	subs	r5, #3
 8005906:	b2ed      	uxtb	r5, r5
 8005908:	1b76      	subs	r6, r6, r5
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	05da      	lsls	r2, r3, #23
 800590e:	d52f      	bpl.n	8005970 <_scanf_float+0x35c>
 8005910:	055b      	lsls	r3, r3, #21
 8005912:	d510      	bpl.n	8005936 <_scanf_float+0x322>
 8005914:	455e      	cmp	r6, fp
 8005916:	f67f aebf 	bls.w	8005698 <_scanf_float+0x84>
 800591a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800591e:	463a      	mov	r2, r7
 8005920:	4640      	mov	r0, r8
 8005922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005926:	4798      	blx	r3
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	3b01      	subs	r3, #1
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	e7f1      	b.n	8005914 <_scanf_float+0x300>
 8005930:	46aa      	mov	sl, r5
 8005932:	9602      	str	r6, [sp, #8]
 8005934:	e7df      	b.n	80058f6 <_scanf_float+0x2e2>
 8005936:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	2965      	cmp	r1, #101	; 0x65
 800593e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005942:	f106 35ff 	add.w	r5, r6, #4294967295
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	d00c      	beq.n	8005964 <_scanf_float+0x350>
 800594a:	2945      	cmp	r1, #69	; 0x45
 800594c:	d00a      	beq.n	8005964 <_scanf_float+0x350>
 800594e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005952:	463a      	mov	r2, r7
 8005954:	4640      	mov	r0, r8
 8005956:	4798      	blx	r3
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800595e:	3b01      	subs	r3, #1
 8005960:	1eb5      	subs	r5, r6, #2
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	463a      	mov	r2, r7
 8005966:	4640      	mov	r0, r8
 8005968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800596c:	4798      	blx	r3
 800596e:	462e      	mov	r6, r5
 8005970:	6825      	ldr	r5, [r4, #0]
 8005972:	f015 0510 	ands.w	r5, r5, #16
 8005976:	d155      	bne.n	8005a24 <_scanf_float+0x410>
 8005978:	7035      	strb	r5, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d11b      	bne.n	80059be <_scanf_float+0x3aa>
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	454b      	cmp	r3, r9
 800598a:	eba3 0209 	sub.w	r2, r3, r9
 800598e:	d123      	bne.n	80059d8 <_scanf_float+0x3c4>
 8005990:	2200      	movs	r2, #0
 8005992:	4659      	mov	r1, fp
 8005994:	4640      	mov	r0, r8
 8005996:	f000 fe7b 	bl	8006690 <_strtod_r>
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	f012 0f02 	tst.w	r2, #2
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	d021      	beq.n	80059ee <_scanf_float+0x3da>
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	9903      	ldr	r1, [sp, #12]
 80059ae:	600a      	str	r2, [r1, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	e9c3 6700 	strd	r6, r7, [r3]
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60e3      	str	r3, [r4, #12]
 80059bc:	e66d      	b.n	800569a <_scanf_float+0x86>
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0e5      	beq.n	8005990 <_scanf_float+0x37c>
 80059c4:	9905      	ldr	r1, [sp, #20]
 80059c6:	230a      	movs	r3, #10
 80059c8:	462a      	mov	r2, r5
 80059ca:	4640      	mov	r0, r8
 80059cc:	3101      	adds	r1, #1
 80059ce:	f000 fee1 	bl	8006794 <_strtol_r>
 80059d2:	9b04      	ldr	r3, [sp, #16]
 80059d4:	9e05      	ldr	r6, [sp, #20]
 80059d6:	1ac2      	subs	r2, r0, r3
 80059d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059dc:	429e      	cmp	r6, r3
 80059de:	bf28      	it	cs
 80059e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059e4:	4630      	mov	r0, r6
 80059e6:	4910      	ldr	r1, [pc, #64]	; (8005a28 <_scanf_float+0x414>)
 80059e8:	f000 f826 	bl	8005a38 <siprintf>
 80059ec:	e7d0      	b.n	8005990 <_scanf_float+0x37c>
 80059ee:	f012 0f04 	tst.w	r2, #4
 80059f2:	f103 0204 	add.w	r2, r3, #4
 80059f6:	d1d9      	bne.n	80059ac <_scanf_float+0x398>
 80059f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80059fc:	f8cc 2000 	str.w	r2, [ip]
 8005a00:	f8d3 8000 	ldr.w	r8, [r3]
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	f7fb f822 	bl	8000a50 <__aeabi_dcmpun>
 8005a0c:	b128      	cbz	r0, 8005a1a <_scanf_float+0x406>
 8005a0e:	4807      	ldr	r0, [pc, #28]	; (8005a2c <_scanf_float+0x418>)
 8005a10:	f000 f80e 	bl	8005a30 <nanf>
 8005a14:	f8c8 0000 	str.w	r0, [r8]
 8005a18:	e7cd      	b.n	80059b6 <_scanf_float+0x3a2>
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	f7fb f875 	bl	8000b0c <__aeabi_d2f>
 8005a22:	e7f7      	b.n	8005a14 <_scanf_float+0x400>
 8005a24:	2500      	movs	r5, #0
 8005a26:	e638      	b.n	800569a <_scanf_float+0x86>
 8005a28:	0800970c 	.word	0x0800970c
 8005a2c:	08009b18 	.word	0x08009b18

08005a30 <nanf>:
 8005a30:	4800      	ldr	r0, [pc, #0]	; (8005a34 <nanf+0x4>)
 8005a32:	4770      	bx	lr
 8005a34:	7fc00000 	.word	0x7fc00000

08005a38 <siprintf>:
 8005a38:	b40e      	push	{r1, r2, r3}
 8005a3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a3e:	b500      	push	{lr}
 8005a40:	b09c      	sub	sp, #112	; 0x70
 8005a42:	ab1d      	add	r3, sp, #116	; 0x74
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	9006      	str	r0, [sp, #24]
 8005a48:	9107      	str	r1, [sp, #28]
 8005a4a:	9104      	str	r1, [sp, #16]
 8005a4c:	4808      	ldr	r0, [pc, #32]	; (8005a70 <siprintf+0x38>)
 8005a4e:	4909      	ldr	r1, [pc, #36]	; (8005a74 <siprintf+0x3c>)
 8005a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	6800      	ldr	r0, [r0, #0]
 8005a58:	a902      	add	r1, sp, #8
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	f002 fec6 	bl	80087ec <_svfiprintf_r>
 8005a60:	2200      	movs	r2, #0
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	b01c      	add	sp, #112	; 0x70
 8005a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a6c:	b003      	add	sp, #12
 8005a6e:	4770      	bx	lr
 8005a70:	2000000c 	.word	0x2000000c
 8005a74:	ffff0208 	.word	0xffff0208

08005a78 <sulp>:
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	4690      	mov	r8, r2
 8005a80:	f002 fc20 	bl	80082c4 <__ulp>
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	f1b8 0f00 	cmp.w	r8, #0
 8005a8c:	d011      	beq.n	8005ab2 <sulp+0x3a>
 8005a8e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd0b      	ble.n	8005ab2 <sulp+0x3a>
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	051b      	lsls	r3, r3, #20
 8005a9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005aa2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	f7fa fd37 	bl	800051c <__aeabi_dmul>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aba:	0000      	movs	r0, r0
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <_strtod_l>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	469b      	mov	fp, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	b09f      	sub	sp, #124	; 0x7c
 8005aca:	931a      	str	r3, [sp, #104]	; 0x68
 8005acc:	4b9e      	ldr	r3, [pc, #632]	; (8005d48 <_strtod_l+0x288>)
 8005ace:	4682      	mov	sl, r0
 8005ad0:	681f      	ldr	r7, [r3, #0]
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	9215      	str	r2, [sp, #84]	; 0x54
 8005ad8:	f7fa fb5c 	bl	8000194 <strlen>
 8005adc:	f04f 0800 	mov.w	r8, #0
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	f04f 0900 	mov.w	r9, #0
 8005ae6:	9619      	str	r6, [sp, #100]	; 0x64
 8005ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	2a2b      	cmp	r2, #43	; 0x2b
 8005aee:	d04c      	beq.n	8005b8a <_strtod_l+0xca>
 8005af0:	d83a      	bhi.n	8005b68 <_strtod_l+0xa8>
 8005af2:	2a0d      	cmp	r2, #13
 8005af4:	d833      	bhi.n	8005b5e <_strtod_l+0x9e>
 8005af6:	2a08      	cmp	r2, #8
 8005af8:	d833      	bhi.n	8005b62 <_strtod_l+0xa2>
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d03d      	beq.n	8005b7a <_strtod_l+0xba>
 8005afe:	2300      	movs	r3, #0
 8005b00:	930a      	str	r3, [sp, #40]	; 0x28
 8005b02:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005b04:	782b      	ldrb	r3, [r5, #0]
 8005b06:	2b30      	cmp	r3, #48	; 0x30
 8005b08:	f040 80aa 	bne.w	8005c60 <_strtod_l+0x1a0>
 8005b0c:	786b      	ldrb	r3, [r5, #1]
 8005b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b12:	2b58      	cmp	r3, #88	; 0x58
 8005b14:	d166      	bne.n	8005be4 <_strtod_l+0x124>
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	4650      	mov	r0, sl
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	ab1a      	add	r3, sp, #104	; 0x68
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4a8a      	ldr	r2, [pc, #552]	; (8005d4c <_strtod_l+0x28c>)
 8005b22:	f8cd b008 	str.w	fp, [sp, #8]
 8005b26:	ab1b      	add	r3, sp, #108	; 0x6c
 8005b28:	a919      	add	r1, sp, #100	; 0x64
 8005b2a:	f001 fd23 	bl	8007574 <__gethex>
 8005b2e:	f010 0607 	ands.w	r6, r0, #7
 8005b32:	4604      	mov	r4, r0
 8005b34:	d005      	beq.n	8005b42 <_strtod_l+0x82>
 8005b36:	2e06      	cmp	r6, #6
 8005b38:	d129      	bne.n	8005b8e <_strtod_l+0xce>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	9519      	str	r5, [sp, #100]	; 0x64
 8005b40:	930a      	str	r3, [sp, #40]	; 0x28
 8005b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f040 858a 	bne.w	800665e <_strtod_l+0xb9e>
 8005b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4c:	b1d3      	cbz	r3, 8005b84 <_strtod_l+0xc4>
 8005b4e:	4642      	mov	r2, r8
 8005b50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	b01f      	add	sp, #124	; 0x7c
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	2a20      	cmp	r2, #32
 8005b60:	d1cd      	bne.n	8005afe <_strtod_l+0x3e>
 8005b62:	3301      	adds	r3, #1
 8005b64:	9319      	str	r3, [sp, #100]	; 0x64
 8005b66:	e7bf      	b.n	8005ae8 <_strtod_l+0x28>
 8005b68:	2a2d      	cmp	r2, #45	; 0x2d
 8005b6a:	d1c8      	bne.n	8005afe <_strtod_l+0x3e>
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	920a      	str	r2, [sp, #40]	; 0x28
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	9219      	str	r2, [sp, #100]	; 0x64
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1c3      	bne.n	8005b02 <_strtod_l+0x42>
 8005b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b7c:	9619      	str	r6, [sp, #100]	; 0x64
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 856b 	bne.w	800665a <_strtod_l+0xb9a>
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	e7e4      	b.n	8005b54 <_strtod_l+0x94>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	e7ef      	b.n	8005b6e <_strtod_l+0xae>
 8005b8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b90:	b13a      	cbz	r2, 8005ba2 <_strtod_l+0xe2>
 8005b92:	2135      	movs	r1, #53	; 0x35
 8005b94:	a81c      	add	r0, sp, #112	; 0x70
 8005b96:	f002 fc99 	bl	80084cc <__copybits>
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b9e:	f002 f861 	bl	8007c64 <_Bfree>
 8005ba2:	3e01      	subs	r6, #1
 8005ba4:	2e04      	cmp	r6, #4
 8005ba6:	d806      	bhi.n	8005bb6 <_strtod_l+0xf6>
 8005ba8:	e8df f006 	tbb	[pc, r6]
 8005bac:	1714030a 	.word	0x1714030a
 8005bb0:	0a          	.byte	0x0a
 8005bb1:	00          	.byte	0x00
 8005bb2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005bb6:	0721      	lsls	r1, r4, #28
 8005bb8:	d5c3      	bpl.n	8005b42 <_strtod_l+0x82>
 8005bba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005bbe:	e7c0      	b.n	8005b42 <_strtod_l+0x82>
 8005bc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005bc2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005bc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005bca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005bd2:	e7f0      	b.n	8005bb6 <_strtod_l+0xf6>
 8005bd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005d50 <_strtod_l+0x290>
 8005bd8:	e7ed      	b.n	8005bb6 <_strtod_l+0xf6>
 8005bda:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005bde:	f04f 38ff 	mov.w	r8, #4294967295
 8005be2:	e7e8      	b.n	8005bb6 <_strtod_l+0xf6>
 8005be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	9219      	str	r2, [sp, #100]	; 0x64
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b30      	cmp	r3, #48	; 0x30
 8005bee:	d0f9      	beq.n	8005be4 <_strtod_l+0x124>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0a6      	beq.n	8005b42 <_strtod_l+0x82>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9307      	str	r3, [sp, #28]
 8005bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	9308      	str	r3, [sp, #32]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	469b      	mov	fp, r3
 8005c02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005c06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005c08:	7805      	ldrb	r5, [r0, #0]
 8005c0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005c0e:	b2d9      	uxtb	r1, r3
 8005c10:	2909      	cmp	r1, #9
 8005c12:	d927      	bls.n	8005c64 <_strtod_l+0x1a4>
 8005c14:	4622      	mov	r2, r4
 8005c16:	4639      	mov	r1, r7
 8005c18:	f002 fefe 	bl	8008a18 <strncmp>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d033      	beq.n	8005c88 <_strtod_l+0x1c8>
 8005c20:	2000      	movs	r0, #0
 8005c22:	462a      	mov	r2, r5
 8005c24:	465c      	mov	r4, fp
 8005c26:	4603      	mov	r3, r0
 8005c28:	9004      	str	r0, [sp, #16]
 8005c2a:	2a65      	cmp	r2, #101	; 0x65
 8005c2c:	d001      	beq.n	8005c32 <_strtod_l+0x172>
 8005c2e:	2a45      	cmp	r2, #69	; 0x45
 8005c30:	d114      	bne.n	8005c5c <_strtod_l+0x19c>
 8005c32:	b91c      	cbnz	r4, 8005c3c <_strtod_l+0x17c>
 8005c34:	9a07      	ldr	r2, [sp, #28]
 8005c36:	4302      	orrs	r2, r0
 8005c38:	d09f      	beq.n	8005b7a <_strtod_l+0xba>
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005c3e:	1c72      	adds	r2, r6, #1
 8005c40:	9219      	str	r2, [sp, #100]	; 0x64
 8005c42:	7872      	ldrb	r2, [r6, #1]
 8005c44:	2a2b      	cmp	r2, #43	; 0x2b
 8005c46:	d079      	beq.n	8005d3c <_strtod_l+0x27c>
 8005c48:	2a2d      	cmp	r2, #45	; 0x2d
 8005c4a:	f000 8083 	beq.w	8005d54 <_strtod_l+0x294>
 8005c4e:	2700      	movs	r7, #0
 8005c50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c54:	2909      	cmp	r1, #9
 8005c56:	f240 8083 	bls.w	8005d60 <_strtod_l+0x2a0>
 8005c5a:	9619      	str	r6, [sp, #100]	; 0x64
 8005c5c:	2500      	movs	r5, #0
 8005c5e:	e09f      	b.n	8005da0 <_strtod_l+0x2e0>
 8005c60:	2300      	movs	r3, #0
 8005c62:	e7c8      	b.n	8005bf6 <_strtod_l+0x136>
 8005c64:	f1bb 0f08 	cmp.w	fp, #8
 8005c68:	bfd5      	itete	le
 8005c6a:	9906      	ldrle	r1, [sp, #24]
 8005c6c:	9905      	ldrgt	r1, [sp, #20]
 8005c6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c72:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c76:	f100 0001 	add.w	r0, r0, #1
 8005c7a:	bfd4      	ite	le
 8005c7c:	9306      	strle	r3, [sp, #24]
 8005c7e:	9305      	strgt	r3, [sp, #20]
 8005c80:	f10b 0b01 	add.w	fp, fp, #1
 8005c84:	9019      	str	r0, [sp, #100]	; 0x64
 8005c86:	e7be      	b.n	8005c06 <_strtod_l+0x146>
 8005c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c8a:	191a      	adds	r2, r3, r4
 8005c8c:	9219      	str	r2, [sp, #100]	; 0x64
 8005c8e:	5d1a      	ldrb	r2, [r3, r4]
 8005c90:	f1bb 0f00 	cmp.w	fp, #0
 8005c94:	d036      	beq.n	8005d04 <_strtod_l+0x244>
 8005c96:	465c      	mov	r4, fp
 8005c98:	9004      	str	r0, [sp, #16]
 8005c9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d912      	bls.n	8005cc8 <_strtod_l+0x208>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7c1      	b.n	8005c2a <_strtod_l+0x16a>
 8005ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ca8:	3001      	adds	r0, #1
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	9219      	str	r2, [sp, #100]	; 0x64
 8005cae:	785a      	ldrb	r2, [r3, #1]
 8005cb0:	2a30      	cmp	r2, #48	; 0x30
 8005cb2:	d0f8      	beq.n	8005ca6 <_strtod_l+0x1e6>
 8005cb4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	f200 84d5 	bhi.w	8006668 <_strtod_l+0xba8>
 8005cbe:	9004      	str	r0, [sp, #16]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc6:	9308      	str	r3, [sp, #32]
 8005cc8:	3a30      	subs	r2, #48	; 0x30
 8005cca:	f100 0301 	add.w	r3, r0, #1
 8005cce:	d013      	beq.n	8005cf8 <_strtod_l+0x238>
 8005cd0:	9904      	ldr	r1, [sp, #16]
 8005cd2:	1905      	adds	r5, r0, r4
 8005cd4:	4419      	add	r1, r3
 8005cd6:	9104      	str	r1, [sp, #16]
 8005cd8:	4623      	mov	r3, r4
 8005cda:	210a      	movs	r1, #10
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	d113      	bne.n	8005d08 <_strtod_l+0x248>
 8005ce0:	1823      	adds	r3, r4, r0
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	f104 0401 	add.w	r4, r4, #1
 8005ce8:	4404      	add	r4, r0
 8005cea:	dc1b      	bgt.n	8005d24 <_strtod_l+0x264>
 8005cec:	230a      	movs	r3, #10
 8005cee:	9906      	ldr	r1, [sp, #24]
 8005cf0:	fb03 2301 	mla	r3, r3, r1, r2
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	1c51      	adds	r1, r2, #1
 8005cfe:	9119      	str	r1, [sp, #100]	; 0x64
 8005d00:	7852      	ldrb	r2, [r2, #1]
 8005d02:	e7ca      	b.n	8005c9a <_strtod_l+0x1da>
 8005d04:	4658      	mov	r0, fp
 8005d06:	e7d3      	b.n	8005cb0 <_strtod_l+0x1f0>
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	dc04      	bgt.n	8005d16 <_strtod_l+0x256>
 8005d0c:	9f06      	ldr	r7, [sp, #24]
 8005d0e:	434f      	muls	r7, r1
 8005d10:	9706      	str	r7, [sp, #24]
 8005d12:	3301      	adds	r3, #1
 8005d14:	e7e2      	b.n	8005cdc <_strtod_l+0x21c>
 8005d16:	1c5f      	adds	r7, r3, #1
 8005d18:	2f10      	cmp	r7, #16
 8005d1a:	bfde      	ittt	le
 8005d1c:	9f05      	ldrle	r7, [sp, #20]
 8005d1e:	434f      	mulle	r7, r1
 8005d20:	9705      	strle	r7, [sp, #20]
 8005d22:	e7f6      	b.n	8005d12 <_strtod_l+0x252>
 8005d24:	2c10      	cmp	r4, #16
 8005d26:	bfdf      	itttt	le
 8005d28:	230a      	movle	r3, #10
 8005d2a:	9905      	ldrle	r1, [sp, #20]
 8005d2c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005d30:	9305      	strle	r3, [sp, #20]
 8005d32:	e7e0      	b.n	8005cf6 <_strtod_l+0x236>
 8005d34:	2300      	movs	r3, #0
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e77b      	b.n	8005c34 <_strtod_l+0x174>
 8005d3c:	2700      	movs	r7, #0
 8005d3e:	1cb2      	adds	r2, r6, #2
 8005d40:	9219      	str	r2, [sp, #100]	; 0x64
 8005d42:	78b2      	ldrb	r2, [r6, #2]
 8005d44:	e784      	b.n	8005c50 <_strtod_l+0x190>
 8005d46:	bf00      	nop
 8005d48:	08009960 	.word	0x08009960
 8005d4c:	08009714 	.word	0x08009714
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	2701      	movs	r7, #1
 8005d56:	e7f2      	b.n	8005d3e <_strtod_l+0x27e>
 8005d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d5a:	1c51      	adds	r1, r2, #1
 8005d5c:	9119      	str	r1, [sp, #100]	; 0x64
 8005d5e:	7852      	ldrb	r2, [r2, #1]
 8005d60:	2a30      	cmp	r2, #48	; 0x30
 8005d62:	d0f9      	beq.n	8005d58 <_strtod_l+0x298>
 8005d64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d68:	2908      	cmp	r1, #8
 8005d6a:	f63f af77 	bhi.w	8005c5c <_strtod_l+0x19c>
 8005d6e:	f04f 0e0a 	mov.w	lr, #10
 8005d72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005d76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d78:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d7c:	1c51      	adds	r1, r2, #1
 8005d7e:	9119      	str	r1, [sp, #100]	; 0x64
 8005d80:	7852      	ldrb	r2, [r2, #1]
 8005d82:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005d86:	2d09      	cmp	r5, #9
 8005d88:	d935      	bls.n	8005df6 <_strtod_l+0x336>
 8005d8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d8c:	1b49      	subs	r1, r1, r5
 8005d8e:	2908      	cmp	r1, #8
 8005d90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005d94:	dc02      	bgt.n	8005d9c <_strtod_l+0x2dc>
 8005d96:	4565      	cmp	r5, ip
 8005d98:	bfa8      	it	ge
 8005d9a:	4665      	movge	r5, ip
 8005d9c:	b107      	cbz	r7, 8005da0 <_strtod_l+0x2e0>
 8005d9e:	426d      	negs	r5, r5
 8005da0:	2c00      	cmp	r4, #0
 8005da2:	d14c      	bne.n	8005e3e <_strtod_l+0x37e>
 8005da4:	9907      	ldr	r1, [sp, #28]
 8005da6:	4301      	orrs	r1, r0
 8005da8:	f47f aecb 	bne.w	8005b42 <_strtod_l+0x82>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f47f aee4 	bne.w	8005b7a <_strtod_l+0xba>
 8005db2:	2a69      	cmp	r2, #105	; 0x69
 8005db4:	d026      	beq.n	8005e04 <_strtod_l+0x344>
 8005db6:	dc23      	bgt.n	8005e00 <_strtod_l+0x340>
 8005db8:	2a49      	cmp	r2, #73	; 0x49
 8005dba:	d023      	beq.n	8005e04 <_strtod_l+0x344>
 8005dbc:	2a4e      	cmp	r2, #78	; 0x4e
 8005dbe:	f47f aedc 	bne.w	8005b7a <_strtod_l+0xba>
 8005dc2:	499d      	ldr	r1, [pc, #628]	; (8006038 <_strtod_l+0x578>)
 8005dc4:	a819      	add	r0, sp, #100	; 0x64
 8005dc6:	f001 fe23 	bl	8007a10 <__match>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f43f aed5 	beq.w	8005b7a <_strtod_l+0xba>
 8005dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b28      	cmp	r3, #40	; 0x28
 8005dd6:	d12c      	bne.n	8005e32 <_strtod_l+0x372>
 8005dd8:	4998      	ldr	r1, [pc, #608]	; (800603c <_strtod_l+0x57c>)
 8005dda:	aa1c      	add	r2, sp, #112	; 0x70
 8005ddc:	a819      	add	r0, sp, #100	; 0x64
 8005dde:	f001 fe2b 	bl	8007a38 <__hexnan>
 8005de2:	2805      	cmp	r0, #5
 8005de4:	d125      	bne.n	8005e32 <_strtod_l+0x372>
 8005de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005de8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005dec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005df0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005df4:	e6a5      	b.n	8005b42 <_strtod_l+0x82>
 8005df6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005dfa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005dfe:	e7bc      	b.n	8005d7a <_strtod_l+0x2ba>
 8005e00:	2a6e      	cmp	r2, #110	; 0x6e
 8005e02:	e7dc      	b.n	8005dbe <_strtod_l+0x2fe>
 8005e04:	498e      	ldr	r1, [pc, #568]	; (8006040 <_strtod_l+0x580>)
 8005e06:	a819      	add	r0, sp, #100	; 0x64
 8005e08:	f001 fe02 	bl	8007a10 <__match>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f43f aeb4 	beq.w	8005b7a <_strtod_l+0xba>
 8005e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e14:	498b      	ldr	r1, [pc, #556]	; (8006044 <_strtod_l+0x584>)
 8005e16:	3b01      	subs	r3, #1
 8005e18:	a819      	add	r0, sp, #100	; 0x64
 8005e1a:	9319      	str	r3, [sp, #100]	; 0x64
 8005e1c:	f001 fdf8 	bl	8007a10 <__match>
 8005e20:	b910      	cbnz	r0, 8005e28 <_strtod_l+0x368>
 8005e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e24:	3301      	adds	r3, #1
 8005e26:	9319      	str	r3, [sp, #100]	; 0x64
 8005e28:	f04f 0800 	mov.w	r8, #0
 8005e2c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006048 <_strtod_l+0x588>
 8005e30:	e687      	b.n	8005b42 <_strtod_l+0x82>
 8005e32:	4886      	ldr	r0, [pc, #536]	; (800604c <_strtod_l+0x58c>)
 8005e34:	f002 fdda 	bl	80089ec <nan>
 8005e38:	4680      	mov	r8, r0
 8005e3a:	4689      	mov	r9, r1
 8005e3c:	e681      	b.n	8005b42 <_strtod_l+0x82>
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	f1bb 0f00 	cmp.w	fp, #0
 8005e44:	bf08      	it	eq
 8005e46:	46a3      	moveq	fp, r4
 8005e48:	1aeb      	subs	r3, r5, r3
 8005e4a:	2c10      	cmp	r4, #16
 8005e4c:	9806      	ldr	r0, [sp, #24]
 8005e4e:	4626      	mov	r6, r4
 8005e50:	9307      	str	r3, [sp, #28]
 8005e52:	bfa8      	it	ge
 8005e54:	2610      	movge	r6, #16
 8005e56:	f7fa fae7 	bl	8000428 <__aeabi_ui2d>
 8005e5a:	2c09      	cmp	r4, #9
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	dd13      	ble.n	8005e8a <_strtod_l+0x3ca>
 8005e62:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <_strtod_l+0x590>)
 8005e64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e68:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e6c:	f7fa fb56 	bl	800051c <__aeabi_dmul>
 8005e70:	4680      	mov	r8, r0
 8005e72:	9805      	ldr	r0, [sp, #20]
 8005e74:	4689      	mov	r9, r1
 8005e76:	f7fa fad7 	bl	8000428 <__aeabi_ui2d>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa f995 	bl	80001b0 <__adddf3>
 8005e86:	4680      	mov	r8, r0
 8005e88:	4689      	mov	r9, r1
 8005e8a:	2c0f      	cmp	r4, #15
 8005e8c:	dc36      	bgt.n	8005efc <_strtod_l+0x43c>
 8005e8e:	9b07      	ldr	r3, [sp, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f43f ae56 	beq.w	8005b42 <_strtod_l+0x82>
 8005e96:	dd22      	ble.n	8005ede <_strtod_l+0x41e>
 8005e98:	2b16      	cmp	r3, #22
 8005e9a:	dc09      	bgt.n	8005eb0 <_strtod_l+0x3f0>
 8005e9c:	496c      	ldr	r1, [pc, #432]	; (8006050 <_strtod_l+0x590>)
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eaa:	f7fa fb37 	bl	800051c <__aeabi_dmul>
 8005eae:	e7c3      	b.n	8005e38 <_strtod_l+0x378>
 8005eb0:	9a07      	ldr	r2, [sp, #28]
 8005eb2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	db20      	blt.n	8005efc <_strtod_l+0x43c>
 8005eba:	4d65      	ldr	r5, [pc, #404]	; (8006050 <_strtod_l+0x590>)
 8005ebc:	f1c4 040f 	rsb	r4, r4, #15
 8005ec0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f7fa fb26 	bl	800051c <__aeabi_dmul>
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	1b1c      	subs	r4, r3, r4
 8005ed4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005ed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005edc:	e7e5      	b.n	8005eaa <_strtod_l+0x3ea>
 8005ede:	9b07      	ldr	r3, [sp, #28]
 8005ee0:	3316      	adds	r3, #22
 8005ee2:	db0b      	blt.n	8005efc <_strtod_l+0x43c>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	1b5d      	subs	r5, r3, r5
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <_strtod_l+0x590>)
 8005eec:	4649      	mov	r1, r9
 8005eee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ef6:	f7fa fc3b 	bl	8000770 <__aeabi_ddiv>
 8005efa:	e79d      	b.n	8005e38 <_strtod_l+0x378>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	1ba6      	subs	r6, r4, r6
 8005f00:	441e      	add	r6, r3
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	dd74      	ble.n	8005ff0 <_strtod_l+0x530>
 8005f06:	f016 030f 	ands.w	r3, r6, #15
 8005f0a:	d00a      	beq.n	8005f22 <_strtod_l+0x462>
 8005f0c:	4950      	ldr	r1, [pc, #320]	; (8006050 <_strtod_l+0x590>)
 8005f0e:	4642      	mov	r2, r8
 8005f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f18:	464b      	mov	r3, r9
 8005f1a:	f7fa faff 	bl	800051c <__aeabi_dmul>
 8005f1e:	4680      	mov	r8, r0
 8005f20:	4689      	mov	r9, r1
 8005f22:	f036 060f 	bics.w	r6, r6, #15
 8005f26:	d052      	beq.n	8005fce <_strtod_l+0x50e>
 8005f28:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005f2c:	dd27      	ble.n	8005f7e <_strtod_l+0x4be>
 8005f2e:	f04f 0b00 	mov.w	fp, #0
 8005f32:	f8cd b010 	str.w	fp, [sp, #16]
 8005f36:	f8cd b020 	str.w	fp, [sp, #32]
 8005f3a:	f8cd b018 	str.w	fp, [sp, #24]
 8005f3e:	2322      	movs	r3, #34	; 0x22
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006048 <_strtod_l+0x588>
 8005f48:	f8ca 3000 	str.w	r3, [sl]
 8005f4c:	9b08      	ldr	r3, [sp, #32]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f43f adf7 	beq.w	8005b42 <_strtod_l+0x82>
 8005f54:	4650      	mov	r0, sl
 8005f56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f58:	f001 fe84 	bl	8007c64 <_Bfree>
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	9906      	ldr	r1, [sp, #24]
 8005f60:	f001 fe80 	bl	8007c64 <_Bfree>
 8005f64:	4650      	mov	r0, sl
 8005f66:	9904      	ldr	r1, [sp, #16]
 8005f68:	f001 fe7c 	bl	8007c64 <_Bfree>
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	9908      	ldr	r1, [sp, #32]
 8005f70:	f001 fe78 	bl	8007c64 <_Bfree>
 8005f74:	4659      	mov	r1, fp
 8005f76:	4650      	mov	r0, sl
 8005f78:	f001 fe74 	bl	8007c64 <_Bfree>
 8005f7c:	e5e1      	b.n	8005b42 <_strtod_l+0x82>
 8005f7e:	4b35      	ldr	r3, [pc, #212]	; (8006054 <_strtod_l+0x594>)
 8005f80:	4640      	mov	r0, r8
 8005f82:	9305      	str	r3, [sp, #20]
 8005f84:	2300      	movs	r3, #0
 8005f86:	4649      	mov	r1, r9
 8005f88:	461f      	mov	r7, r3
 8005f8a:	1136      	asrs	r6, r6, #4
 8005f8c:	2e01      	cmp	r6, #1
 8005f8e:	dc21      	bgt.n	8005fd4 <_strtod_l+0x514>
 8005f90:	b10b      	cbz	r3, 8005f96 <_strtod_l+0x4d6>
 8005f92:	4680      	mov	r8, r0
 8005f94:	4689      	mov	r9, r1
 8005f96:	4b2f      	ldr	r3, [pc, #188]	; (8006054 <_strtod_l+0x594>)
 8005f98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	f7fa fab8 	bl	800051c <__aeabi_dmul>
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <_strtod_l+0x588>)
 8005fae:	460a      	mov	r2, r1
 8005fb0:	400b      	ands	r3, r1
 8005fb2:	4929      	ldr	r1, [pc, #164]	; (8006058 <_strtod_l+0x598>)
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	428b      	cmp	r3, r1
 8005fb8:	d8b9      	bhi.n	8005f2e <_strtod_l+0x46e>
 8005fba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005fbe:	428b      	cmp	r3, r1
 8005fc0:	bf86      	itte	hi
 8005fc2:	f04f 38ff 	movhi.w	r8, #4294967295
 8005fc6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800605c <_strtod_l+0x59c>
 8005fca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	e07f      	b.n	80060d4 <_strtod_l+0x614>
 8005fd4:	07f2      	lsls	r2, r6, #31
 8005fd6:	d505      	bpl.n	8005fe4 <_strtod_l+0x524>
 8005fd8:	9b05      	ldr	r3, [sp, #20]
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa fa9d 	bl	800051c <__aeabi_dmul>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	9a05      	ldr	r2, [sp, #20]
 8005fe6:	3701      	adds	r7, #1
 8005fe8:	3208      	adds	r2, #8
 8005fea:	1076      	asrs	r6, r6, #1
 8005fec:	9205      	str	r2, [sp, #20]
 8005fee:	e7cd      	b.n	8005f8c <_strtod_l+0x4cc>
 8005ff0:	d0ed      	beq.n	8005fce <_strtod_l+0x50e>
 8005ff2:	4276      	negs	r6, r6
 8005ff4:	f016 020f 	ands.w	r2, r6, #15
 8005ff8:	d00a      	beq.n	8006010 <_strtod_l+0x550>
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <_strtod_l+0x590>)
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006002:	4649      	mov	r1, r9
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa fbb2 	bl	8000770 <__aeabi_ddiv>
 800600c:	4680      	mov	r8, r0
 800600e:	4689      	mov	r9, r1
 8006010:	1136      	asrs	r6, r6, #4
 8006012:	d0dc      	beq.n	8005fce <_strtod_l+0x50e>
 8006014:	2e1f      	cmp	r6, #31
 8006016:	dd23      	ble.n	8006060 <_strtod_l+0x5a0>
 8006018:	f04f 0b00 	mov.w	fp, #0
 800601c:	f8cd b010 	str.w	fp, [sp, #16]
 8006020:	f8cd b020 	str.w	fp, [sp, #32]
 8006024:	f8cd b018 	str.w	fp, [sp, #24]
 8006028:	2322      	movs	r3, #34	; 0x22
 800602a:	f04f 0800 	mov.w	r8, #0
 800602e:	f04f 0900 	mov.w	r9, #0
 8006032:	f8ca 3000 	str.w	r3, [sl]
 8006036:	e789      	b.n	8005f4c <_strtod_l+0x48c>
 8006038:	080096e5 	.word	0x080096e5
 800603c:	08009728 	.word	0x08009728
 8006040:	080096dd 	.word	0x080096dd
 8006044:	0800986c 	.word	0x0800986c
 8006048:	7ff00000 	.word	0x7ff00000
 800604c:	08009b18 	.word	0x08009b18
 8006050:	080099f8 	.word	0x080099f8
 8006054:	080099d0 	.word	0x080099d0
 8006058:	7ca00000 	.word	0x7ca00000
 800605c:	7fefffff 	.word	0x7fefffff
 8006060:	f016 0310 	ands.w	r3, r6, #16
 8006064:	bf18      	it	ne
 8006066:	236a      	movne	r3, #106	; 0x6a
 8006068:	4640      	mov	r0, r8
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	4649      	mov	r1, r9
 800606e:	2300      	movs	r3, #0
 8006070:	4fb0      	ldr	r7, [pc, #704]	; (8006334 <_strtod_l+0x874>)
 8006072:	07f2      	lsls	r2, r6, #31
 8006074:	d504      	bpl.n	8006080 <_strtod_l+0x5c0>
 8006076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607a:	f7fa fa4f 	bl	800051c <__aeabi_dmul>
 800607e:	2301      	movs	r3, #1
 8006080:	1076      	asrs	r6, r6, #1
 8006082:	f107 0708 	add.w	r7, r7, #8
 8006086:	d1f4      	bne.n	8006072 <_strtod_l+0x5b2>
 8006088:	b10b      	cbz	r3, 800608e <_strtod_l+0x5ce>
 800608a:	4680      	mov	r8, r0
 800608c:	4689      	mov	r9, r1
 800608e:	9b05      	ldr	r3, [sp, #20]
 8006090:	b1c3      	cbz	r3, 80060c4 <_strtod_l+0x604>
 8006092:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006096:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800609a:	2b00      	cmp	r3, #0
 800609c:	4649      	mov	r1, r9
 800609e:	dd11      	ble.n	80060c4 <_strtod_l+0x604>
 80060a0:	2b1f      	cmp	r3, #31
 80060a2:	f340 8127 	ble.w	80062f4 <_strtod_l+0x834>
 80060a6:	2b34      	cmp	r3, #52	; 0x34
 80060a8:	bfd8      	it	le
 80060aa:	f04f 33ff 	movle.w	r3, #4294967295
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	bfcf      	iteee	gt
 80060b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80060b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80060bc:	fa03 f202 	lslle.w	r2, r3, r2
 80060c0:	ea02 0901 	andle.w	r9, r2, r1
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa fc8e 	bl	80009ec <__aeabi_dcmpeq>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d1a1      	bne.n	8006018 <_strtod_l+0x558>
 80060d4:	9b06      	ldr	r3, [sp, #24]
 80060d6:	465a      	mov	r2, fp
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4650      	mov	r0, sl
 80060dc:	4623      	mov	r3, r4
 80060de:	9908      	ldr	r1, [sp, #32]
 80060e0:	f001 fe28 	bl	8007d34 <__s2b>
 80060e4:	9008      	str	r0, [sp, #32]
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f43f af21 	beq.w	8005f2e <_strtod_l+0x46e>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	f04f 0b00 	mov.w	fp, #0
 80060f2:	1b5d      	subs	r5, r3, r5
 80060f4:	9b07      	ldr	r3, [sp, #28]
 80060f6:	f8cd b010 	str.w	fp, [sp, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfb4      	ite	lt
 80060fe:	462b      	movlt	r3, r5
 8006100:	2300      	movge	r3, #0
 8006102:	930e      	str	r3, [sp, #56]	; 0x38
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800610a:	9314      	str	r3, [sp, #80]	; 0x50
 800610c:	9b08      	ldr	r3, [sp, #32]
 800610e:	4650      	mov	r0, sl
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	f001 fd67 	bl	8007be4 <_Balloc>
 8006116:	9006      	str	r0, [sp, #24]
 8006118:	2800      	cmp	r0, #0
 800611a:	f43f af10 	beq.w	8005f3e <_strtod_l+0x47e>
 800611e:	9b08      	ldr	r3, [sp, #32]
 8006120:	300c      	adds	r0, #12
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	f103 010c 	add.w	r1, r3, #12
 8006128:	3202      	adds	r2, #2
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	f001 fd4c 	bl	8007bc8 <memcpy>
 8006130:	ab1c      	add	r3, sp, #112	; 0x70
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	ab1b      	add	r3, sp, #108	; 0x6c
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	4650      	mov	r0, sl
 800613e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006142:	f002 f939 	bl	80083b8 <__d2b>
 8006146:	901a      	str	r0, [sp, #104]	; 0x68
 8006148:	2800      	cmp	r0, #0
 800614a:	f43f aef8 	beq.w	8005f3e <_strtod_l+0x47e>
 800614e:	2101      	movs	r1, #1
 8006150:	4650      	mov	r0, sl
 8006152:	f001 fe87 	bl	8007e64 <__i2b>
 8006156:	4603      	mov	r3, r0
 8006158:	9004      	str	r0, [sp, #16]
 800615a:	2800      	cmp	r0, #0
 800615c:	f43f aeef 	beq.w	8005f3e <_strtod_l+0x47e>
 8006160:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006162:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006164:	2d00      	cmp	r5, #0
 8006166:	bfab      	itete	ge
 8006168:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800616a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800616c:	18ee      	addge	r6, r5, r3
 800616e:	1b5c      	sublt	r4, r3, r5
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	bfa8      	it	ge
 8006174:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006176:	eba5 0503 	sub.w	r5, r5, r3
 800617a:	4415      	add	r5, r2
 800617c:	4b6e      	ldr	r3, [pc, #440]	; (8006338 <_strtod_l+0x878>)
 800617e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006182:	bfb8      	it	lt
 8006184:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006186:	429d      	cmp	r5, r3
 8006188:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800618c:	f280 80c4 	bge.w	8006318 <_strtod_l+0x858>
 8006190:	1b5b      	subs	r3, r3, r5
 8006192:	2b1f      	cmp	r3, #31
 8006194:	f04f 0701 	mov.w	r7, #1
 8006198:	eba2 0203 	sub.w	r2, r2, r3
 800619c:	f300 80b1 	bgt.w	8006302 <_strtod_l+0x842>
 80061a0:	2500      	movs	r5, #0
 80061a2:	fa07 f303 	lsl.w	r3, r7, r3
 80061a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061a8:	18b7      	adds	r7, r6, r2
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	42be      	cmp	r6, r7
 80061ae:	4414      	add	r4, r2
 80061b0:	441c      	add	r4, r3
 80061b2:	4633      	mov	r3, r6
 80061b4:	bfa8      	it	ge
 80061b6:	463b      	movge	r3, r7
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	bfa8      	it	ge
 80061bc:	4623      	movge	r3, r4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfc2      	ittt	gt
 80061c2:	1aff      	subgt	r7, r7, r3
 80061c4:	1ae4      	subgt	r4, r4, r3
 80061c6:	1af6      	subgt	r6, r6, r3
 80061c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd17      	ble.n	80061fe <_strtod_l+0x73e>
 80061ce:	461a      	mov	r2, r3
 80061d0:	4650      	mov	r0, sl
 80061d2:	9904      	ldr	r1, [sp, #16]
 80061d4:	f001 ff04 	bl	8007fe0 <__pow5mult>
 80061d8:	9004      	str	r0, [sp, #16]
 80061da:	2800      	cmp	r0, #0
 80061dc:	f43f aeaf 	beq.w	8005f3e <_strtod_l+0x47e>
 80061e0:	4601      	mov	r1, r0
 80061e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061e4:	4650      	mov	r0, sl
 80061e6:	f001 fe53 	bl	8007e90 <__multiply>
 80061ea:	9009      	str	r0, [sp, #36]	; 0x24
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f43f aea6 	beq.w	8005f3e <_strtod_l+0x47e>
 80061f2:	4650      	mov	r0, sl
 80061f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061f6:	f001 fd35 	bl	8007c64 <_Bfree>
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	931a      	str	r3, [sp, #104]	; 0x68
 80061fe:	2f00      	cmp	r7, #0
 8006200:	f300 808e 	bgt.w	8006320 <_strtod_l+0x860>
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dd08      	ble.n	800621c <_strtod_l+0x75c>
 800620a:	4650      	mov	r0, sl
 800620c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800620e:	9906      	ldr	r1, [sp, #24]
 8006210:	f001 fee6 	bl	8007fe0 <__pow5mult>
 8006214:	9006      	str	r0, [sp, #24]
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f ae91 	beq.w	8005f3e <_strtod_l+0x47e>
 800621c:	2c00      	cmp	r4, #0
 800621e:	dd08      	ble.n	8006232 <_strtod_l+0x772>
 8006220:	4622      	mov	r2, r4
 8006222:	4650      	mov	r0, sl
 8006224:	9906      	ldr	r1, [sp, #24]
 8006226:	f001 ff35 	bl	8008094 <__lshift>
 800622a:	9006      	str	r0, [sp, #24]
 800622c:	2800      	cmp	r0, #0
 800622e:	f43f ae86 	beq.w	8005f3e <_strtod_l+0x47e>
 8006232:	2e00      	cmp	r6, #0
 8006234:	dd08      	ble.n	8006248 <_strtod_l+0x788>
 8006236:	4632      	mov	r2, r6
 8006238:	4650      	mov	r0, sl
 800623a:	9904      	ldr	r1, [sp, #16]
 800623c:	f001 ff2a 	bl	8008094 <__lshift>
 8006240:	9004      	str	r0, [sp, #16]
 8006242:	2800      	cmp	r0, #0
 8006244:	f43f ae7b 	beq.w	8005f3e <_strtod_l+0x47e>
 8006248:	4650      	mov	r0, sl
 800624a:	9a06      	ldr	r2, [sp, #24]
 800624c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800624e:	f001 ffad 	bl	80081ac <__mdiff>
 8006252:	4683      	mov	fp, r0
 8006254:	2800      	cmp	r0, #0
 8006256:	f43f ae72 	beq.w	8005f3e <_strtod_l+0x47e>
 800625a:	2400      	movs	r4, #0
 800625c:	68c3      	ldr	r3, [r0, #12]
 800625e:	9904      	ldr	r1, [sp, #16]
 8006260:	60c4      	str	r4, [r0, #12]
 8006262:	930b      	str	r3, [sp, #44]	; 0x2c
 8006264:	f001 ff86 	bl	8008174 <__mcmp>
 8006268:	42a0      	cmp	r0, r4
 800626a:	da6b      	bge.n	8006344 <_strtod_l+0x884>
 800626c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626e:	ea53 0308 	orrs.w	r3, r3, r8
 8006272:	f040 8091 	bne.w	8006398 <_strtod_l+0x8d8>
 8006276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 808c 	bne.w	8006398 <_strtod_l+0x8d8>
 8006280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006284:	0d1b      	lsrs	r3, r3, #20
 8006286:	051b      	lsls	r3, r3, #20
 8006288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800628c:	f240 8084 	bls.w	8006398 <_strtod_l+0x8d8>
 8006290:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006294:	b91b      	cbnz	r3, 800629e <_strtod_l+0x7de>
 8006296:	f8db 3010 	ldr.w	r3, [fp, #16]
 800629a:	2b01      	cmp	r3, #1
 800629c:	dd7c      	ble.n	8006398 <_strtod_l+0x8d8>
 800629e:	4659      	mov	r1, fp
 80062a0:	2201      	movs	r2, #1
 80062a2:	4650      	mov	r0, sl
 80062a4:	f001 fef6 	bl	8008094 <__lshift>
 80062a8:	9904      	ldr	r1, [sp, #16]
 80062aa:	4683      	mov	fp, r0
 80062ac:	f001 ff62 	bl	8008174 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dd71      	ble.n	8006398 <_strtod_l+0x8d8>
 80062b4:	9905      	ldr	r1, [sp, #20]
 80062b6:	464b      	mov	r3, r9
 80062b8:	4a20      	ldr	r2, [pc, #128]	; (800633c <_strtod_l+0x87c>)
 80062ba:	2900      	cmp	r1, #0
 80062bc:	f000 808c 	beq.w	80063d8 <_strtod_l+0x918>
 80062c0:	ea02 0109 	and.w	r1, r2, r9
 80062c4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80062c8:	f300 8086 	bgt.w	80063d8 <_strtod_l+0x918>
 80062cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80062d0:	f77f aeaa 	ble.w	8006028 <_strtod_l+0x568>
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <_strtod_l+0x880>)
 80062da:	2200      	movs	r2, #0
 80062dc:	f7fa f91e 	bl	800051c <__aeabi_dmul>
 80062e0:	460b      	mov	r3, r1
 80062e2:	4303      	orrs	r3, r0
 80062e4:	bf08      	it	eq
 80062e6:	2322      	moveq	r3, #34	; 0x22
 80062e8:	4680      	mov	r8, r0
 80062ea:	4689      	mov	r9, r1
 80062ec:	bf08      	it	eq
 80062ee:	f8ca 3000 	streq.w	r3, [sl]
 80062f2:	e62f      	b.n	8005f54 <_strtod_l+0x494>
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	ea03 0808 	and.w	r8, r3, r8
 8006300:	e6e0      	b.n	80060c4 <_strtod_l+0x604>
 8006302:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006306:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800630a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800630e:	35e2      	adds	r5, #226	; 0xe2
 8006310:	fa07 f505 	lsl.w	r5, r7, r5
 8006314:	970f      	str	r7, [sp, #60]	; 0x3c
 8006316:	e747      	b.n	80061a8 <_strtod_l+0x6e8>
 8006318:	2301      	movs	r3, #1
 800631a:	2500      	movs	r5, #0
 800631c:	930f      	str	r3, [sp, #60]	; 0x3c
 800631e:	e743      	b.n	80061a8 <_strtod_l+0x6e8>
 8006320:	463a      	mov	r2, r7
 8006322:	4650      	mov	r0, sl
 8006324:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006326:	f001 feb5 	bl	8008094 <__lshift>
 800632a:	901a      	str	r0, [sp, #104]	; 0x68
 800632c:	2800      	cmp	r0, #0
 800632e:	f47f af69 	bne.w	8006204 <_strtod_l+0x744>
 8006332:	e604      	b.n	8005f3e <_strtod_l+0x47e>
 8006334:	08009740 	.word	0x08009740
 8006338:	fffffc02 	.word	0xfffffc02
 800633c:	7ff00000 	.word	0x7ff00000
 8006340:	39500000 	.word	0x39500000
 8006344:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006348:	d165      	bne.n	8006416 <_strtod_l+0x956>
 800634a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800634c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006350:	b35a      	cbz	r2, 80063aa <_strtod_l+0x8ea>
 8006352:	4a99      	ldr	r2, [pc, #612]	; (80065b8 <_strtod_l+0xaf8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d12b      	bne.n	80063b0 <_strtod_l+0x8f0>
 8006358:	9b05      	ldr	r3, [sp, #20]
 800635a:	4641      	mov	r1, r8
 800635c:	b303      	cbz	r3, 80063a0 <_strtod_l+0x8e0>
 800635e:	464a      	mov	r2, r9
 8006360:	4b96      	ldr	r3, [pc, #600]	; (80065bc <_strtod_l+0xafc>)
 8006362:	4013      	ands	r3, r2
 8006364:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	d81b      	bhi.n	80063a6 <_strtod_l+0x8e6>
 800636e:	0d1b      	lsrs	r3, r3, #20
 8006370:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	4299      	cmp	r1, r3
 800637a:	d119      	bne.n	80063b0 <_strtod_l+0x8f0>
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <_strtod_l+0xb00>)
 800637e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006380:	429a      	cmp	r2, r3
 8006382:	d102      	bne.n	800638a <_strtod_l+0x8ca>
 8006384:	3101      	adds	r1, #1
 8006386:	f43f adda 	beq.w	8005f3e <_strtod_l+0x47e>
 800638a:	f04f 0800 	mov.w	r8, #0
 800638e:	4b8b      	ldr	r3, [pc, #556]	; (80065bc <_strtod_l+0xafc>)
 8006390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006392:	401a      	ands	r2, r3
 8006394:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006398:	9b05      	ldr	r3, [sp, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d19a      	bne.n	80062d4 <_strtod_l+0x814>
 800639e:	e5d9      	b.n	8005f54 <_strtod_l+0x494>
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	e7e8      	b.n	8006378 <_strtod_l+0x8b8>
 80063a6:	4613      	mov	r3, r2
 80063a8:	e7e6      	b.n	8006378 <_strtod_l+0x8b8>
 80063aa:	ea53 0308 	orrs.w	r3, r3, r8
 80063ae:	d081      	beq.n	80062b4 <_strtod_l+0x7f4>
 80063b0:	b1e5      	cbz	r5, 80063ec <_strtod_l+0x92c>
 80063b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b4:	421d      	tst	r5, r3
 80063b6:	d0ef      	beq.n	8006398 <_strtod_l+0x8d8>
 80063b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	9a05      	ldr	r2, [sp, #20]
 80063c0:	b1c3      	cbz	r3, 80063f4 <_strtod_l+0x934>
 80063c2:	f7ff fb59 	bl	8005a78 <sulp>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063ce:	f7f9 feef 	bl	80001b0 <__adddf3>
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	e7df      	b.n	8006398 <_strtod_l+0x8d8>
 80063d8:	4013      	ands	r3, r2
 80063da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80063de:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80063e2:	f04f 38ff 	mov.w	r8, #4294967295
 80063e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80063ea:	e7d5      	b.n	8006398 <_strtod_l+0x8d8>
 80063ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ee:	ea13 0f08 	tst.w	r3, r8
 80063f2:	e7e0      	b.n	80063b6 <_strtod_l+0x8f6>
 80063f4:	f7ff fb40 	bl	8005a78 <sulp>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006400:	f7f9 fed4 	bl	80001ac <__aeabi_dsub>
 8006404:	2200      	movs	r2, #0
 8006406:	2300      	movs	r3, #0
 8006408:	4680      	mov	r8, r0
 800640a:	4689      	mov	r9, r1
 800640c:	f7fa faee 	bl	80009ec <__aeabi_dcmpeq>
 8006410:	2800      	cmp	r0, #0
 8006412:	d0c1      	beq.n	8006398 <_strtod_l+0x8d8>
 8006414:	e608      	b.n	8006028 <_strtod_l+0x568>
 8006416:	4658      	mov	r0, fp
 8006418:	9904      	ldr	r1, [sp, #16]
 800641a:	f002 f829 	bl	8008470 <__ratio>
 800641e:	2200      	movs	r2, #0
 8006420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	f7fa faf4 	bl	8000a14 <__aeabi_dcmple>
 800642c:	2800      	cmp	r0, #0
 800642e:	d070      	beq.n	8006512 <_strtod_l+0xa52>
 8006430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d042      	beq.n	80064bc <_strtod_l+0x9fc>
 8006436:	2600      	movs	r6, #0
 8006438:	4f62      	ldr	r7, [pc, #392]	; (80065c4 <_strtod_l+0xb04>)
 800643a:	4d62      	ldr	r5, [pc, #392]	; (80065c4 <_strtod_l+0xb04>)
 800643c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006442:	0d1b      	lsrs	r3, r3, #20
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	930f      	str	r3, [sp, #60]	; 0x3c
 8006448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800644a:	4b5f      	ldr	r3, [pc, #380]	; (80065c8 <_strtod_l+0xb08>)
 800644c:	429a      	cmp	r2, r3
 800644e:	f040 80c3 	bne.w	80065d8 <_strtod_l+0xb18>
 8006452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006454:	4640      	mov	r0, r8
 8006456:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800645a:	4649      	mov	r1, r9
 800645c:	f001 ff32 	bl	80082c4 <__ulp>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7fa f858 	bl	800051c <__aeabi_dmul>
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	f7f9 fe9e 	bl	80001b0 <__adddf3>
 8006474:	460b      	mov	r3, r1
 8006476:	4951      	ldr	r1, [pc, #324]	; (80065bc <_strtod_l+0xafc>)
 8006478:	4a54      	ldr	r2, [pc, #336]	; (80065cc <_strtod_l+0xb0c>)
 800647a:	4019      	ands	r1, r3
 800647c:	4291      	cmp	r1, r2
 800647e:	4680      	mov	r8, r0
 8006480:	d95d      	bls.n	800653e <_strtod_l+0xa7e>
 8006482:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006484:	4b4e      	ldr	r3, [pc, #312]	; (80065c0 <_strtod_l+0xb00>)
 8006486:	429a      	cmp	r2, r3
 8006488:	d103      	bne.n	8006492 <_strtod_l+0x9d2>
 800648a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800648c:	3301      	adds	r3, #1
 800648e:	f43f ad56 	beq.w	8005f3e <_strtod_l+0x47e>
 8006492:	f04f 38ff 	mov.w	r8, #4294967295
 8006496:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80065c0 <_strtod_l+0xb00>
 800649a:	4650      	mov	r0, sl
 800649c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800649e:	f001 fbe1 	bl	8007c64 <_Bfree>
 80064a2:	4650      	mov	r0, sl
 80064a4:	9906      	ldr	r1, [sp, #24]
 80064a6:	f001 fbdd 	bl	8007c64 <_Bfree>
 80064aa:	4650      	mov	r0, sl
 80064ac:	9904      	ldr	r1, [sp, #16]
 80064ae:	f001 fbd9 	bl	8007c64 <_Bfree>
 80064b2:	4659      	mov	r1, fp
 80064b4:	4650      	mov	r0, sl
 80064b6:	f001 fbd5 	bl	8007c64 <_Bfree>
 80064ba:	e627      	b.n	800610c <_strtod_l+0x64c>
 80064bc:	f1b8 0f00 	cmp.w	r8, #0
 80064c0:	d119      	bne.n	80064f6 <_strtod_l+0xa36>
 80064c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c8:	b9e3      	cbnz	r3, 8006504 <_strtod_l+0xa44>
 80064ca:	2200      	movs	r2, #0
 80064cc:	4630      	mov	r0, r6
 80064ce:	4639      	mov	r1, r7
 80064d0:	4b3c      	ldr	r3, [pc, #240]	; (80065c4 <_strtod_l+0xb04>)
 80064d2:	f7fa fa95 	bl	8000a00 <__aeabi_dcmplt>
 80064d6:	b9c8      	cbnz	r0, 800650c <_strtod_l+0xa4c>
 80064d8:	2200      	movs	r2, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	4b3c      	ldr	r3, [pc, #240]	; (80065d0 <_strtod_l+0xb10>)
 80064e0:	f7fa f81c 	bl	800051c <__aeabi_dmul>
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80064ec:	9416      	str	r4, [sp, #88]	; 0x58
 80064ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80064f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80064f4:	e7a2      	b.n	800643c <_strtod_l+0x97c>
 80064f6:	f1b8 0f01 	cmp.w	r8, #1
 80064fa:	d103      	bne.n	8006504 <_strtod_l+0xa44>
 80064fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f ad92 	beq.w	8006028 <_strtod_l+0x568>
 8006504:	2600      	movs	r6, #0
 8006506:	2400      	movs	r4, #0
 8006508:	4f32      	ldr	r7, [pc, #200]	; (80065d4 <_strtod_l+0xb14>)
 800650a:	e796      	b.n	800643a <_strtod_l+0x97a>
 800650c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800650e:	4d30      	ldr	r5, [pc, #192]	; (80065d0 <_strtod_l+0xb10>)
 8006510:	e7ea      	b.n	80064e8 <_strtod_l+0xa28>
 8006512:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <_strtod_l+0xb10>)
 8006514:	2200      	movs	r2, #0
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7f9 ffff 	bl	800051c <__aeabi_dmul>
 800651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	b933      	cbnz	r3, 8006534 <_strtod_l+0xa74>
 8006526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800652a:	9010      	str	r0, [sp, #64]	; 0x40
 800652c:	9311      	str	r3, [sp, #68]	; 0x44
 800652e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006532:	e783      	b.n	800643c <_strtod_l+0x97c>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800653c:	e7f7      	b.n	800652e <_strtod_l+0xa6e>
 800653e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1a8      	bne.n	800649a <_strtod_l+0x9da>
 8006548:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800654c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800654e:	0d1b      	lsrs	r3, r3, #20
 8006550:	051b      	lsls	r3, r3, #20
 8006552:	429a      	cmp	r2, r3
 8006554:	d1a1      	bne.n	800649a <_strtod_l+0x9da>
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa fb3f 	bl	8000bdc <__aeabi_d2lz>
 800655e:	f7f9 ffaf 	bl	80004c0 <__aeabi_l2d>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7f9 fe1f 	bl	80001ac <__aeabi_dsub>
 800656e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006574:	ea43 0308 	orr.w	r3, r3, r8
 8006578:	4313      	orrs	r3, r2
 800657a:	4604      	mov	r4, r0
 800657c:	460d      	mov	r5, r1
 800657e:	d066      	beq.n	800664e <_strtod_l+0xb8e>
 8006580:	a309      	add	r3, pc, #36	; (adr r3, 80065a8 <_strtod_l+0xae8>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7fa fa3b 	bl	8000a00 <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	f47f ace2 	bne.w	8005f54 <_strtod_l+0x494>
 8006590:	a307      	add	r3, pc, #28	; (adr r3, 80065b0 <_strtod_l+0xaf0>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fa4f 	bl	8000a3c <__aeabi_dcmpgt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f43f af7b 	beq.w	800649a <_strtod_l+0x9da>
 80065a4:	e4d6      	b.n	8005f54 <_strtod_l+0x494>
 80065a6:	bf00      	nop
 80065a8:	94a03595 	.word	0x94a03595
 80065ac:	3fdfffff 	.word	0x3fdfffff
 80065b0:	35afe535 	.word	0x35afe535
 80065b4:	3fe00000 	.word	0x3fe00000
 80065b8:	000fffff 	.word	0x000fffff
 80065bc:	7ff00000 	.word	0x7ff00000
 80065c0:	7fefffff 	.word	0x7fefffff
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	7fe00000 	.word	0x7fe00000
 80065cc:	7c9fffff 	.word	0x7c9fffff
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	bff00000 	.word	0xbff00000
 80065d8:	9b05      	ldr	r3, [sp, #20]
 80065da:	b313      	cbz	r3, 8006622 <_strtod_l+0xb62>
 80065dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80065e2:	d81e      	bhi.n	8006622 <_strtod_l+0xb62>
 80065e4:	a326      	add	r3, pc, #152	; (adr r3, 8006680 <_strtod_l+0xbc0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7fa fa11 	bl	8000a14 <__aeabi_dcmple>
 80065f2:	b190      	cbz	r0, 800661a <_strtod_l+0xb5a>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7fa fa68 	bl	8000acc <__aeabi_d2uiz>
 80065fc:	2801      	cmp	r0, #1
 80065fe:	bf38      	it	cc
 8006600:	2001      	movcc	r0, #1
 8006602:	f7f9 ff11 	bl	8000428 <__aeabi_ui2d>
 8006606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006608:	4604      	mov	r4, r0
 800660a:	460d      	mov	r5, r1
 800660c:	b9d3      	cbnz	r3, 8006644 <_strtod_l+0xb84>
 800660e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006612:	9012      	str	r0, [sp, #72]	; 0x48
 8006614:	9313      	str	r3, [sp, #76]	; 0x4c
 8006616:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800661a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800661c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006620:	1a9f      	subs	r7, r3, r2
 8006622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006626:	f001 fe4d 	bl	80082c4 <__ulp>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7f9 ff73 	bl	800051c <__aeabi_dmul>
 8006636:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800663a:	f7f9 fdb9 	bl	80001b0 <__adddf3>
 800663e:	4680      	mov	r8, r0
 8006640:	4689      	mov	r9, r1
 8006642:	e77e      	b.n	8006542 <_strtod_l+0xa82>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800664c:	e7e3      	b.n	8006616 <_strtod_l+0xb56>
 800664e:	a30e      	add	r3, pc, #56	; (adr r3, 8006688 <_strtod_l+0xbc8>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7fa f9d4 	bl	8000a00 <__aeabi_dcmplt>
 8006658:	e7a1      	b.n	800659e <_strtod_l+0xade>
 800665a:	2300      	movs	r3, #0
 800665c:	930a      	str	r3, [sp, #40]	; 0x28
 800665e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006660:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	f7ff ba71 	b.w	8005b4a <_strtod_l+0x8a>
 8006668:	2a65      	cmp	r2, #101	; 0x65
 800666a:	f43f ab63 	beq.w	8005d34 <_strtod_l+0x274>
 800666e:	2a45      	cmp	r2, #69	; 0x45
 8006670:	f43f ab60 	beq.w	8005d34 <_strtod_l+0x274>
 8006674:	2301      	movs	r3, #1
 8006676:	f7ff bb95 	b.w	8005da4 <_strtod_l+0x2e4>
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
 8006680:	ffc00000 	.word	0xffc00000
 8006684:	41dfffff 	.word	0x41dfffff
 8006688:	94a03595 	.word	0x94a03595
 800668c:	3fcfffff 	.word	0x3fcfffff

08006690 <_strtod_r>:
 8006690:	4b01      	ldr	r3, [pc, #4]	; (8006698 <_strtod_r+0x8>)
 8006692:	f7ff ba15 	b.w	8005ac0 <_strtod_l>
 8006696:	bf00      	nop
 8006698:	20000074 	.word	0x20000074

0800669c <_strtol_l.constprop.0>:
 800669c:	2b01      	cmp	r3, #1
 800669e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a2:	4680      	mov	r8, r0
 80066a4:	d001      	beq.n	80066aa <_strtol_l.constprop.0+0xe>
 80066a6:	2b24      	cmp	r3, #36	; 0x24
 80066a8:	d906      	bls.n	80066b8 <_strtol_l.constprop.0+0x1c>
 80066aa:	f7fe fb21 	bl	8004cf0 <__errno>
 80066ae:	2316      	movs	r3, #22
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	2000      	movs	r0, #0
 80066b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b8:	460d      	mov	r5, r1
 80066ba:	4f35      	ldr	r7, [pc, #212]	; (8006790 <_strtol_l.constprop.0+0xf4>)
 80066bc:	4628      	mov	r0, r5
 80066be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066c2:	5de6      	ldrb	r6, [r4, r7]
 80066c4:	f016 0608 	ands.w	r6, r6, #8
 80066c8:	d1f8      	bne.n	80066bc <_strtol_l.constprop.0+0x20>
 80066ca:	2c2d      	cmp	r4, #45	; 0x2d
 80066cc:	d12f      	bne.n	800672e <_strtol_l.constprop.0+0x92>
 80066ce:	2601      	movs	r6, #1
 80066d0:	782c      	ldrb	r4, [r5, #0]
 80066d2:	1c85      	adds	r5, r0, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d057      	beq.n	8006788 <_strtol_l.constprop.0+0xec>
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d109      	bne.n	80066f0 <_strtol_l.constprop.0+0x54>
 80066dc:	2c30      	cmp	r4, #48	; 0x30
 80066de:	d107      	bne.n	80066f0 <_strtol_l.constprop.0+0x54>
 80066e0:	7828      	ldrb	r0, [r5, #0]
 80066e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80066e6:	2858      	cmp	r0, #88	; 0x58
 80066e8:	d149      	bne.n	800677e <_strtol_l.constprop.0+0xe2>
 80066ea:	2310      	movs	r3, #16
 80066ec:	786c      	ldrb	r4, [r5, #1]
 80066ee:	3502      	adds	r5, #2
 80066f0:	2700      	movs	r7, #0
 80066f2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80066f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80066fa:	fbbe f9f3 	udiv	r9, lr, r3
 80066fe:	4638      	mov	r0, r7
 8006700:	fb03 ea19 	mls	sl, r3, r9, lr
 8006704:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006708:	f1bc 0f09 	cmp.w	ip, #9
 800670c:	d814      	bhi.n	8006738 <_strtol_l.constprop.0+0x9c>
 800670e:	4664      	mov	r4, ip
 8006710:	42a3      	cmp	r3, r4
 8006712:	dd22      	ble.n	800675a <_strtol_l.constprop.0+0xbe>
 8006714:	2f00      	cmp	r7, #0
 8006716:	db1d      	blt.n	8006754 <_strtol_l.constprop.0+0xb8>
 8006718:	4581      	cmp	r9, r0
 800671a:	d31b      	bcc.n	8006754 <_strtol_l.constprop.0+0xb8>
 800671c:	d101      	bne.n	8006722 <_strtol_l.constprop.0+0x86>
 800671e:	45a2      	cmp	sl, r4
 8006720:	db18      	blt.n	8006754 <_strtol_l.constprop.0+0xb8>
 8006722:	2701      	movs	r7, #1
 8006724:	fb00 4003 	mla	r0, r0, r3, r4
 8006728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800672c:	e7ea      	b.n	8006704 <_strtol_l.constprop.0+0x68>
 800672e:	2c2b      	cmp	r4, #43	; 0x2b
 8006730:	bf04      	itt	eq
 8006732:	782c      	ldrbeq	r4, [r5, #0]
 8006734:	1c85      	addeq	r5, r0, #2
 8006736:	e7cd      	b.n	80066d4 <_strtol_l.constprop.0+0x38>
 8006738:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800673c:	f1bc 0f19 	cmp.w	ip, #25
 8006740:	d801      	bhi.n	8006746 <_strtol_l.constprop.0+0xaa>
 8006742:	3c37      	subs	r4, #55	; 0x37
 8006744:	e7e4      	b.n	8006710 <_strtol_l.constprop.0+0x74>
 8006746:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800674a:	f1bc 0f19 	cmp.w	ip, #25
 800674e:	d804      	bhi.n	800675a <_strtol_l.constprop.0+0xbe>
 8006750:	3c57      	subs	r4, #87	; 0x57
 8006752:	e7dd      	b.n	8006710 <_strtol_l.constprop.0+0x74>
 8006754:	f04f 37ff 	mov.w	r7, #4294967295
 8006758:	e7e6      	b.n	8006728 <_strtol_l.constprop.0+0x8c>
 800675a:	2f00      	cmp	r7, #0
 800675c:	da07      	bge.n	800676e <_strtol_l.constprop.0+0xd2>
 800675e:	2322      	movs	r3, #34	; 0x22
 8006760:	4670      	mov	r0, lr
 8006762:	f8c8 3000 	str.w	r3, [r8]
 8006766:	2a00      	cmp	r2, #0
 8006768:	d0a4      	beq.n	80066b4 <_strtol_l.constprop.0+0x18>
 800676a:	1e69      	subs	r1, r5, #1
 800676c:	e005      	b.n	800677a <_strtol_l.constprop.0+0xde>
 800676e:	b106      	cbz	r6, 8006772 <_strtol_l.constprop.0+0xd6>
 8006770:	4240      	negs	r0, r0
 8006772:	2a00      	cmp	r2, #0
 8006774:	d09e      	beq.n	80066b4 <_strtol_l.constprop.0+0x18>
 8006776:	2f00      	cmp	r7, #0
 8006778:	d1f7      	bne.n	800676a <_strtol_l.constprop.0+0xce>
 800677a:	6011      	str	r1, [r2, #0]
 800677c:	e79a      	b.n	80066b4 <_strtol_l.constprop.0+0x18>
 800677e:	2430      	movs	r4, #48	; 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1b5      	bne.n	80066f0 <_strtol_l.constprop.0+0x54>
 8006784:	2308      	movs	r3, #8
 8006786:	e7b3      	b.n	80066f0 <_strtol_l.constprop.0+0x54>
 8006788:	2c30      	cmp	r4, #48	; 0x30
 800678a:	d0a9      	beq.n	80066e0 <_strtol_l.constprop.0+0x44>
 800678c:	230a      	movs	r3, #10
 800678e:	e7af      	b.n	80066f0 <_strtol_l.constprop.0+0x54>
 8006790:	08009769 	.word	0x08009769

08006794 <_strtol_r>:
 8006794:	f7ff bf82 	b.w	800669c <_strtol_l.constprop.0>

08006798 <strtol>:
 8006798:	4613      	mov	r3, r2
 800679a:	460a      	mov	r2, r1
 800679c:	4601      	mov	r1, r0
 800679e:	4802      	ldr	r0, [pc, #8]	; (80067a8 <strtol+0x10>)
 80067a0:	6800      	ldr	r0, [r0, #0]
 80067a2:	f7ff bf7b 	b.w	800669c <_strtol_l.constprop.0>
 80067a6:	bf00      	nop
 80067a8:	2000000c 	.word	0x2000000c

080067ac <quorem>:
 80067ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	6903      	ldr	r3, [r0, #16]
 80067b2:	690c      	ldr	r4, [r1, #16]
 80067b4:	4607      	mov	r7, r0
 80067b6:	42a3      	cmp	r3, r4
 80067b8:	f2c0 8082 	blt.w	80068c0 <quorem+0x114>
 80067bc:	3c01      	subs	r4, #1
 80067be:	f100 0514 	add.w	r5, r0, #20
 80067c2:	f101 0814 	add.w	r8, r1, #20
 80067c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d4:	3301      	adds	r3, #1
 80067d6:	429a      	cmp	r2, r3
 80067d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80067dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067e4:	d331      	bcc.n	800684a <quorem+0x9e>
 80067e6:	f04f 0e00 	mov.w	lr, #0
 80067ea:	4640      	mov	r0, r8
 80067ec:	46ac      	mov	ip, r5
 80067ee:	46f2      	mov	sl, lr
 80067f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80067f4:	b293      	uxth	r3, r2
 80067f6:	fb06 e303 	mla	r3, r6, r3, lr
 80067fa:	0c12      	lsrs	r2, r2, #16
 80067fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006800:	b29b      	uxth	r3, r3
 8006802:	fb06 e202 	mla	r2, r6, r2, lr
 8006806:	ebaa 0303 	sub.w	r3, sl, r3
 800680a:	f8dc a000 	ldr.w	sl, [ip]
 800680e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006812:	fa1f fa8a 	uxth.w	sl, sl
 8006816:	4453      	add	r3, sl
 8006818:	f8dc a000 	ldr.w	sl, [ip]
 800681c:	b292      	uxth	r2, r2
 800681e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800682c:	4581      	cmp	r9, r0
 800682e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006832:	f84c 3b04 	str.w	r3, [ip], #4
 8006836:	d2db      	bcs.n	80067f0 <quorem+0x44>
 8006838:	f855 300b 	ldr.w	r3, [r5, fp]
 800683c:	b92b      	cbnz	r3, 800684a <quorem+0x9e>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	3b04      	subs	r3, #4
 8006842:	429d      	cmp	r5, r3
 8006844:	461a      	mov	r2, r3
 8006846:	d32f      	bcc.n	80068a8 <quorem+0xfc>
 8006848:	613c      	str	r4, [r7, #16]
 800684a:	4638      	mov	r0, r7
 800684c:	f001 fc92 	bl	8008174 <__mcmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	db25      	blt.n	80068a0 <quorem+0xf4>
 8006854:	4628      	mov	r0, r5
 8006856:	f04f 0c00 	mov.w	ip, #0
 800685a:	3601      	adds	r6, #1
 800685c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006860:	f8d0 e000 	ldr.w	lr, [r0]
 8006864:	b28b      	uxth	r3, r1
 8006866:	ebac 0303 	sub.w	r3, ip, r3
 800686a:	fa1f f28e 	uxth.w	r2, lr
 800686e:	4413      	add	r3, r2
 8006870:	0c0a      	lsrs	r2, r1, #16
 8006872:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006876:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800687a:	b29b      	uxth	r3, r3
 800687c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006880:	45c1      	cmp	r9, r8
 8006882:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006886:	f840 3b04 	str.w	r3, [r0], #4
 800688a:	d2e7      	bcs.n	800685c <quorem+0xb0>
 800688c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006894:	b922      	cbnz	r2, 80068a0 <quorem+0xf4>
 8006896:	3b04      	subs	r3, #4
 8006898:	429d      	cmp	r5, r3
 800689a:	461a      	mov	r2, r3
 800689c:	d30a      	bcc.n	80068b4 <quorem+0x108>
 800689e:	613c      	str	r4, [r7, #16]
 80068a0:	4630      	mov	r0, r6
 80068a2:	b003      	add	sp, #12
 80068a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	3b04      	subs	r3, #4
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d1cb      	bne.n	8006848 <quorem+0x9c>
 80068b0:	3c01      	subs	r4, #1
 80068b2:	e7c6      	b.n	8006842 <quorem+0x96>
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	3b04      	subs	r3, #4
 80068b8:	2a00      	cmp	r2, #0
 80068ba:	d1f0      	bne.n	800689e <quorem+0xf2>
 80068bc:	3c01      	subs	r4, #1
 80068be:	e7eb      	b.n	8006898 <quorem+0xec>
 80068c0:	2000      	movs	r0, #0
 80068c2:	e7ee      	b.n	80068a2 <quorem+0xf6>
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <_dtoa_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	461f      	mov	r7, r3
 80068d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80068d2:	b099      	sub	sp, #100	; 0x64
 80068d4:	4605      	mov	r5, r0
 80068d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80068da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80068de:	b974      	cbnz	r4, 80068fe <_dtoa_r+0x36>
 80068e0:	2010      	movs	r0, #16
 80068e2:	f001 f949 	bl	8007b78 <malloc>
 80068e6:	4602      	mov	r2, r0
 80068e8:	6268      	str	r0, [r5, #36]	; 0x24
 80068ea:	b920      	cbnz	r0, 80068f6 <_dtoa_r+0x2e>
 80068ec:	21ea      	movs	r1, #234	; 0xea
 80068ee:	4ba8      	ldr	r3, [pc, #672]	; (8006b90 <_dtoa_r+0x2c8>)
 80068f0:	48a8      	ldr	r0, [pc, #672]	; (8006b94 <_dtoa_r+0x2cc>)
 80068f2:	f002 f8b3 	bl	8008a5c <__assert_func>
 80068f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068fa:	6004      	str	r4, [r0, #0]
 80068fc:	60c4      	str	r4, [r0, #12]
 80068fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006900:	6819      	ldr	r1, [r3, #0]
 8006902:	b151      	cbz	r1, 800691a <_dtoa_r+0x52>
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	2301      	movs	r3, #1
 8006908:	4093      	lsls	r3, r2
 800690a:	604a      	str	r2, [r1, #4]
 800690c:	608b      	str	r3, [r1, #8]
 800690e:	4628      	mov	r0, r5
 8006910:	f001 f9a8 	bl	8007c64 <_Bfree>
 8006914:	2200      	movs	r2, #0
 8006916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	1e3b      	subs	r3, r7, #0
 800691c:	bfaf      	iteee	ge
 800691e:	2300      	movge	r3, #0
 8006920:	2201      	movlt	r2, #1
 8006922:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006926:	9305      	strlt	r3, [sp, #20]
 8006928:	bfa8      	it	ge
 800692a:	f8c8 3000 	strge.w	r3, [r8]
 800692e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006932:	4b99      	ldr	r3, [pc, #612]	; (8006b98 <_dtoa_r+0x2d0>)
 8006934:	bfb8      	it	lt
 8006936:	f8c8 2000 	strlt.w	r2, [r8]
 800693a:	ea33 0309 	bics.w	r3, r3, r9
 800693e:	d119      	bne.n	8006974 <_dtoa_r+0xac>
 8006940:	f242 730f 	movw	r3, #9999	; 0x270f
 8006944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800694c:	4333      	orrs	r3, r6
 800694e:	f000 857f 	beq.w	8007450 <_dtoa_r+0xb88>
 8006952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006954:	b953      	cbnz	r3, 800696c <_dtoa_r+0xa4>
 8006956:	4b91      	ldr	r3, [pc, #580]	; (8006b9c <_dtoa_r+0x2d4>)
 8006958:	e022      	b.n	80069a0 <_dtoa_r+0xd8>
 800695a:	4b91      	ldr	r3, [pc, #580]	; (8006ba0 <_dtoa_r+0x2d8>)
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	3308      	adds	r3, #8
 8006960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	9803      	ldr	r0, [sp, #12]
 8006966:	b019      	add	sp, #100	; 0x64
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <_dtoa_r+0x2d4>)
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	3303      	adds	r3, #3
 8006972:	e7f5      	b.n	8006960 <_dtoa_r+0x98>
 8006974:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006978:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800697c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006980:	2200      	movs	r2, #0
 8006982:	2300      	movs	r3, #0
 8006984:	f7fa f832 	bl	80009ec <__aeabi_dcmpeq>
 8006988:	4680      	mov	r8, r0
 800698a:	b158      	cbz	r0, 80069a4 <_dtoa_r+0xdc>
 800698c:	2301      	movs	r3, #1
 800698e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8558 	beq.w	800744a <_dtoa_r+0xb82>
 800699a:	4882      	ldr	r0, [pc, #520]	; (8006ba4 <_dtoa_r+0x2dc>)
 800699c:	6018      	str	r0, [r3, #0]
 800699e:	1e43      	subs	r3, r0, #1
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	e7df      	b.n	8006964 <_dtoa_r+0x9c>
 80069a4:	ab16      	add	r3, sp, #88	; 0x58
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	ab17      	add	r3, sp, #92	; 0x5c
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4628      	mov	r0, r5
 80069ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069b2:	f001 fd01 	bl	80083b8 <__d2b>
 80069b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80069ba:	4683      	mov	fp, r0
 80069bc:	2c00      	cmp	r4, #0
 80069be:	d07f      	beq.n	8006ac0 <_dtoa_r+0x1f8>
 80069c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80069ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80069d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80069d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80069da:	2200      	movs	r2, #0
 80069dc:	4b72      	ldr	r3, [pc, #456]	; (8006ba8 <_dtoa_r+0x2e0>)
 80069de:	f7f9 fbe5 	bl	80001ac <__aeabi_dsub>
 80069e2:	a365      	add	r3, pc, #404	; (adr r3, 8006b78 <_dtoa_r+0x2b0>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fd98 	bl	800051c <__aeabi_dmul>
 80069ec:	a364      	add	r3, pc, #400	; (adr r3, 8006b80 <_dtoa_r+0x2b8>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fbdd 	bl	80001b0 <__adddf3>
 80069f6:	4606      	mov	r6, r0
 80069f8:	4620      	mov	r0, r4
 80069fa:	460f      	mov	r7, r1
 80069fc:	f7f9 fd24 	bl	8000448 <__aeabi_i2d>
 8006a00:	a361      	add	r3, pc, #388	; (adr r3, 8006b88 <_dtoa_r+0x2c0>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fd89 	bl	800051c <__aeabi_dmul>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4639      	mov	r1, r7
 8006a12:	f7f9 fbcd 	bl	80001b0 <__adddf3>
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	f7fa f82f 	bl	8000a7c <__aeabi_d2iz>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4682      	mov	sl, r0
 8006a22:	2300      	movs	r3, #0
 8006a24:	4630      	mov	r0, r6
 8006a26:	4639      	mov	r1, r7
 8006a28:	f7f9 ffea 	bl	8000a00 <__aeabi_dcmplt>
 8006a2c:	b148      	cbz	r0, 8006a42 <_dtoa_r+0x17a>
 8006a2e:	4650      	mov	r0, sl
 8006a30:	f7f9 fd0a 	bl	8000448 <__aeabi_i2d>
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	f7f9 ffd8 	bl	80009ec <__aeabi_dcmpeq>
 8006a3c:	b908      	cbnz	r0, 8006a42 <_dtoa_r+0x17a>
 8006a3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a42:	f1ba 0f16 	cmp.w	sl, #22
 8006a46:	d858      	bhi.n	8006afa <_dtoa_r+0x232>
 8006a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a4c:	4b57      	ldr	r3, [pc, #348]	; (8006bac <_dtoa_r+0x2e4>)
 8006a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 ffd3 	bl	8000a00 <__aeabi_dcmplt>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d04f      	beq.n	8006afe <_dtoa_r+0x236>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a68:	1b1c      	subs	r4, r3, r4
 8006a6a:	1e63      	subs	r3, r4, #1
 8006a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6e:	bf49      	itett	mi
 8006a70:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a74:	2300      	movpl	r3, #0
 8006a76:	9306      	strmi	r3, [sp, #24]
 8006a78:	2300      	movmi	r3, #0
 8006a7a:	bf54      	ite	pl
 8006a7c:	9306      	strpl	r3, [sp, #24]
 8006a7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a80:	f1ba 0f00 	cmp.w	sl, #0
 8006a84:	db3d      	blt.n	8006b02 <_dtoa_r+0x23a>
 8006a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a8c:	4453      	add	r3, sl
 8006a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a90:	2300      	movs	r3, #0
 8006a92:	930a      	str	r3, [sp, #40]	; 0x28
 8006a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	f200 808c 	bhi.w	8006bb4 <_dtoa_r+0x2ec>
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	bfc4      	itt	gt
 8006aa0:	3b04      	subgt	r3, #4
 8006aa2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa6:	bfc8      	it	gt
 8006aa8:	2400      	movgt	r4, #0
 8006aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8006aae:	bfd8      	it	le
 8006ab0:	2401      	movle	r4, #1
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	f200 808a 	bhi.w	8006bcc <_dtoa_r+0x304>
 8006ab8:	e8df f003 	tbb	[pc, r3]
 8006abc:	5b4d4f2d 	.word	0x5b4d4f2d
 8006ac0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006ac4:	441c      	add	r4, r3
 8006ac6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	bfc3      	ittte	gt
 8006ace:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ad2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006ad6:	fa09 f303 	lslgt.w	r3, r9, r3
 8006ada:	f1c3 0320 	rsble	r3, r3, #32
 8006ade:	bfc6      	itte	gt
 8006ae0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ae4:	4318      	orrgt	r0, r3
 8006ae6:	fa06 f003 	lslle.w	r0, r6, r3
 8006aea:	f7f9 fc9d 	bl	8000428 <__aeabi_ui2d>
 8006aee:	2301      	movs	r3, #1
 8006af0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006af4:	3c01      	subs	r4, #1
 8006af6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006af8:	e76f      	b.n	80069da <_dtoa_r+0x112>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e7b2      	b.n	8006a64 <_dtoa_r+0x19c>
 8006afe:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b00:	e7b1      	b.n	8006a66 <_dtoa_r+0x19e>
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	eba3 030a 	sub.w	r3, r3, sl
 8006b08:	9306      	str	r3, [sp, #24]
 8006b0a:	f1ca 0300 	rsb	r3, sl, #0
 8006b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b10:	2300      	movs	r3, #0
 8006b12:	930e      	str	r3, [sp, #56]	; 0x38
 8006b14:	e7be      	b.n	8006a94 <_dtoa_r+0x1cc>
 8006b16:	2300      	movs	r3, #0
 8006b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dc58      	bgt.n	8006bd2 <_dtoa_r+0x30a>
 8006b20:	f04f 0901 	mov.w	r9, #1
 8006b24:	464b      	mov	r3, r9
 8006b26:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006b32:	6042      	str	r2, [r0, #4]
 8006b34:	2204      	movs	r2, #4
 8006b36:	f102 0614 	add.w	r6, r2, #20
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	6841      	ldr	r1, [r0, #4]
 8006b3e:	d94e      	bls.n	8006bde <_dtoa_r+0x316>
 8006b40:	4628      	mov	r0, r5
 8006b42:	f001 f84f 	bl	8007be4 <_Balloc>
 8006b46:	9003      	str	r0, [sp, #12]
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d14c      	bne.n	8006be6 <_dtoa_r+0x31e>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <_dtoa_r+0x2e8>)
 8006b54:	e6cc      	b.n	80068f0 <_dtoa_r+0x28>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7de      	b.n	8006b18 <_dtoa_r+0x250>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b60:	eb0a 0903 	add.w	r9, sl, r3
 8006b64:	f109 0301 	add.w	r3, r9, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	9308      	str	r3, [sp, #32]
 8006b6c:	bfb8      	it	lt
 8006b6e:	2301      	movlt	r3, #1
 8006b70:	e7dd      	b.n	8006b2e <_dtoa_r+0x266>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7f2      	b.n	8006b5c <_dtoa_r+0x294>
 8006b76:	bf00      	nop
 8006b78:	636f4361 	.word	0x636f4361
 8006b7c:	3fd287a7 	.word	0x3fd287a7
 8006b80:	8b60c8b3 	.word	0x8b60c8b3
 8006b84:	3fc68a28 	.word	0x3fc68a28
 8006b88:	509f79fb 	.word	0x509f79fb
 8006b8c:	3fd34413 	.word	0x3fd34413
 8006b90:	08009876 	.word	0x08009876
 8006b94:	0800988d 	.word	0x0800988d
 8006b98:	7ff00000 	.word	0x7ff00000
 8006b9c:	08009872 	.word	0x08009872
 8006ba0:	08009869 	.word	0x08009869
 8006ba4:	080096e9 	.word	0x080096e9
 8006ba8:	3ff80000 	.word	0x3ff80000
 8006bac:	080099f8 	.word	0x080099f8
 8006bb0:	080098e8 	.word	0x080098e8
 8006bb4:	2401      	movs	r4, #1
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006bba:	9322      	str	r3, [sp, #136]	; 0x88
 8006bbc:	f04f 39ff 	mov.w	r9, #4294967295
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2312      	movs	r3, #18
 8006bc4:	f8cd 9020 	str.w	r9, [sp, #32]
 8006bc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006bca:	e7b0      	b.n	8006b2e <_dtoa_r+0x266>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd0:	e7f4      	b.n	8006bbc <_dtoa_r+0x2f4>
 8006bd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8006bdc:	e7a7      	b.n	8006b2e <_dtoa_r+0x266>
 8006bde:	3101      	adds	r1, #1
 8006be0:	6041      	str	r1, [r0, #4]
 8006be2:	0052      	lsls	r2, r2, #1
 8006be4:	e7a7      	b.n	8006b36 <_dtoa_r+0x26e>
 8006be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be8:	9a03      	ldr	r2, [sp, #12]
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	2b0e      	cmp	r3, #14
 8006bf0:	f200 80a8 	bhi.w	8006d44 <_dtoa_r+0x47c>
 8006bf4:	2c00      	cmp	r4, #0
 8006bf6:	f000 80a5 	beq.w	8006d44 <_dtoa_r+0x47c>
 8006bfa:	f1ba 0f00 	cmp.w	sl, #0
 8006bfe:	dd34      	ble.n	8006c6a <_dtoa_r+0x3a2>
 8006c00:	4a9a      	ldr	r2, [pc, #616]	; (8006e6c <_dtoa_r+0x5a4>)
 8006c02:	f00a 030f 	and.w	r3, sl, #15
 8006c06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c0a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c16:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006c1a:	d016      	beq.n	8006c4a <_dtoa_r+0x382>
 8006c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c20:	4b93      	ldr	r3, [pc, #588]	; (8006e70 <_dtoa_r+0x5a8>)
 8006c22:	2703      	movs	r7, #3
 8006c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c28:	f7f9 fda2 	bl	8000770 <__aeabi_ddiv>
 8006c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c30:	f004 040f 	and.w	r4, r4, #15
 8006c34:	4e8e      	ldr	r6, [pc, #568]	; (8006e70 <_dtoa_r+0x5a8>)
 8006c36:	b954      	cbnz	r4, 8006c4e <_dtoa_r+0x386>
 8006c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c40:	f7f9 fd96 	bl	8000770 <__aeabi_ddiv>
 8006c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c48:	e029      	b.n	8006c9e <_dtoa_r+0x3d6>
 8006c4a:	2702      	movs	r7, #2
 8006c4c:	e7f2      	b.n	8006c34 <_dtoa_r+0x36c>
 8006c4e:	07e1      	lsls	r1, r4, #31
 8006c50:	d508      	bpl.n	8006c64 <_dtoa_r+0x39c>
 8006c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c5a:	f7f9 fc5f 	bl	800051c <__aeabi_dmul>
 8006c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c62:	3701      	adds	r7, #1
 8006c64:	1064      	asrs	r4, r4, #1
 8006c66:	3608      	adds	r6, #8
 8006c68:	e7e5      	b.n	8006c36 <_dtoa_r+0x36e>
 8006c6a:	f000 80a5 	beq.w	8006db8 <_dtoa_r+0x4f0>
 8006c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c72:	f1ca 0400 	rsb	r4, sl, #0
 8006c76:	4b7d      	ldr	r3, [pc, #500]	; (8006e6c <_dtoa_r+0x5a4>)
 8006c78:	f004 020f 	and.w	r2, r4, #15
 8006c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fc4a 	bl	800051c <__aeabi_dmul>
 8006c88:	2702      	movs	r7, #2
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c90:	4e77      	ldr	r6, [pc, #476]	; (8006e70 <_dtoa_r+0x5a8>)
 8006c92:	1124      	asrs	r4, r4, #4
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	f040 8084 	bne.w	8006da2 <_dtoa_r+0x4da>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1d2      	bne.n	8006c44 <_dtoa_r+0x37c>
 8006c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 808b 	beq.w	8006dbc <_dtoa_r+0x4f4>
 8006ca6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006caa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4b6f      	ldr	r3, [pc, #444]	; (8006e74 <_dtoa_r+0x5ac>)
 8006cb6:	f7f9 fea3 	bl	8000a00 <__aeabi_dcmplt>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d07e      	beq.n	8006dbc <_dtoa_r+0x4f4>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d07b      	beq.n	8006dbc <_dtoa_r+0x4f4>
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	dd38      	ble.n	8006d3c <_dtoa_r+0x474>
 8006cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <_dtoa_r+0x5b0>)
 8006cd2:	f7f9 fc23 	bl	800051c <__aeabi_dmul>
 8006cd6:	464c      	mov	r4, r9
 8006cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cdc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006ce0:	3701      	adds	r7, #1
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f7f9 fbb0 	bl	8000448 <__aeabi_i2d>
 8006ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cec:	f7f9 fc16 	bl	800051c <__aeabi_dmul>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <_dtoa_r+0x5b4>)
 8006cf4:	f7f9 fa5c 	bl	80001b0 <__adddf3>
 8006cf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d00:	9611      	str	r6, [sp, #68]	; 0x44
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	d15d      	bne.n	8006dc2 <_dtoa_r+0x4fa>
 8006d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b5c      	ldr	r3, [pc, #368]	; (8006e80 <_dtoa_r+0x5b8>)
 8006d0e:	f7f9 fa4d 	bl	80001ac <__aeabi_dsub>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d1e:	f7f9 fe8d 	bl	8000a3c <__aeabi_dcmpgt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	f040 829c 	bne.w	8007260 <_dtoa_r+0x998>
 8006d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d32:	f7f9 fe65 	bl	8000a00 <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f040 8290 	bne.w	800725c <_dtoa_r+0x994>
 8006d3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006d40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f2c0 8152 	blt.w	8006ff0 <_dtoa_r+0x728>
 8006d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8006d50:	f300 814e 	bgt.w	8006ff0 <_dtoa_r+0x728>
 8006d54:	4b45      	ldr	r3, [pc, #276]	; (8006e6c <_dtoa_r+0x5a4>)
 8006d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f280 80db 	bge.w	8006f20 <_dtoa_r+0x658>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f300 80d7 	bgt.w	8006f20 <_dtoa_r+0x658>
 8006d72:	f040 8272 	bne.w	800725a <_dtoa_r+0x992>
 8006d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <_dtoa_r+0x5b8>)
 8006d7e:	f7f9 fbcd 	bl	800051c <__aeabi_dmul>
 8006d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d86:	f7f9 fe4f 	bl	8000a28 <__aeabi_dcmpge>
 8006d8a:	9c08      	ldr	r4, [sp, #32]
 8006d8c:	4626      	mov	r6, r4
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f040 8248 	bne.w	8007224 <_dtoa_r+0x95c>
 8006d94:	2331      	movs	r3, #49	; 0x31
 8006d96:	9f03      	ldr	r7, [sp, #12]
 8006d98:	f10a 0a01 	add.w	sl, sl, #1
 8006d9c:	f807 3b01 	strb.w	r3, [r7], #1
 8006da0:	e244      	b.n	800722c <_dtoa_r+0x964>
 8006da2:	07e2      	lsls	r2, r4, #31
 8006da4:	d505      	bpl.n	8006db2 <_dtoa_r+0x4ea>
 8006da6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006daa:	f7f9 fbb7 	bl	800051c <__aeabi_dmul>
 8006dae:	2301      	movs	r3, #1
 8006db0:	3701      	adds	r7, #1
 8006db2:	1064      	asrs	r4, r4, #1
 8006db4:	3608      	adds	r6, #8
 8006db6:	e76d      	b.n	8006c94 <_dtoa_r+0x3cc>
 8006db8:	2702      	movs	r7, #2
 8006dba:	e770      	b.n	8006c9e <_dtoa_r+0x3d6>
 8006dbc:	46d0      	mov	r8, sl
 8006dbe:	9c08      	ldr	r4, [sp, #32]
 8006dc0:	e78f      	b.n	8006ce2 <_dtoa_r+0x41a>
 8006dc2:	9903      	ldr	r1, [sp, #12]
 8006dc4:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <_dtoa_r+0x5a4>)
 8006dc6:	4421      	add	r1, r4
 8006dc8:	9112      	str	r1, [sp, #72]	; 0x48
 8006dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006dd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	d055      	beq.n	8006e88 <_dtoa_r+0x5c0>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4929      	ldr	r1, [pc, #164]	; (8006e84 <_dtoa_r+0x5bc>)
 8006de0:	f7f9 fcc6 	bl	8000770 <__aeabi_ddiv>
 8006de4:	463b      	mov	r3, r7
 8006de6:	4632      	mov	r2, r6
 8006de8:	f7f9 f9e0 	bl	80001ac <__aeabi_dsub>
 8006dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006df0:	9f03      	ldr	r7, [sp, #12]
 8006df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df6:	f7f9 fe41 	bl	8000a7c <__aeabi_d2iz>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	f7f9 fb24 	bl	8000448 <__aeabi_i2d>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e08:	f7f9 f9d0 	bl	80001ac <__aeabi_dsub>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	3430      	adds	r4, #48	; 0x30
 8006e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e1a:	f807 4b01 	strb.w	r4, [r7], #1
 8006e1e:	f7f9 fdef 	bl	8000a00 <__aeabi_dcmplt>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d174      	bne.n	8006f10 <_dtoa_r+0x648>
 8006e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4911      	ldr	r1, [pc, #68]	; (8006e74 <_dtoa_r+0x5ac>)
 8006e2e:	f7f9 f9bd 	bl	80001ac <__aeabi_dsub>
 8006e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e36:	f7f9 fde3 	bl	8000a00 <__aeabi_dcmplt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 80b7 	bne.w	8006fae <_dtoa_r+0x6e6>
 8006e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e42:	429f      	cmp	r7, r3
 8006e44:	f43f af7a 	beq.w	8006d3c <_dtoa_r+0x474>
 8006e48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <_dtoa_r+0x5b0>)
 8006e50:	f7f9 fb64 	bl	800051c <__aeabi_dmul>
 8006e54:	2200      	movs	r2, #0
 8006e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5e:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <_dtoa_r+0x5b0>)
 8006e60:	f7f9 fb5c 	bl	800051c <__aeabi_dmul>
 8006e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e68:	e7c3      	b.n	8006df2 <_dtoa_r+0x52a>
 8006e6a:	bf00      	nop
 8006e6c:	080099f8 	.word	0x080099f8
 8006e70:	080099d0 	.word	0x080099d0
 8006e74:	3ff00000 	.word	0x3ff00000
 8006e78:	40240000 	.word	0x40240000
 8006e7c:	401c0000 	.word	0x401c0000
 8006e80:	40140000 	.word	0x40140000
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fb46 	bl	800051c <__aeabi_dmul>
 8006e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e96:	9c03      	ldr	r4, [sp, #12]
 8006e98:	9314      	str	r3, [sp, #80]	; 0x50
 8006e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e9e:	f7f9 fded 	bl	8000a7c <__aeabi_d2iz>
 8006ea2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ea4:	f7f9 fad0 	bl	8000448 <__aeabi_i2d>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb0:	f7f9 f97c 	bl	80001ac <__aeabi_dsub>
 8006eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	3330      	adds	r3, #48	; 0x30
 8006eba:	f804 3b01 	strb.w	r3, [r4], #1
 8006ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	d124      	bne.n	8006f14 <_dtoa_r+0x64c>
 8006eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ece:	4bb0      	ldr	r3, [pc, #704]	; (8007190 <_dtoa_r+0x8c8>)
 8006ed0:	f7f9 f96e 	bl	80001b0 <__adddf3>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 fdae 	bl	8000a3c <__aeabi_dcmpgt>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d163      	bne.n	8006fac <_dtoa_r+0x6e4>
 8006ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ee8:	2000      	movs	r0, #0
 8006eea:	49a9      	ldr	r1, [pc, #676]	; (8007190 <_dtoa_r+0x8c8>)
 8006eec:	f7f9 f95e 	bl	80001ac <__aeabi_dsub>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 fd82 	bl	8000a00 <__aeabi_dcmplt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f43f af1d 	beq.w	8006d3c <_dtoa_r+0x474>
 8006f02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f04:	1e7b      	subs	r3, r7, #1
 8006f06:	9314      	str	r3, [sp, #80]	; 0x50
 8006f08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f0c:	2b30      	cmp	r3, #48	; 0x30
 8006f0e:	d0f8      	beq.n	8006f02 <_dtoa_r+0x63a>
 8006f10:	46c2      	mov	sl, r8
 8006f12:	e03b      	b.n	8006f8c <_dtoa_r+0x6c4>
 8006f14:	4b9f      	ldr	r3, [pc, #636]	; (8007194 <_dtoa_r+0x8cc>)
 8006f16:	f7f9 fb01 	bl	800051c <__aeabi_dmul>
 8006f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f1e:	e7bc      	b.n	8006e9a <_dtoa_r+0x5d2>
 8006f20:	9f03      	ldr	r7, [sp, #12]
 8006f22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fc1f 	bl	8000770 <__aeabi_ddiv>
 8006f32:	f7f9 fda3 	bl	8000a7c <__aeabi_d2iz>
 8006f36:	4604      	mov	r4, r0
 8006f38:	f7f9 fa86 	bl	8000448 <__aeabi_i2d>
 8006f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f40:	f7f9 faec 	bl	800051c <__aeabi_dmul>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 f92e 	bl	80001ac <__aeabi_dsub>
 8006f50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f54:	f807 6b01 	strb.w	r6, [r7], #1
 8006f58:	9e03      	ldr	r6, [sp, #12]
 8006f5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f5e:	1bbe      	subs	r6, r7, r6
 8006f60:	45b4      	cmp	ip, r6
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	d136      	bne.n	8006fd6 <_dtoa_r+0x70e>
 8006f68:	f7f9 f922 	bl	80001b0 <__adddf3>
 8006f6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f70:	4680      	mov	r8, r0
 8006f72:	4689      	mov	r9, r1
 8006f74:	f7f9 fd62 	bl	8000a3c <__aeabi_dcmpgt>
 8006f78:	bb58      	cbnz	r0, 8006fd2 <_dtoa_r+0x70a>
 8006f7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 fd33 	bl	80009ec <__aeabi_dcmpeq>
 8006f86:	b108      	cbz	r0, 8006f8c <_dtoa_r+0x6c4>
 8006f88:	07e1      	lsls	r1, r4, #31
 8006f8a:	d422      	bmi.n	8006fd2 <_dtoa_r+0x70a>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f000 fe68 	bl	8007c64 <_Bfree>
 8006f94:	2300      	movs	r3, #0
 8006f96:	703b      	strb	r3, [r7, #0]
 8006f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f9a:	f10a 0001 	add.w	r0, sl, #1
 8006f9e:	6018      	str	r0, [r3, #0]
 8006fa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f43f acde 	beq.w	8006964 <_dtoa_r+0x9c>
 8006fa8:	601f      	str	r7, [r3, #0]
 8006faa:	e4db      	b.n	8006964 <_dtoa_r+0x9c>
 8006fac:	4627      	mov	r7, r4
 8006fae:	463b      	mov	r3, r7
 8006fb0:	461f      	mov	r7, r3
 8006fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fb6:	2a39      	cmp	r2, #57	; 0x39
 8006fb8:	d107      	bne.n	8006fca <_dtoa_r+0x702>
 8006fba:	9a03      	ldr	r2, [sp, #12]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d1f7      	bne.n	8006fb0 <_dtoa_r+0x6e8>
 8006fc0:	2230      	movs	r2, #48	; 0x30
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	f108 0801 	add.w	r8, r8, #1
 8006fc8:	700a      	strb	r2, [r1, #0]
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	3201      	adds	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e79e      	b.n	8006f10 <_dtoa_r+0x648>
 8006fd2:	46d0      	mov	r8, sl
 8006fd4:	e7eb      	b.n	8006fae <_dtoa_r+0x6e6>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4b6e      	ldr	r3, [pc, #440]	; (8007194 <_dtoa_r+0x8cc>)
 8006fda:	f7f9 fa9f 	bl	800051c <__aeabi_dmul>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	4689      	mov	r9, r1
 8006fe6:	f7f9 fd01 	bl	80009ec <__aeabi_dcmpeq>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d09b      	beq.n	8006f26 <_dtoa_r+0x65e>
 8006fee:	e7cd      	b.n	8006f8c <_dtoa_r+0x6c4>
 8006ff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	f000 80d0 	beq.w	8007198 <_dtoa_r+0x8d0>
 8006ff8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ffa:	2a01      	cmp	r2, #1
 8006ffc:	f300 80ae 	bgt.w	800715c <_dtoa_r+0x894>
 8007000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007002:	2a00      	cmp	r2, #0
 8007004:	f000 80a6 	beq.w	8007154 <_dtoa_r+0x88c>
 8007008:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800700c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800700e:	9f06      	ldr	r7, [sp, #24]
 8007010:	9a06      	ldr	r2, [sp, #24]
 8007012:	2101      	movs	r1, #1
 8007014:	441a      	add	r2, r3
 8007016:	9206      	str	r2, [sp, #24]
 8007018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701a:	4628      	mov	r0, r5
 800701c:	441a      	add	r2, r3
 800701e:	9209      	str	r2, [sp, #36]	; 0x24
 8007020:	f000 ff20 	bl	8007e64 <__i2b>
 8007024:	4606      	mov	r6, r0
 8007026:	2f00      	cmp	r7, #0
 8007028:	dd0c      	ble.n	8007044 <_dtoa_r+0x77c>
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd09      	ble.n	8007044 <_dtoa_r+0x77c>
 8007030:	42bb      	cmp	r3, r7
 8007032:	bfa8      	it	ge
 8007034:	463b      	movge	r3, r7
 8007036:	9a06      	ldr	r2, [sp, #24]
 8007038:	1aff      	subs	r7, r7, r3
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	9206      	str	r2, [sp, #24]
 800703e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	9309      	str	r3, [sp, #36]	; 0x24
 8007044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007046:	b1f3      	cbz	r3, 8007086 <_dtoa_r+0x7be>
 8007048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80a8 	beq.w	80071a0 <_dtoa_r+0x8d8>
 8007050:	2c00      	cmp	r4, #0
 8007052:	dd10      	ble.n	8007076 <_dtoa_r+0x7ae>
 8007054:	4631      	mov	r1, r6
 8007056:	4622      	mov	r2, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 ffc1 	bl	8007fe0 <__pow5mult>
 800705e:	465a      	mov	r2, fp
 8007060:	4601      	mov	r1, r0
 8007062:	4606      	mov	r6, r0
 8007064:	4628      	mov	r0, r5
 8007066:	f000 ff13 	bl	8007e90 <__multiply>
 800706a:	4680      	mov	r8, r0
 800706c:	4659      	mov	r1, fp
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fdf8 	bl	8007c64 <_Bfree>
 8007074:	46c3      	mov	fp, r8
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	1b1a      	subs	r2, r3, r4
 800707a:	d004      	beq.n	8007086 <_dtoa_r+0x7be>
 800707c:	4659      	mov	r1, fp
 800707e:	4628      	mov	r0, r5
 8007080:	f000 ffae 	bl	8007fe0 <__pow5mult>
 8007084:	4683      	mov	fp, r0
 8007086:	2101      	movs	r1, #1
 8007088:	4628      	mov	r0, r5
 800708a:	f000 feeb 	bl	8007e64 <__i2b>
 800708e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007090:	4604      	mov	r4, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f340 8086 	ble.w	80071a4 <_dtoa_r+0x8dc>
 8007098:	461a      	mov	r2, r3
 800709a:	4601      	mov	r1, r0
 800709c:	4628      	mov	r0, r5
 800709e:	f000 ff9f 	bl	8007fe0 <__pow5mult>
 80070a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070a4:	4604      	mov	r4, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	dd7f      	ble.n	80071aa <_dtoa_r+0x8e2>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070b4:	6918      	ldr	r0, [r3, #16]
 80070b6:	f000 fe87 	bl	8007dc8 <__hi0bits>
 80070ba:	f1c0 0020 	rsb	r0, r0, #32
 80070be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c0:	4418      	add	r0, r3
 80070c2:	f010 001f 	ands.w	r0, r0, #31
 80070c6:	f000 8092 	beq.w	80071ee <_dtoa_r+0x926>
 80070ca:	f1c0 0320 	rsb	r3, r0, #32
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	f340 808a 	ble.w	80071e8 <_dtoa_r+0x920>
 80070d4:	f1c0 001c 	rsb	r0, r0, #28
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	4407      	add	r7, r0
 80070dc:	4403      	add	r3, r0
 80070de:	9306      	str	r3, [sp, #24]
 80070e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e2:	4403      	add	r3, r0
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x830>
 80070ec:	4659      	mov	r1, fp
 80070ee:	461a      	mov	r2, r3
 80070f0:	4628      	mov	r0, r5
 80070f2:	f000 ffcf 	bl	8008094 <__lshift>
 80070f6:	4683      	mov	fp, r0
 80070f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd05      	ble.n	800710a <_dtoa_r+0x842>
 80070fe:	4621      	mov	r1, r4
 8007100:	461a      	mov	r2, r3
 8007102:	4628      	mov	r0, r5
 8007104:	f000 ffc6 	bl	8008094 <__lshift>
 8007108:	4604      	mov	r4, r0
 800710a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d070      	beq.n	80071f2 <_dtoa_r+0x92a>
 8007110:	4621      	mov	r1, r4
 8007112:	4658      	mov	r0, fp
 8007114:	f001 f82e 	bl	8008174 <__mcmp>
 8007118:	2800      	cmp	r0, #0
 800711a:	da6a      	bge.n	80071f2 <_dtoa_r+0x92a>
 800711c:	2300      	movs	r3, #0
 800711e:	4659      	mov	r1, fp
 8007120:	220a      	movs	r2, #10
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fdc0 	bl	8007ca8 <__multadd>
 8007128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800712a:	4683      	mov	fp, r0
 800712c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8194 	beq.w	800745e <_dtoa_r+0xb96>
 8007136:	4631      	mov	r1, r6
 8007138:	2300      	movs	r3, #0
 800713a:	220a      	movs	r2, #10
 800713c:	4628      	mov	r0, r5
 800713e:	f000 fdb3 	bl	8007ca8 <__multadd>
 8007142:	f1b9 0f00 	cmp.w	r9, #0
 8007146:	4606      	mov	r6, r0
 8007148:	f300 8093 	bgt.w	8007272 <_dtoa_r+0x9aa>
 800714c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800714e:	2b02      	cmp	r3, #2
 8007150:	dc57      	bgt.n	8007202 <_dtoa_r+0x93a>
 8007152:	e08e      	b.n	8007272 <_dtoa_r+0x9aa>
 8007154:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800715a:	e757      	b.n	800700c <_dtoa_r+0x744>
 800715c:	9b08      	ldr	r3, [sp, #32]
 800715e:	1e5c      	subs	r4, r3, #1
 8007160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007162:	42a3      	cmp	r3, r4
 8007164:	bfb7      	itett	lt
 8007166:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007168:	1b1c      	subge	r4, r3, r4
 800716a:	1ae2      	sublt	r2, r4, r3
 800716c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800716e:	bfbe      	ittt	lt
 8007170:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007172:	189b      	addlt	r3, r3, r2
 8007174:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007176:	9b08      	ldr	r3, [sp, #32]
 8007178:	bfb8      	it	lt
 800717a:	2400      	movlt	r4, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfbb      	ittet	lt
 8007180:	9b06      	ldrlt	r3, [sp, #24]
 8007182:	9a08      	ldrlt	r2, [sp, #32]
 8007184:	9f06      	ldrge	r7, [sp, #24]
 8007186:	1a9f      	sublt	r7, r3, r2
 8007188:	bfac      	ite	ge
 800718a:	9b08      	ldrge	r3, [sp, #32]
 800718c:	2300      	movlt	r3, #0
 800718e:	e73f      	b.n	8007010 <_dtoa_r+0x748>
 8007190:	3fe00000 	.word	0x3fe00000
 8007194:	40240000 	.word	0x40240000
 8007198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800719a:	9f06      	ldr	r7, [sp, #24]
 800719c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800719e:	e742      	b.n	8007026 <_dtoa_r+0x75e>
 80071a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a2:	e76b      	b.n	800707c <_dtoa_r+0x7b4>
 80071a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	dc19      	bgt.n	80071de <_dtoa_r+0x916>
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	b9bb      	cbnz	r3, 80071de <_dtoa_r+0x916>
 80071ae:	9b05      	ldr	r3, [sp, #20]
 80071b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b4:	b99b      	cbnz	r3, 80071de <_dtoa_r+0x916>
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	0d1b      	lsrs	r3, r3, #20
 80071be:	051b      	lsls	r3, r3, #20
 80071c0:	b183      	cbz	r3, 80071e4 <_dtoa_r+0x91c>
 80071c2:	f04f 0801 	mov.w	r8, #1
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	3301      	adds	r3, #1
 80071ca:	9306      	str	r3, [sp, #24]
 80071cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ce:	3301      	adds	r3, #1
 80071d0:	9309      	str	r3, [sp, #36]	; 0x24
 80071d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f47f af6a 	bne.w	80070ae <_dtoa_r+0x7e6>
 80071da:	2001      	movs	r0, #1
 80071dc:	e76f      	b.n	80070be <_dtoa_r+0x7f6>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	e7f6      	b.n	80071d2 <_dtoa_r+0x90a>
 80071e4:	4698      	mov	r8, r3
 80071e6:	e7f4      	b.n	80071d2 <_dtoa_r+0x90a>
 80071e8:	f43f af7d 	beq.w	80070e6 <_dtoa_r+0x81e>
 80071ec:	4618      	mov	r0, r3
 80071ee:	301c      	adds	r0, #28
 80071f0:	e772      	b.n	80070d8 <_dtoa_r+0x810>
 80071f2:	9b08      	ldr	r3, [sp, #32]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc36      	bgt.n	8007266 <_dtoa_r+0x99e>
 80071f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	dd33      	ble.n	8007266 <_dtoa_r+0x99e>
 80071fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007202:	f1b9 0f00 	cmp.w	r9, #0
 8007206:	d10d      	bne.n	8007224 <_dtoa_r+0x95c>
 8007208:	4621      	mov	r1, r4
 800720a:	464b      	mov	r3, r9
 800720c:	2205      	movs	r2, #5
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fd4a 	bl	8007ca8 <__multadd>
 8007214:	4601      	mov	r1, r0
 8007216:	4604      	mov	r4, r0
 8007218:	4658      	mov	r0, fp
 800721a:	f000 ffab 	bl	8008174 <__mcmp>
 800721e:	2800      	cmp	r0, #0
 8007220:	f73f adb8 	bgt.w	8006d94 <_dtoa_r+0x4cc>
 8007224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007226:	9f03      	ldr	r7, [sp, #12]
 8007228:	ea6f 0a03 	mvn.w	sl, r3
 800722c:	f04f 0800 	mov.w	r8, #0
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f000 fd16 	bl	8007c64 <_Bfree>
 8007238:	2e00      	cmp	r6, #0
 800723a:	f43f aea7 	beq.w	8006f8c <_dtoa_r+0x6c4>
 800723e:	f1b8 0f00 	cmp.w	r8, #0
 8007242:	d005      	beq.n	8007250 <_dtoa_r+0x988>
 8007244:	45b0      	cmp	r8, r6
 8007246:	d003      	beq.n	8007250 <_dtoa_r+0x988>
 8007248:	4641      	mov	r1, r8
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fd0a 	bl	8007c64 <_Bfree>
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	f000 fd06 	bl	8007c64 <_Bfree>
 8007258:	e698      	b.n	8006f8c <_dtoa_r+0x6c4>
 800725a:	2400      	movs	r4, #0
 800725c:	4626      	mov	r6, r4
 800725e:	e7e1      	b.n	8007224 <_dtoa_r+0x95c>
 8007260:	46c2      	mov	sl, r8
 8007262:	4626      	mov	r6, r4
 8007264:	e596      	b.n	8006d94 <_dtoa_r+0x4cc>
 8007266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80fd 	beq.w	800746c <_dtoa_r+0xba4>
 8007272:	2f00      	cmp	r7, #0
 8007274:	dd05      	ble.n	8007282 <_dtoa_r+0x9ba>
 8007276:	4631      	mov	r1, r6
 8007278:	463a      	mov	r2, r7
 800727a:	4628      	mov	r0, r5
 800727c:	f000 ff0a 	bl	8008094 <__lshift>
 8007280:	4606      	mov	r6, r0
 8007282:	f1b8 0f00 	cmp.w	r8, #0
 8007286:	d05c      	beq.n	8007342 <_dtoa_r+0xa7a>
 8007288:	4628      	mov	r0, r5
 800728a:	6871      	ldr	r1, [r6, #4]
 800728c:	f000 fcaa 	bl	8007be4 <_Balloc>
 8007290:	4607      	mov	r7, r0
 8007292:	b928      	cbnz	r0, 80072a0 <_dtoa_r+0x9d8>
 8007294:	4602      	mov	r2, r0
 8007296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800729a:	4b7f      	ldr	r3, [pc, #508]	; (8007498 <_dtoa_r+0xbd0>)
 800729c:	f7ff bb28 	b.w	80068f0 <_dtoa_r+0x28>
 80072a0:	6932      	ldr	r2, [r6, #16]
 80072a2:	f106 010c 	add.w	r1, r6, #12
 80072a6:	3202      	adds	r2, #2
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	300c      	adds	r0, #12
 80072ac:	f000 fc8c 	bl	8007bc8 <memcpy>
 80072b0:	2201      	movs	r2, #1
 80072b2:	4639      	mov	r1, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 feed 	bl	8008094 <__lshift>
 80072ba:	46b0      	mov	r8, r6
 80072bc:	4606      	mov	r6, r0
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9308      	str	r3, [sp, #32]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	444b      	add	r3, r9
 80072c8:	930a      	str	r3, [sp, #40]	; 0x28
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	4621      	mov	r1, r4
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4658      	mov	r0, fp
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	f7ff fa66 	bl	80067ac <quorem>
 80072e0:	4603      	mov	r3, r0
 80072e2:	4641      	mov	r1, r8
 80072e4:	3330      	adds	r3, #48	; 0x30
 80072e6:	9006      	str	r0, [sp, #24]
 80072e8:	4658      	mov	r0, fp
 80072ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ec:	f000 ff42 	bl	8008174 <__mcmp>
 80072f0:	4632      	mov	r2, r6
 80072f2:	4681      	mov	r9, r0
 80072f4:	4621      	mov	r1, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 ff58 	bl	80081ac <__mdiff>
 80072fc:	68c2      	ldr	r2, [r0, #12]
 80072fe:	4607      	mov	r7, r0
 8007300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007302:	bb02      	cbnz	r2, 8007346 <_dtoa_r+0xa7e>
 8007304:	4601      	mov	r1, r0
 8007306:	4658      	mov	r0, fp
 8007308:	f000 ff34 	bl	8008174 <__mcmp>
 800730c:	4602      	mov	r2, r0
 800730e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007310:	4639      	mov	r1, r7
 8007312:	4628      	mov	r0, r5
 8007314:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007318:	f000 fca4 	bl	8007c64 <_Bfree>
 800731c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800731e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007320:	9f08      	ldr	r7, [sp, #32]
 8007322:	ea43 0102 	orr.w	r1, r3, r2
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	430b      	orrs	r3, r1
 800732a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732c:	d10d      	bne.n	800734a <_dtoa_r+0xa82>
 800732e:	2b39      	cmp	r3, #57	; 0x39
 8007330:	d029      	beq.n	8007386 <_dtoa_r+0xabe>
 8007332:	f1b9 0f00 	cmp.w	r9, #0
 8007336:	dd01      	ble.n	800733c <_dtoa_r+0xa74>
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	3331      	adds	r3, #49	; 0x31
 800733c:	9a04      	ldr	r2, [sp, #16]
 800733e:	7013      	strb	r3, [r2, #0]
 8007340:	e776      	b.n	8007230 <_dtoa_r+0x968>
 8007342:	4630      	mov	r0, r6
 8007344:	e7b9      	b.n	80072ba <_dtoa_r+0x9f2>
 8007346:	2201      	movs	r2, #1
 8007348:	e7e2      	b.n	8007310 <_dtoa_r+0xa48>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	db06      	blt.n	800735e <_dtoa_r+0xa96>
 8007350:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007352:	ea41 0909 	orr.w	r9, r1, r9
 8007356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007358:	ea59 0101 	orrs.w	r1, r9, r1
 800735c:	d120      	bne.n	80073a0 <_dtoa_r+0xad8>
 800735e:	2a00      	cmp	r2, #0
 8007360:	ddec      	ble.n	800733c <_dtoa_r+0xa74>
 8007362:	4659      	mov	r1, fp
 8007364:	2201      	movs	r2, #1
 8007366:	4628      	mov	r0, r5
 8007368:	9308      	str	r3, [sp, #32]
 800736a:	f000 fe93 	bl	8008094 <__lshift>
 800736e:	4621      	mov	r1, r4
 8007370:	4683      	mov	fp, r0
 8007372:	f000 feff 	bl	8008174 <__mcmp>
 8007376:	2800      	cmp	r0, #0
 8007378:	9b08      	ldr	r3, [sp, #32]
 800737a:	dc02      	bgt.n	8007382 <_dtoa_r+0xaba>
 800737c:	d1de      	bne.n	800733c <_dtoa_r+0xa74>
 800737e:	07da      	lsls	r2, r3, #31
 8007380:	d5dc      	bpl.n	800733c <_dtoa_r+0xa74>
 8007382:	2b39      	cmp	r3, #57	; 0x39
 8007384:	d1d8      	bne.n	8007338 <_dtoa_r+0xa70>
 8007386:	2339      	movs	r3, #57	; 0x39
 8007388:	9a04      	ldr	r2, [sp, #16]
 800738a:	7013      	strb	r3, [r2, #0]
 800738c:	463b      	mov	r3, r7
 800738e:	461f      	mov	r7, r3
 8007390:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007394:	3b01      	subs	r3, #1
 8007396:	2a39      	cmp	r2, #57	; 0x39
 8007398:	d050      	beq.n	800743c <_dtoa_r+0xb74>
 800739a:	3201      	adds	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e747      	b.n	8007230 <_dtoa_r+0x968>
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	dd03      	ble.n	80073ac <_dtoa_r+0xae4>
 80073a4:	2b39      	cmp	r3, #57	; 0x39
 80073a6:	d0ee      	beq.n	8007386 <_dtoa_r+0xabe>
 80073a8:	3301      	adds	r3, #1
 80073aa:	e7c7      	b.n	800733c <_dtoa_r+0xa74>
 80073ac:	9a08      	ldr	r2, [sp, #32]
 80073ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073b4:	428a      	cmp	r2, r1
 80073b6:	d02a      	beq.n	800740e <_dtoa_r+0xb46>
 80073b8:	4659      	mov	r1, fp
 80073ba:	2300      	movs	r3, #0
 80073bc:	220a      	movs	r2, #10
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fc72 	bl	8007ca8 <__multadd>
 80073c4:	45b0      	cmp	r8, r6
 80073c6:	4683      	mov	fp, r0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	f04f 020a 	mov.w	r2, #10
 80073d0:	4641      	mov	r1, r8
 80073d2:	4628      	mov	r0, r5
 80073d4:	d107      	bne.n	80073e6 <_dtoa_r+0xb1e>
 80073d6:	f000 fc67 	bl	8007ca8 <__multadd>
 80073da:	4680      	mov	r8, r0
 80073dc:	4606      	mov	r6, r0
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	3301      	adds	r3, #1
 80073e2:	9308      	str	r3, [sp, #32]
 80073e4:	e775      	b.n	80072d2 <_dtoa_r+0xa0a>
 80073e6:	f000 fc5f 	bl	8007ca8 <__multadd>
 80073ea:	4631      	mov	r1, r6
 80073ec:	4680      	mov	r8, r0
 80073ee:	2300      	movs	r3, #0
 80073f0:	220a      	movs	r2, #10
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 fc58 	bl	8007ca8 <__multadd>
 80073f8:	4606      	mov	r6, r0
 80073fa:	e7f0      	b.n	80073de <_dtoa_r+0xb16>
 80073fc:	f1b9 0f00 	cmp.w	r9, #0
 8007400:	bfcc      	ite	gt
 8007402:	464f      	movgt	r7, r9
 8007404:	2701      	movle	r7, #1
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	9a03      	ldr	r2, [sp, #12]
 800740c:	4417      	add	r7, r2
 800740e:	4659      	mov	r1, fp
 8007410:	2201      	movs	r2, #1
 8007412:	4628      	mov	r0, r5
 8007414:	9308      	str	r3, [sp, #32]
 8007416:	f000 fe3d 	bl	8008094 <__lshift>
 800741a:	4621      	mov	r1, r4
 800741c:	4683      	mov	fp, r0
 800741e:	f000 fea9 	bl	8008174 <__mcmp>
 8007422:	2800      	cmp	r0, #0
 8007424:	dcb2      	bgt.n	800738c <_dtoa_r+0xac4>
 8007426:	d102      	bne.n	800742e <_dtoa_r+0xb66>
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	07db      	lsls	r3, r3, #31
 800742c:	d4ae      	bmi.n	800738c <_dtoa_r+0xac4>
 800742e:	463b      	mov	r3, r7
 8007430:	461f      	mov	r7, r3
 8007432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007436:	2a30      	cmp	r2, #48	; 0x30
 8007438:	d0fa      	beq.n	8007430 <_dtoa_r+0xb68>
 800743a:	e6f9      	b.n	8007230 <_dtoa_r+0x968>
 800743c:	9a03      	ldr	r2, [sp, #12]
 800743e:	429a      	cmp	r2, r3
 8007440:	d1a5      	bne.n	800738e <_dtoa_r+0xac6>
 8007442:	2331      	movs	r3, #49	; 0x31
 8007444:	f10a 0a01 	add.w	sl, sl, #1
 8007448:	e779      	b.n	800733e <_dtoa_r+0xa76>
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <_dtoa_r+0xbd4>)
 800744c:	f7ff baa8 	b.w	80069a0 <_dtoa_r+0xd8>
 8007450:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007452:	2b00      	cmp	r3, #0
 8007454:	f47f aa81 	bne.w	800695a <_dtoa_r+0x92>
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <_dtoa_r+0xbd8>)
 800745a:	f7ff baa1 	b.w	80069a0 <_dtoa_r+0xd8>
 800745e:	f1b9 0f00 	cmp.w	r9, #0
 8007462:	dc03      	bgt.n	800746c <_dtoa_r+0xba4>
 8007464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007466:	2b02      	cmp	r3, #2
 8007468:	f73f aecb 	bgt.w	8007202 <_dtoa_r+0x93a>
 800746c:	9f03      	ldr	r7, [sp, #12]
 800746e:	4621      	mov	r1, r4
 8007470:	4658      	mov	r0, fp
 8007472:	f7ff f99b 	bl	80067ac <quorem>
 8007476:	9a03      	ldr	r2, [sp, #12]
 8007478:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800747c:	f807 3b01 	strb.w	r3, [r7], #1
 8007480:	1aba      	subs	r2, r7, r2
 8007482:	4591      	cmp	r9, r2
 8007484:	ddba      	ble.n	80073fc <_dtoa_r+0xb34>
 8007486:	4659      	mov	r1, fp
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fc0b 	bl	8007ca8 <__multadd>
 8007492:	4683      	mov	fp, r0
 8007494:	e7eb      	b.n	800746e <_dtoa_r+0xba6>
 8007496:	bf00      	nop
 8007498:	080098e8 	.word	0x080098e8
 800749c:	080096e8 	.word	0x080096e8
 80074a0:	08009869 	.word	0x08009869

080074a4 <rshift>:
 80074a4:	6903      	ldr	r3, [r0, #16]
 80074a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074ae:	f100 0414 	add.w	r4, r0, #20
 80074b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074b6:	dd46      	ble.n	8007546 <rshift+0xa2>
 80074b8:	f011 011f 	ands.w	r1, r1, #31
 80074bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074c4:	d10c      	bne.n	80074e0 <rshift+0x3c>
 80074c6:	4629      	mov	r1, r5
 80074c8:	f100 0710 	add.w	r7, r0, #16
 80074cc:	42b1      	cmp	r1, r6
 80074ce:	d335      	bcc.n	800753c <rshift+0x98>
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	1eea      	subs	r2, r5, #3
 80074d6:	4296      	cmp	r6, r2
 80074d8:	bf38      	it	cc
 80074da:	2300      	movcc	r3, #0
 80074dc:	4423      	add	r3, r4
 80074de:	e015      	b.n	800750c <rshift+0x68>
 80074e0:	46a1      	mov	r9, r4
 80074e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074e6:	f1c1 0820 	rsb	r8, r1, #32
 80074ea:	40cf      	lsrs	r7, r1
 80074ec:	f105 0e04 	add.w	lr, r5, #4
 80074f0:	4576      	cmp	r6, lr
 80074f2:	46f4      	mov	ip, lr
 80074f4:	d816      	bhi.n	8007524 <rshift+0x80>
 80074f6:	1a9a      	subs	r2, r3, r2
 80074f8:	0092      	lsls	r2, r2, #2
 80074fa:	3a04      	subs	r2, #4
 80074fc:	3501      	adds	r5, #1
 80074fe:	42ae      	cmp	r6, r5
 8007500:	bf38      	it	cc
 8007502:	2200      	movcc	r2, #0
 8007504:	18a3      	adds	r3, r4, r2
 8007506:	50a7      	str	r7, [r4, r2]
 8007508:	b107      	cbz	r7, 800750c <rshift+0x68>
 800750a:	3304      	adds	r3, #4
 800750c:	42a3      	cmp	r3, r4
 800750e:	eba3 0204 	sub.w	r2, r3, r4
 8007512:	bf08      	it	eq
 8007514:	2300      	moveq	r3, #0
 8007516:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800751a:	6102      	str	r2, [r0, #16]
 800751c:	bf08      	it	eq
 800751e:	6143      	streq	r3, [r0, #20]
 8007520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007524:	f8dc c000 	ldr.w	ip, [ip]
 8007528:	fa0c fc08 	lsl.w	ip, ip, r8
 800752c:	ea4c 0707 	orr.w	r7, ip, r7
 8007530:	f849 7b04 	str.w	r7, [r9], #4
 8007534:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007538:	40cf      	lsrs	r7, r1
 800753a:	e7d9      	b.n	80074f0 <rshift+0x4c>
 800753c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007540:	f847 cf04 	str.w	ip, [r7, #4]!
 8007544:	e7c2      	b.n	80074cc <rshift+0x28>
 8007546:	4623      	mov	r3, r4
 8007548:	e7e0      	b.n	800750c <rshift+0x68>

0800754a <__hexdig_fun>:
 800754a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d802      	bhi.n	8007558 <__hexdig_fun+0xe>
 8007552:	3820      	subs	r0, #32
 8007554:	b2c0      	uxtb	r0, r0
 8007556:	4770      	bx	lr
 8007558:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800755c:	2b05      	cmp	r3, #5
 800755e:	d801      	bhi.n	8007564 <__hexdig_fun+0x1a>
 8007560:	3847      	subs	r0, #71	; 0x47
 8007562:	e7f7      	b.n	8007554 <__hexdig_fun+0xa>
 8007564:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007568:	2b05      	cmp	r3, #5
 800756a:	d801      	bhi.n	8007570 <__hexdig_fun+0x26>
 800756c:	3827      	subs	r0, #39	; 0x27
 800756e:	e7f1      	b.n	8007554 <__hexdig_fun+0xa>
 8007570:	2000      	movs	r0, #0
 8007572:	4770      	bx	lr

08007574 <__gethex>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	b08b      	sub	sp, #44	; 0x2c
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	4bb2      	ldr	r3, [pc, #712]	; (8007848 <__gethex+0x2d4>)
 800757e:	9002      	str	r0, [sp, #8]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	468b      	mov	fp, r1
 8007584:	4618      	mov	r0, r3
 8007586:	4690      	mov	r8, r2
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	f7f8 fe03 	bl	8000194 <strlen>
 800758e:	4682      	mov	sl, r0
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	f8db 2000 	ldr.w	r2, [fp]
 8007596:	4403      	add	r3, r0
 8007598:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800759c:	9306      	str	r3, [sp, #24]
 800759e:	1c93      	adds	r3, r2, #2
 80075a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075a8:	32fe      	adds	r2, #254	; 0xfe
 80075aa:	18d1      	adds	r1, r2, r3
 80075ac:	461f      	mov	r7, r3
 80075ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075b2:	9101      	str	r1, [sp, #4]
 80075b4:	2830      	cmp	r0, #48	; 0x30
 80075b6:	d0f8      	beq.n	80075aa <__gethex+0x36>
 80075b8:	f7ff ffc7 	bl	800754a <__hexdig_fun>
 80075bc:	4604      	mov	r4, r0
 80075be:	2800      	cmp	r0, #0
 80075c0:	d13a      	bne.n	8007638 <__gethex+0xc4>
 80075c2:	4652      	mov	r2, sl
 80075c4:	4638      	mov	r0, r7
 80075c6:	9903      	ldr	r1, [sp, #12]
 80075c8:	f001 fa26 	bl	8008a18 <strncmp>
 80075cc:	4605      	mov	r5, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d166      	bne.n	80076a0 <__gethex+0x12c>
 80075d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80075d6:	eb07 060a 	add.w	r6, r7, sl
 80075da:	f7ff ffb6 	bl	800754a <__hexdig_fun>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d060      	beq.n	80076a4 <__gethex+0x130>
 80075e2:	4633      	mov	r3, r6
 80075e4:	7818      	ldrb	r0, [r3, #0]
 80075e6:	461f      	mov	r7, r3
 80075e8:	2830      	cmp	r0, #48	; 0x30
 80075ea:	f103 0301 	add.w	r3, r3, #1
 80075ee:	d0f9      	beq.n	80075e4 <__gethex+0x70>
 80075f0:	f7ff ffab 	bl	800754a <__hexdig_fun>
 80075f4:	2301      	movs	r3, #1
 80075f6:	fab0 f480 	clz	r4, r0
 80075fa:	4635      	mov	r5, r6
 80075fc:	0964      	lsrs	r4, r4, #5
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	463a      	mov	r2, r7
 8007602:	4616      	mov	r6, r2
 8007604:	7830      	ldrb	r0, [r6, #0]
 8007606:	3201      	adds	r2, #1
 8007608:	f7ff ff9f 	bl	800754a <__hexdig_fun>
 800760c:	2800      	cmp	r0, #0
 800760e:	d1f8      	bne.n	8007602 <__gethex+0x8e>
 8007610:	4652      	mov	r2, sl
 8007612:	4630      	mov	r0, r6
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	f001 f9ff 	bl	8008a18 <strncmp>
 800761a:	b980      	cbnz	r0, 800763e <__gethex+0xca>
 800761c:	b94d      	cbnz	r5, 8007632 <__gethex+0xbe>
 800761e:	eb06 050a 	add.w	r5, r6, sl
 8007622:	462a      	mov	r2, r5
 8007624:	4616      	mov	r6, r2
 8007626:	7830      	ldrb	r0, [r6, #0]
 8007628:	3201      	adds	r2, #1
 800762a:	f7ff ff8e 	bl	800754a <__hexdig_fun>
 800762e:	2800      	cmp	r0, #0
 8007630:	d1f8      	bne.n	8007624 <__gethex+0xb0>
 8007632:	1bad      	subs	r5, r5, r6
 8007634:	00ad      	lsls	r5, r5, #2
 8007636:	e004      	b.n	8007642 <__gethex+0xce>
 8007638:	2400      	movs	r4, #0
 800763a:	4625      	mov	r5, r4
 800763c:	e7e0      	b.n	8007600 <__gethex+0x8c>
 800763e:	2d00      	cmp	r5, #0
 8007640:	d1f7      	bne.n	8007632 <__gethex+0xbe>
 8007642:	7833      	ldrb	r3, [r6, #0]
 8007644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d139      	bne.n	80076c0 <__gethex+0x14c>
 800764c:	7873      	ldrb	r3, [r6, #1]
 800764e:	2b2b      	cmp	r3, #43	; 0x2b
 8007650:	d02a      	beq.n	80076a8 <__gethex+0x134>
 8007652:	2b2d      	cmp	r3, #45	; 0x2d
 8007654:	d02c      	beq.n	80076b0 <__gethex+0x13c>
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	1c71      	adds	r1, r6, #1
 800765c:	7808      	ldrb	r0, [r1, #0]
 800765e:	f7ff ff74 	bl	800754a <__hexdig_fun>
 8007662:	1e43      	subs	r3, r0, #1
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b18      	cmp	r3, #24
 8007668:	d82a      	bhi.n	80076c0 <__gethex+0x14c>
 800766a:	f1a0 0210 	sub.w	r2, r0, #16
 800766e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007672:	f7ff ff6a 	bl	800754a <__hexdig_fun>
 8007676:	1e43      	subs	r3, r0, #1
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b18      	cmp	r3, #24
 800767c:	d91b      	bls.n	80076b6 <__gethex+0x142>
 800767e:	f1b9 0f00 	cmp.w	r9, #0
 8007682:	d000      	beq.n	8007686 <__gethex+0x112>
 8007684:	4252      	negs	r2, r2
 8007686:	4415      	add	r5, r2
 8007688:	f8cb 1000 	str.w	r1, [fp]
 800768c:	b1d4      	cbz	r4, 80076c4 <__gethex+0x150>
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	bf14      	ite	ne
 8007694:	2700      	movne	r7, #0
 8007696:	2706      	moveq	r7, #6
 8007698:	4638      	mov	r0, r7
 800769a:	b00b      	add	sp, #44	; 0x2c
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	463e      	mov	r6, r7
 80076a2:	4625      	mov	r5, r4
 80076a4:	2401      	movs	r4, #1
 80076a6:	e7cc      	b.n	8007642 <__gethex+0xce>
 80076a8:	f04f 0900 	mov.w	r9, #0
 80076ac:	1cb1      	adds	r1, r6, #2
 80076ae:	e7d5      	b.n	800765c <__gethex+0xe8>
 80076b0:	f04f 0901 	mov.w	r9, #1
 80076b4:	e7fa      	b.n	80076ac <__gethex+0x138>
 80076b6:	230a      	movs	r3, #10
 80076b8:	fb03 0202 	mla	r2, r3, r2, r0
 80076bc:	3a10      	subs	r2, #16
 80076be:	e7d6      	b.n	800766e <__gethex+0xfa>
 80076c0:	4631      	mov	r1, r6
 80076c2:	e7e1      	b.n	8007688 <__gethex+0x114>
 80076c4:	4621      	mov	r1, r4
 80076c6:	1bf3      	subs	r3, r6, r7
 80076c8:	3b01      	subs	r3, #1
 80076ca:	2b07      	cmp	r3, #7
 80076cc:	dc0a      	bgt.n	80076e4 <__gethex+0x170>
 80076ce:	9802      	ldr	r0, [sp, #8]
 80076d0:	f000 fa88 	bl	8007be4 <_Balloc>
 80076d4:	4604      	mov	r4, r0
 80076d6:	b940      	cbnz	r0, 80076ea <__gethex+0x176>
 80076d8:	4602      	mov	r2, r0
 80076da:	21de      	movs	r1, #222	; 0xde
 80076dc:	4b5b      	ldr	r3, [pc, #364]	; (800784c <__gethex+0x2d8>)
 80076de:	485c      	ldr	r0, [pc, #368]	; (8007850 <__gethex+0x2dc>)
 80076e0:	f001 f9bc 	bl	8008a5c <__assert_func>
 80076e4:	3101      	adds	r1, #1
 80076e6:	105b      	asrs	r3, r3, #1
 80076e8:	e7ef      	b.n	80076ca <__gethex+0x156>
 80076ea:	f04f 0b00 	mov.w	fp, #0
 80076ee:	f100 0914 	add.w	r9, r0, #20
 80076f2:	f1ca 0301 	rsb	r3, sl, #1
 80076f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80076fa:	f8cd b004 	str.w	fp, [sp, #4]
 80076fe:	9308      	str	r3, [sp, #32]
 8007700:	42b7      	cmp	r7, r6
 8007702:	d33f      	bcc.n	8007784 <__gethex+0x210>
 8007704:	9f04      	ldr	r7, [sp, #16]
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	f847 3b04 	str.w	r3, [r7], #4
 800770c:	eba7 0709 	sub.w	r7, r7, r9
 8007710:	10bf      	asrs	r7, r7, #2
 8007712:	6127      	str	r7, [r4, #16]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fb57 	bl	8007dc8 <__hi0bits>
 800771a:	017f      	lsls	r7, r7, #5
 800771c:	f8d8 6000 	ldr.w	r6, [r8]
 8007720:	1a3f      	subs	r7, r7, r0
 8007722:	42b7      	cmp	r7, r6
 8007724:	dd62      	ble.n	80077ec <__gethex+0x278>
 8007726:	1bbf      	subs	r7, r7, r6
 8007728:	4639      	mov	r1, r7
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fef1 	bl	8008512 <__any_on>
 8007730:	4682      	mov	sl, r0
 8007732:	b1a8      	cbz	r0, 8007760 <__gethex+0x1ec>
 8007734:	f04f 0a01 	mov.w	sl, #1
 8007738:	1e7b      	subs	r3, r7, #1
 800773a:	1159      	asrs	r1, r3, #5
 800773c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007740:	f003 021f 	and.w	r2, r3, #31
 8007744:	fa0a f202 	lsl.w	r2, sl, r2
 8007748:	420a      	tst	r2, r1
 800774a:	d009      	beq.n	8007760 <__gethex+0x1ec>
 800774c:	4553      	cmp	r3, sl
 800774e:	dd05      	ble.n	800775c <__gethex+0x1e8>
 8007750:	4620      	mov	r0, r4
 8007752:	1eb9      	subs	r1, r7, #2
 8007754:	f000 fedd 	bl	8008512 <__any_on>
 8007758:	2800      	cmp	r0, #0
 800775a:	d144      	bne.n	80077e6 <__gethex+0x272>
 800775c:	f04f 0a02 	mov.w	sl, #2
 8007760:	4639      	mov	r1, r7
 8007762:	4620      	mov	r0, r4
 8007764:	f7ff fe9e 	bl	80074a4 <rshift>
 8007768:	443d      	add	r5, r7
 800776a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800776e:	42ab      	cmp	r3, r5
 8007770:	da4a      	bge.n	8007808 <__gethex+0x294>
 8007772:	4621      	mov	r1, r4
 8007774:	9802      	ldr	r0, [sp, #8]
 8007776:	f000 fa75 	bl	8007c64 <_Bfree>
 800777a:	2300      	movs	r3, #0
 800777c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800777e:	27a3      	movs	r7, #163	; 0xa3
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e789      	b.n	8007698 <__gethex+0x124>
 8007784:	1e73      	subs	r3, r6, #1
 8007786:	9a06      	ldr	r2, [sp, #24]
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800778e:	4293      	cmp	r3, r2
 8007790:	d019      	beq.n	80077c6 <__gethex+0x252>
 8007792:	f1bb 0f20 	cmp.w	fp, #32
 8007796:	d107      	bne.n	80077a8 <__gethex+0x234>
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	9a01      	ldr	r2, [sp, #4]
 800779c:	f843 2b04 	str.w	r2, [r3], #4
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	2300      	movs	r3, #0
 80077a4:	469b      	mov	fp, r3
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077ac:	f7ff fecd 	bl	800754a <__hexdig_fun>
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	f000 000f 	and.w	r0, r0, #15
 80077b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80077ba:	4303      	orrs	r3, r0
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f10b 0b04 	add.w	fp, fp, #4
 80077c2:	9b07      	ldr	r3, [sp, #28]
 80077c4:	e00d      	b.n	80077e2 <__gethex+0x26e>
 80077c6:	9a08      	ldr	r2, [sp, #32]
 80077c8:	1e73      	subs	r3, r6, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	42bb      	cmp	r3, r7
 80077ce:	d3e0      	bcc.n	8007792 <__gethex+0x21e>
 80077d0:	4618      	mov	r0, r3
 80077d2:	4652      	mov	r2, sl
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	f001 f91e 	bl	8008a18 <strncmp>
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	2800      	cmp	r0, #0
 80077e0:	d1d7      	bne.n	8007792 <__gethex+0x21e>
 80077e2:	461e      	mov	r6, r3
 80077e4:	e78c      	b.n	8007700 <__gethex+0x18c>
 80077e6:	f04f 0a03 	mov.w	sl, #3
 80077ea:	e7b9      	b.n	8007760 <__gethex+0x1ec>
 80077ec:	da09      	bge.n	8007802 <__gethex+0x28e>
 80077ee:	1bf7      	subs	r7, r6, r7
 80077f0:	4621      	mov	r1, r4
 80077f2:	463a      	mov	r2, r7
 80077f4:	9802      	ldr	r0, [sp, #8]
 80077f6:	f000 fc4d 	bl	8008094 <__lshift>
 80077fa:	4604      	mov	r4, r0
 80077fc:	1bed      	subs	r5, r5, r7
 80077fe:	f100 0914 	add.w	r9, r0, #20
 8007802:	f04f 0a00 	mov.w	sl, #0
 8007806:	e7b0      	b.n	800776a <__gethex+0x1f6>
 8007808:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800780c:	42a8      	cmp	r0, r5
 800780e:	dd72      	ble.n	80078f6 <__gethex+0x382>
 8007810:	1b45      	subs	r5, r0, r5
 8007812:	42ae      	cmp	r6, r5
 8007814:	dc35      	bgt.n	8007882 <__gethex+0x30e>
 8007816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d029      	beq.n	8007872 <__gethex+0x2fe>
 800781e:	2b03      	cmp	r3, #3
 8007820:	d02b      	beq.n	800787a <__gethex+0x306>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d11c      	bne.n	8007860 <__gethex+0x2ec>
 8007826:	42ae      	cmp	r6, r5
 8007828:	d11a      	bne.n	8007860 <__gethex+0x2ec>
 800782a:	2e01      	cmp	r6, #1
 800782c:	d112      	bne.n	8007854 <__gethex+0x2e0>
 800782e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007832:	9a05      	ldr	r2, [sp, #20]
 8007834:	2762      	movs	r7, #98	; 0x62
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	f8c9 3000 	str.w	r3, [r9]
 8007840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007842:	601c      	str	r4, [r3, #0]
 8007844:	e728      	b.n	8007698 <__gethex+0x124>
 8007846:	bf00      	nop
 8007848:	08009960 	.word	0x08009960
 800784c:	080098e8 	.word	0x080098e8
 8007850:	080098f9 	.word	0x080098f9
 8007854:	4620      	mov	r0, r4
 8007856:	1e71      	subs	r1, r6, #1
 8007858:	f000 fe5b 	bl	8008512 <__any_on>
 800785c:	2800      	cmp	r0, #0
 800785e:	d1e6      	bne.n	800782e <__gethex+0x2ba>
 8007860:	4621      	mov	r1, r4
 8007862:	9802      	ldr	r0, [sp, #8]
 8007864:	f000 f9fe 	bl	8007c64 <_Bfree>
 8007868:	2300      	movs	r3, #0
 800786a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800786c:	2750      	movs	r7, #80	; 0x50
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e712      	b.n	8007698 <__gethex+0x124>
 8007872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1f3      	bne.n	8007860 <__gethex+0x2ec>
 8007878:	e7d9      	b.n	800782e <__gethex+0x2ba>
 800787a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1d6      	bne.n	800782e <__gethex+0x2ba>
 8007880:	e7ee      	b.n	8007860 <__gethex+0x2ec>
 8007882:	1e6f      	subs	r7, r5, #1
 8007884:	f1ba 0f00 	cmp.w	sl, #0
 8007888:	d132      	bne.n	80078f0 <__gethex+0x37c>
 800788a:	b127      	cbz	r7, 8007896 <__gethex+0x322>
 800788c:	4639      	mov	r1, r7
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fe3f 	bl	8008512 <__any_on>
 8007894:	4682      	mov	sl, r0
 8007896:	2101      	movs	r1, #1
 8007898:	117b      	asrs	r3, r7, #5
 800789a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800789e:	f007 071f 	and.w	r7, r7, #31
 80078a2:	fa01 f707 	lsl.w	r7, r1, r7
 80078a6:	421f      	tst	r7, r3
 80078a8:	f04f 0702 	mov.w	r7, #2
 80078ac:	4629      	mov	r1, r5
 80078ae:	4620      	mov	r0, r4
 80078b0:	bf18      	it	ne
 80078b2:	f04a 0a02 	orrne.w	sl, sl, #2
 80078b6:	1b76      	subs	r6, r6, r5
 80078b8:	f7ff fdf4 	bl	80074a4 <rshift>
 80078bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	d048      	beq.n	8007958 <__gethex+0x3e4>
 80078c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d015      	beq.n	80078fa <__gethex+0x386>
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d017      	beq.n	8007902 <__gethex+0x38e>
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d109      	bne.n	80078ea <__gethex+0x376>
 80078d6:	f01a 0f02 	tst.w	sl, #2
 80078da:	d006      	beq.n	80078ea <__gethex+0x376>
 80078dc:	f8d9 0000 	ldr.w	r0, [r9]
 80078e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80078e4:	f01a 0f01 	tst.w	sl, #1
 80078e8:	d10e      	bne.n	8007908 <__gethex+0x394>
 80078ea:	f047 0710 	orr.w	r7, r7, #16
 80078ee:	e033      	b.n	8007958 <__gethex+0x3e4>
 80078f0:	f04f 0a01 	mov.w	sl, #1
 80078f4:	e7cf      	b.n	8007896 <__gethex+0x322>
 80078f6:	2701      	movs	r7, #1
 80078f8:	e7e2      	b.n	80078c0 <__gethex+0x34c>
 80078fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fc:	f1c3 0301 	rsb	r3, r3, #1
 8007900:	9315      	str	r3, [sp, #84]	; 0x54
 8007902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f0      	beq.n	80078ea <__gethex+0x376>
 8007908:	f04f 0c00 	mov.w	ip, #0
 800790c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007910:	f104 0314 	add.w	r3, r4, #20
 8007914:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007918:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800791c:	4618      	mov	r0, r3
 800791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007922:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007926:	d01c      	beq.n	8007962 <__gethex+0x3ee>
 8007928:	3201      	adds	r2, #1
 800792a:	6002      	str	r2, [r0, #0]
 800792c:	2f02      	cmp	r7, #2
 800792e:	f104 0314 	add.w	r3, r4, #20
 8007932:	d13d      	bne.n	80079b0 <__gethex+0x43c>
 8007934:	f8d8 2000 	ldr.w	r2, [r8]
 8007938:	3a01      	subs	r2, #1
 800793a:	42b2      	cmp	r2, r6
 800793c:	d10a      	bne.n	8007954 <__gethex+0x3e0>
 800793e:	2201      	movs	r2, #1
 8007940:	1171      	asrs	r1, r6, #5
 8007942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007946:	f006 061f 	and.w	r6, r6, #31
 800794a:	fa02 f606 	lsl.w	r6, r2, r6
 800794e:	421e      	tst	r6, r3
 8007950:	bf18      	it	ne
 8007952:	4617      	movne	r7, r2
 8007954:	f047 0720 	orr.w	r7, r7, #32
 8007958:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800795a:	601c      	str	r4, [r3, #0]
 800795c:	9b05      	ldr	r3, [sp, #20]
 800795e:	601d      	str	r5, [r3, #0]
 8007960:	e69a      	b.n	8007698 <__gethex+0x124>
 8007962:	4299      	cmp	r1, r3
 8007964:	f843 cc04 	str.w	ip, [r3, #-4]
 8007968:	d8d8      	bhi.n	800791c <__gethex+0x3a8>
 800796a:	68a3      	ldr	r3, [r4, #8]
 800796c:	459b      	cmp	fp, r3
 800796e:	db17      	blt.n	80079a0 <__gethex+0x42c>
 8007970:	6861      	ldr	r1, [r4, #4]
 8007972:	9802      	ldr	r0, [sp, #8]
 8007974:	3101      	adds	r1, #1
 8007976:	f000 f935 	bl	8007be4 <_Balloc>
 800797a:	4681      	mov	r9, r0
 800797c:	b918      	cbnz	r0, 8007986 <__gethex+0x412>
 800797e:	4602      	mov	r2, r0
 8007980:	2184      	movs	r1, #132	; 0x84
 8007982:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <__gethex+0x474>)
 8007984:	e6ab      	b.n	80076de <__gethex+0x16a>
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	f104 010c 	add.w	r1, r4, #12
 800798c:	3202      	adds	r2, #2
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	300c      	adds	r0, #12
 8007992:	f000 f919 	bl	8007bc8 <memcpy>
 8007996:	4621      	mov	r1, r4
 8007998:	9802      	ldr	r0, [sp, #8]
 800799a:	f000 f963 	bl	8007c64 <_Bfree>
 800799e:	464c      	mov	r4, r9
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	6122      	str	r2, [r4, #16]
 80079a6:	2201      	movs	r2, #1
 80079a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079ac:	615a      	str	r2, [r3, #20]
 80079ae:	e7bd      	b.n	800792c <__gethex+0x3b8>
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	455a      	cmp	r2, fp
 80079b4:	dd0b      	ble.n	80079ce <__gethex+0x45a>
 80079b6:	2101      	movs	r1, #1
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff fd73 	bl	80074a4 <rshift>
 80079be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079c2:	3501      	adds	r5, #1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	f6ff aed4 	blt.w	8007772 <__gethex+0x1fe>
 80079ca:	2701      	movs	r7, #1
 80079cc:	e7c2      	b.n	8007954 <__gethex+0x3e0>
 80079ce:	f016 061f 	ands.w	r6, r6, #31
 80079d2:	d0fa      	beq.n	80079ca <__gethex+0x456>
 80079d4:	4453      	add	r3, sl
 80079d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079da:	f000 f9f5 	bl	8007dc8 <__hi0bits>
 80079de:	f1c6 0620 	rsb	r6, r6, #32
 80079e2:	42b0      	cmp	r0, r6
 80079e4:	dbe7      	blt.n	80079b6 <__gethex+0x442>
 80079e6:	e7f0      	b.n	80079ca <__gethex+0x456>
 80079e8:	080098e8 	.word	0x080098e8

080079ec <L_shift>:
 80079ec:	f1c2 0208 	rsb	r2, r2, #8
 80079f0:	0092      	lsls	r2, r2, #2
 80079f2:	b570      	push	{r4, r5, r6, lr}
 80079f4:	f1c2 0620 	rsb	r6, r2, #32
 80079f8:	6843      	ldr	r3, [r0, #4]
 80079fa:	6804      	ldr	r4, [r0, #0]
 80079fc:	fa03 f506 	lsl.w	r5, r3, r6
 8007a00:	432c      	orrs	r4, r5
 8007a02:	40d3      	lsrs	r3, r2
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a0a:	4288      	cmp	r0, r1
 8007a0c:	d3f4      	bcc.n	80079f8 <L_shift+0xc>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}

08007a10 <__match>:
 8007a10:	b530      	push	{r4, r5, lr}
 8007a12:	6803      	ldr	r3, [r0, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a1a:	b914      	cbnz	r4, 8007a22 <__match+0x12>
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	bd30      	pop	{r4, r5, pc}
 8007a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a2a:	2d19      	cmp	r5, #25
 8007a2c:	bf98      	it	ls
 8007a2e:	3220      	addls	r2, #32
 8007a30:	42a2      	cmp	r2, r4
 8007a32:	d0f0      	beq.n	8007a16 <__match+0x6>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7f3      	b.n	8007a20 <__match+0x10>

08007a38 <__hexnan>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	680b      	ldr	r3, [r1, #0]
 8007a40:	4682      	mov	sl, r0
 8007a42:	115e      	asrs	r6, r3, #5
 8007a44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a48:	f013 031f 	ands.w	r3, r3, #31
 8007a4c:	bf18      	it	ne
 8007a4e:	3604      	addne	r6, #4
 8007a50:	1f37      	subs	r7, r6, #4
 8007a52:	46b9      	mov	r9, r7
 8007a54:	463c      	mov	r4, r7
 8007a56:	46ab      	mov	fp, r5
 8007a58:	b087      	sub	sp, #28
 8007a5a:	4690      	mov	r8, r2
 8007a5c:	6802      	ldr	r2, [r0, #0]
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a64:	9502      	str	r5, [sp, #8]
 8007a66:	7851      	ldrb	r1, [r2, #1]
 8007a68:	1c53      	adds	r3, r2, #1
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	b341      	cbz	r1, 8007ac0 <__hexnan+0x88>
 8007a6e:	4608      	mov	r0, r1
 8007a70:	9205      	str	r2, [sp, #20]
 8007a72:	9104      	str	r1, [sp, #16]
 8007a74:	f7ff fd69 	bl	800754a <__hexdig_fun>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d14f      	bne.n	8007b1c <__hexnan+0xe4>
 8007a7c:	9904      	ldr	r1, [sp, #16]
 8007a7e:	9a05      	ldr	r2, [sp, #20]
 8007a80:	2920      	cmp	r1, #32
 8007a82:	d818      	bhi.n	8007ab6 <__hexnan+0x7e>
 8007a84:	9b02      	ldr	r3, [sp, #8]
 8007a86:	459b      	cmp	fp, r3
 8007a88:	dd13      	ble.n	8007ab2 <__hexnan+0x7a>
 8007a8a:	454c      	cmp	r4, r9
 8007a8c:	d206      	bcs.n	8007a9c <__hexnan+0x64>
 8007a8e:	2d07      	cmp	r5, #7
 8007a90:	dc04      	bgt.n	8007a9c <__hexnan+0x64>
 8007a92:	462a      	mov	r2, r5
 8007a94:	4649      	mov	r1, r9
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff ffa8 	bl	80079ec <L_shift>
 8007a9c:	4544      	cmp	r4, r8
 8007a9e:	d950      	bls.n	8007b42 <__hexnan+0x10a>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f1a4 0904 	sub.w	r9, r4, #4
 8007aa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aaa:	461d      	mov	r5, r3
 8007aac:	464c      	mov	r4, r9
 8007aae:	f8cd b008 	str.w	fp, [sp, #8]
 8007ab2:	9a03      	ldr	r2, [sp, #12]
 8007ab4:	e7d7      	b.n	8007a66 <__hexnan+0x2e>
 8007ab6:	2929      	cmp	r1, #41	; 0x29
 8007ab8:	d156      	bne.n	8007b68 <__hexnan+0x130>
 8007aba:	3202      	adds	r2, #2
 8007abc:	f8ca 2000 	str.w	r2, [sl]
 8007ac0:	f1bb 0f00 	cmp.w	fp, #0
 8007ac4:	d050      	beq.n	8007b68 <__hexnan+0x130>
 8007ac6:	454c      	cmp	r4, r9
 8007ac8:	d206      	bcs.n	8007ad8 <__hexnan+0xa0>
 8007aca:	2d07      	cmp	r5, #7
 8007acc:	dc04      	bgt.n	8007ad8 <__hexnan+0xa0>
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff ff8a 	bl	80079ec <L_shift>
 8007ad8:	4544      	cmp	r4, r8
 8007ada:	d934      	bls.n	8007b46 <__hexnan+0x10e>
 8007adc:	4623      	mov	r3, r4
 8007ade:	f1a8 0204 	sub.w	r2, r8, #4
 8007ae2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ae6:	429f      	cmp	r7, r3
 8007ae8:	f842 1f04 	str.w	r1, [r2, #4]!
 8007aec:	d2f9      	bcs.n	8007ae2 <__hexnan+0xaa>
 8007aee:	1b3b      	subs	r3, r7, r4
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	3304      	adds	r3, #4
 8007af6:	3401      	adds	r4, #1
 8007af8:	3e03      	subs	r6, #3
 8007afa:	42b4      	cmp	r4, r6
 8007afc:	bf88      	it	hi
 8007afe:	2304      	movhi	r3, #4
 8007b00:	2200      	movs	r2, #0
 8007b02:	4443      	add	r3, r8
 8007b04:	f843 2b04 	str.w	r2, [r3], #4
 8007b08:	429f      	cmp	r7, r3
 8007b0a:	d2fb      	bcs.n	8007b04 <__hexnan+0xcc>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b91b      	cbnz	r3, 8007b18 <__hexnan+0xe0>
 8007b10:	4547      	cmp	r7, r8
 8007b12:	d127      	bne.n	8007b64 <__hexnan+0x12c>
 8007b14:	2301      	movs	r3, #1
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	2005      	movs	r0, #5
 8007b1a:	e026      	b.n	8007b6a <__hexnan+0x132>
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	2d08      	cmp	r5, #8
 8007b20:	f10b 0b01 	add.w	fp, fp, #1
 8007b24:	dd06      	ble.n	8007b34 <__hexnan+0xfc>
 8007b26:	4544      	cmp	r4, r8
 8007b28:	d9c3      	bls.n	8007ab2 <__hexnan+0x7a>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2501      	movs	r5, #1
 8007b2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b32:	3c04      	subs	r4, #4
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	f000 000f 	and.w	r0, r0, #15
 8007b3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	e7b7      	b.n	8007ab2 <__hexnan+0x7a>
 8007b42:	2508      	movs	r5, #8
 8007b44:	e7b5      	b.n	8007ab2 <__hexnan+0x7a>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0df      	beq.n	8007b0c <__hexnan+0xd4>
 8007b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b50:	f1c3 0320 	rsb	r3, r3, #32
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b5c:	401a      	ands	r2, r3
 8007b5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b62:	e7d3      	b.n	8007b0c <__hexnan+0xd4>
 8007b64:	3f04      	subs	r7, #4
 8007b66:	e7d1      	b.n	8007b0c <__hexnan+0xd4>
 8007b68:	2004      	movs	r0, #4
 8007b6a:	b007      	add	sp, #28
 8007b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b70 <_localeconv_r>:
 8007b70:	4800      	ldr	r0, [pc, #0]	; (8007b74 <_localeconv_r+0x4>)
 8007b72:	4770      	bx	lr
 8007b74:	20000164 	.word	0x20000164

08007b78 <malloc>:
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <malloc+0xc>)
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	f000 bd65 	b.w	800864c <_malloc_r>
 8007b82:	bf00      	nop
 8007b84:	2000000c 	.word	0x2000000c

08007b88 <__ascii_mbtowc>:
 8007b88:	b082      	sub	sp, #8
 8007b8a:	b901      	cbnz	r1, 8007b8e <__ascii_mbtowc+0x6>
 8007b8c:	a901      	add	r1, sp, #4
 8007b8e:	b142      	cbz	r2, 8007ba2 <__ascii_mbtowc+0x1a>
 8007b90:	b14b      	cbz	r3, 8007ba6 <__ascii_mbtowc+0x1e>
 8007b92:	7813      	ldrb	r3, [r2, #0]
 8007b94:	600b      	str	r3, [r1, #0]
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	1e10      	subs	r0, r2, #0
 8007b9a:	bf18      	it	ne
 8007b9c:	2001      	movne	r0, #1
 8007b9e:	b002      	add	sp, #8
 8007ba0:	4770      	bx	lr
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	e7fb      	b.n	8007b9e <__ascii_mbtowc+0x16>
 8007ba6:	f06f 0001 	mvn.w	r0, #1
 8007baa:	e7f8      	b.n	8007b9e <__ascii_mbtowc+0x16>

08007bac <memchr>:
 8007bac:	4603      	mov	r3, r0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	b2c9      	uxtb	r1, r1
 8007bb2:	4402      	add	r2, r0
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	d101      	bne.n	8007bbe <memchr+0x12>
 8007bba:	2000      	movs	r0, #0
 8007bbc:	e003      	b.n	8007bc6 <memchr+0x1a>
 8007bbe:	7804      	ldrb	r4, [r0, #0]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	428c      	cmp	r4, r1
 8007bc4:	d1f6      	bne.n	8007bb4 <memchr+0x8>
 8007bc6:	bd10      	pop	{r4, pc}

08007bc8 <memcpy>:
 8007bc8:	440a      	add	r2, r1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd0:	d100      	bne.n	8007bd4 <memcpy+0xc>
 8007bd2:	4770      	bx	lr
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bda:	4291      	cmp	r1, r2
 8007bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be0:	d1f9      	bne.n	8007bd6 <memcpy+0xe>
 8007be2:	bd10      	pop	{r4, pc}

08007be4 <_Balloc>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	b976      	cbnz	r6, 8007c0c <_Balloc+0x28>
 8007bee:	2010      	movs	r0, #16
 8007bf0:	f7ff ffc2 	bl	8007b78 <malloc>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bf8:	b920      	cbnz	r0, 8007c04 <_Balloc+0x20>
 8007bfa:	2166      	movs	r1, #102	; 0x66
 8007bfc:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <_Balloc+0x78>)
 8007bfe:	4818      	ldr	r0, [pc, #96]	; (8007c60 <_Balloc+0x7c>)
 8007c00:	f000 ff2c 	bl	8008a5c <__assert_func>
 8007c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c08:	6006      	str	r6, [r0, #0]
 8007c0a:	60c6      	str	r6, [r0, #12]
 8007c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c0e:	68f3      	ldr	r3, [r6, #12]
 8007c10:	b183      	cbz	r3, 8007c34 <_Balloc+0x50>
 8007c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c1a:	b9b8      	cbnz	r0, 8007c4c <_Balloc+0x68>
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c22:	1d72      	adds	r2, r6, #5
 8007c24:	4620      	mov	r0, r4
 8007c26:	0092      	lsls	r2, r2, #2
 8007c28:	f000 fc94 	bl	8008554 <_calloc_r>
 8007c2c:	b160      	cbz	r0, 8007c48 <_Balloc+0x64>
 8007c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c32:	e00e      	b.n	8007c52 <_Balloc+0x6e>
 8007c34:	2221      	movs	r2, #33	; 0x21
 8007c36:	2104      	movs	r1, #4
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fc8b 	bl	8008554 <_calloc_r>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	60f0      	str	r0, [r6, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e4      	bne.n	8007c12 <_Balloc+0x2e>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c58:	e7f7      	b.n	8007c4a <_Balloc+0x66>
 8007c5a:	bf00      	nop
 8007c5c:	08009876 	.word	0x08009876
 8007c60:	08009974 	.word	0x08009974

08007c64 <_Bfree>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b976      	cbnz	r6, 8007c8c <_Bfree+0x28>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	f7ff ff82 	bl	8007b78 <malloc>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6268      	str	r0, [r5, #36]	; 0x24
 8007c78:	b920      	cbnz	r0, 8007c84 <_Bfree+0x20>
 8007c7a:	218a      	movs	r1, #138	; 0x8a
 8007c7c:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <_Bfree+0x3c>)
 8007c7e:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <_Bfree+0x40>)
 8007c80:	f000 feec 	bl	8008a5c <__assert_func>
 8007c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	60c6      	str	r6, [r0, #12]
 8007c8c:	b13c      	cbz	r4, 8007c9e <_Bfree+0x3a>
 8007c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c98:	6021      	str	r1, [r4, #0]
 8007c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	08009876 	.word	0x08009876
 8007ca4:	08009974 	.word	0x08009974

08007ca8 <__multadd>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	4607      	mov	r7, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	461e      	mov	r6, r3
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	690d      	ldr	r5, [r1, #16]
 8007cb6:	f101 0c14 	add.w	ip, r1, #20
 8007cba:	f8dc 3000 	ldr.w	r3, [ip]
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	b299      	uxth	r1, r3
 8007cc2:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc6:	0c1e      	lsrs	r6, r3, #16
 8007cc8:	0c0b      	lsrs	r3, r1, #16
 8007cca:	fb02 3306 	mla	r3, r2, r6, r3
 8007cce:	b289      	uxth	r1, r1
 8007cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd4:	4285      	cmp	r5, r0
 8007cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cda:	f84c 1b04 	str.w	r1, [ip], #4
 8007cde:	dcec      	bgt.n	8007cba <__multadd+0x12>
 8007ce0:	b30e      	cbz	r6, 8007d26 <__multadd+0x7e>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc19      	bgt.n	8007d1c <__multadd+0x74>
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4638      	mov	r0, r7
 8007cec:	3101      	adds	r1, #1
 8007cee:	f7ff ff79 	bl	8007be4 <_Balloc>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b928      	cbnz	r0, 8007d02 <__multadd+0x5a>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	21b5      	movs	r1, #181	; 0xb5
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <__multadd+0x84>)
 8007cfc:	480c      	ldr	r0, [pc, #48]	; (8007d30 <__multadd+0x88>)
 8007cfe:	f000 fead 	bl	8008a5c <__assert_func>
 8007d02:	6922      	ldr	r2, [r4, #16]
 8007d04:	f104 010c 	add.w	r1, r4, #12
 8007d08:	3202      	adds	r2, #2
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	300c      	adds	r0, #12
 8007d0e:	f7ff ff5b 	bl	8007bc8 <memcpy>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff ffa5 	bl	8007c64 <_Bfree>
 8007d1a:	4644      	mov	r4, r8
 8007d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d20:	3501      	adds	r5, #1
 8007d22:	615e      	str	r6, [r3, #20]
 8007d24:	6125      	str	r5, [r4, #16]
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	080098e8 	.word	0x080098e8
 8007d30:	08009974 	.word	0x08009974

08007d34 <__s2b>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4615      	mov	r5, r2
 8007d3a:	2209      	movs	r2, #9
 8007d3c:	461f      	mov	r7, r3
 8007d3e:	3308      	adds	r3, #8
 8007d40:	460c      	mov	r4, r1
 8007d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d46:	4606      	mov	r6, r0
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	db09      	blt.n	8007d64 <__s2b+0x30>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff47 	bl	8007be4 <_Balloc>
 8007d56:	b940      	cbnz	r0, 8007d6a <__s2b+0x36>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	21ce      	movs	r1, #206	; 0xce
 8007d5c:	4b18      	ldr	r3, [pc, #96]	; (8007dc0 <__s2b+0x8c>)
 8007d5e:	4819      	ldr	r0, [pc, #100]	; (8007dc4 <__s2b+0x90>)
 8007d60:	f000 fe7c 	bl	8008a5c <__assert_func>
 8007d64:	0052      	lsls	r2, r2, #1
 8007d66:	3101      	adds	r1, #1
 8007d68:	e7f0      	b.n	8007d4c <__s2b+0x18>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	2d09      	cmp	r5, #9
 8007d6e:	6143      	str	r3, [r0, #20]
 8007d70:	f04f 0301 	mov.w	r3, #1
 8007d74:	6103      	str	r3, [r0, #16]
 8007d76:	dd16      	ble.n	8007da6 <__s2b+0x72>
 8007d78:	f104 0909 	add.w	r9, r4, #9
 8007d7c:	46c8      	mov	r8, r9
 8007d7e:	442c      	add	r4, r5
 8007d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d84:	4601      	mov	r1, r0
 8007d86:	220a      	movs	r2, #10
 8007d88:	4630      	mov	r0, r6
 8007d8a:	3b30      	subs	r3, #48	; 0x30
 8007d8c:	f7ff ff8c 	bl	8007ca8 <__multadd>
 8007d90:	45a0      	cmp	r8, r4
 8007d92:	d1f5      	bne.n	8007d80 <__s2b+0x4c>
 8007d94:	f1a5 0408 	sub.w	r4, r5, #8
 8007d98:	444c      	add	r4, r9
 8007d9a:	1b2d      	subs	r5, r5, r4
 8007d9c:	1963      	adds	r3, r4, r5
 8007d9e:	42bb      	cmp	r3, r7
 8007da0:	db04      	blt.n	8007dac <__s2b+0x78>
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	2509      	movs	r5, #9
 8007da8:	340a      	adds	r4, #10
 8007daa:	e7f6      	b.n	8007d9a <__s2b+0x66>
 8007dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007db0:	4601      	mov	r1, r0
 8007db2:	220a      	movs	r2, #10
 8007db4:	4630      	mov	r0, r6
 8007db6:	3b30      	subs	r3, #48	; 0x30
 8007db8:	f7ff ff76 	bl	8007ca8 <__multadd>
 8007dbc:	e7ee      	b.n	8007d9c <__s2b+0x68>
 8007dbe:	bf00      	nop
 8007dc0:	080098e8 	.word	0x080098e8
 8007dc4:	08009974 	.word	0x08009974

08007dc8 <__hi0bits>:
 8007dc8:	0c02      	lsrs	r2, r0, #16
 8007dca:	0412      	lsls	r2, r2, #16
 8007dcc:	4603      	mov	r3, r0
 8007dce:	b9ca      	cbnz	r2, 8007e04 <__hi0bits+0x3c>
 8007dd0:	0403      	lsls	r3, r0, #16
 8007dd2:	2010      	movs	r0, #16
 8007dd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007dd8:	bf04      	itt	eq
 8007dda:	021b      	lsleq	r3, r3, #8
 8007ddc:	3008      	addeq	r0, #8
 8007dde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007de2:	bf04      	itt	eq
 8007de4:	011b      	lsleq	r3, r3, #4
 8007de6:	3004      	addeq	r0, #4
 8007de8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dec:	bf04      	itt	eq
 8007dee:	009b      	lsleq	r3, r3, #2
 8007df0:	3002      	addeq	r0, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	db05      	blt.n	8007e02 <__hi0bits+0x3a>
 8007df6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007dfa:	f100 0001 	add.w	r0, r0, #1
 8007dfe:	bf08      	it	eq
 8007e00:	2020      	moveq	r0, #32
 8007e02:	4770      	bx	lr
 8007e04:	2000      	movs	r0, #0
 8007e06:	e7e5      	b.n	8007dd4 <__hi0bits+0xc>

08007e08 <__lo0bits>:
 8007e08:	6803      	ldr	r3, [r0, #0]
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	f013 0007 	ands.w	r0, r3, #7
 8007e10:	d00b      	beq.n	8007e2a <__lo0bits+0x22>
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	d421      	bmi.n	8007e5a <__lo0bits+0x52>
 8007e16:	0798      	lsls	r0, r3, #30
 8007e18:	bf49      	itett	mi
 8007e1a:	085b      	lsrmi	r3, r3, #1
 8007e1c:	089b      	lsrpl	r3, r3, #2
 8007e1e:	2001      	movmi	r0, #1
 8007e20:	6013      	strmi	r3, [r2, #0]
 8007e22:	bf5c      	itt	pl
 8007e24:	2002      	movpl	r0, #2
 8007e26:	6013      	strpl	r3, [r2, #0]
 8007e28:	4770      	bx	lr
 8007e2a:	b299      	uxth	r1, r3
 8007e2c:	b909      	cbnz	r1, 8007e32 <__lo0bits+0x2a>
 8007e2e:	2010      	movs	r0, #16
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	b2d9      	uxtb	r1, r3
 8007e34:	b909      	cbnz	r1, 8007e3a <__lo0bits+0x32>
 8007e36:	3008      	adds	r0, #8
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	0719      	lsls	r1, r3, #28
 8007e3c:	bf04      	itt	eq
 8007e3e:	091b      	lsreq	r3, r3, #4
 8007e40:	3004      	addeq	r0, #4
 8007e42:	0799      	lsls	r1, r3, #30
 8007e44:	bf04      	itt	eq
 8007e46:	089b      	lsreq	r3, r3, #2
 8007e48:	3002      	addeq	r0, #2
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d403      	bmi.n	8007e56 <__lo0bits+0x4e>
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	f100 0001 	add.w	r0, r0, #1
 8007e54:	d003      	beq.n	8007e5e <__lo0bits+0x56>
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	4770      	bx	lr
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4770      	bx	lr
 8007e5e:	2020      	movs	r0, #32
 8007e60:	4770      	bx	lr
	...

08007e64 <__i2b>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	2101      	movs	r1, #1
 8007e6a:	f7ff febb 	bl	8007be4 <_Balloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__i2b+0x1a>
 8007e72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e76:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <__i2b+0x24>)
 8007e78:	4804      	ldr	r0, [pc, #16]	; (8007e8c <__i2b+0x28>)
 8007e7a:	f000 fdef 	bl	8008a5c <__assert_func>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	6144      	str	r4, [r0, #20]
 8007e82:	6103      	str	r3, [r0, #16]
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	bf00      	nop
 8007e88:	080098e8 	.word	0x080098e8
 8007e8c:	08009974 	.word	0x08009974

08007e90 <__multiply>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4691      	mov	r9, r2
 8007e96:	690a      	ldr	r2, [r1, #16]
 8007e98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	bfbe      	ittt	lt
 8007ea2:	460b      	movlt	r3, r1
 8007ea4:	464c      	movlt	r4, r9
 8007ea6:	4699      	movlt	r9, r3
 8007ea8:	6927      	ldr	r7, [r4, #16]
 8007eaa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	eb07 060a 	add.w	r6, r7, sl
 8007eb6:	42b3      	cmp	r3, r6
 8007eb8:	b085      	sub	sp, #20
 8007eba:	bfb8      	it	lt
 8007ebc:	3101      	addlt	r1, #1
 8007ebe:	f7ff fe91 	bl	8007be4 <_Balloc>
 8007ec2:	b930      	cbnz	r0, 8007ed2 <__multiply+0x42>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	f240 115d 	movw	r1, #349	; 0x15d
 8007eca:	4b43      	ldr	r3, [pc, #268]	; (8007fd8 <__multiply+0x148>)
 8007ecc:	4843      	ldr	r0, [pc, #268]	; (8007fdc <__multiply+0x14c>)
 8007ece:	f000 fdc5 	bl	8008a5c <__assert_func>
 8007ed2:	f100 0514 	add.w	r5, r0, #20
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	2200      	movs	r2, #0
 8007eda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ede:	4543      	cmp	r3, r8
 8007ee0:	d321      	bcc.n	8007f26 <__multiply+0x96>
 8007ee2:	f104 0314 	add.w	r3, r4, #20
 8007ee6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007eea:	f109 0314 	add.w	r3, r9, #20
 8007eee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ef2:	9202      	str	r2, [sp, #8]
 8007ef4:	1b3a      	subs	r2, r7, r4
 8007ef6:	3a15      	subs	r2, #21
 8007ef8:	f022 0203 	bic.w	r2, r2, #3
 8007efc:	3204      	adds	r2, #4
 8007efe:	f104 0115 	add.w	r1, r4, #21
 8007f02:	428f      	cmp	r7, r1
 8007f04:	bf38      	it	cc
 8007f06:	2204      	movcc	r2, #4
 8007f08:	9201      	str	r2, [sp, #4]
 8007f0a:	9a02      	ldr	r2, [sp, #8]
 8007f0c:	9303      	str	r3, [sp, #12]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d80c      	bhi.n	8007f2c <__multiply+0x9c>
 8007f12:	2e00      	cmp	r6, #0
 8007f14:	dd03      	ble.n	8007f1e <__multiply+0x8e>
 8007f16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d059      	beq.n	8007fd2 <__multiply+0x142>
 8007f1e:	6106      	str	r6, [r0, #16]
 8007f20:	b005      	add	sp, #20
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	f843 2b04 	str.w	r2, [r3], #4
 8007f2a:	e7d8      	b.n	8007ede <__multiply+0x4e>
 8007f2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f30:	f1ba 0f00 	cmp.w	sl, #0
 8007f34:	d023      	beq.n	8007f7e <__multiply+0xee>
 8007f36:	46a9      	mov	r9, r5
 8007f38:	f04f 0c00 	mov.w	ip, #0
 8007f3c:	f104 0e14 	add.w	lr, r4, #20
 8007f40:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f44:	f8d9 1000 	ldr.w	r1, [r9]
 8007f48:	fa1f fb82 	uxth.w	fp, r2
 8007f4c:	b289      	uxth	r1, r1
 8007f4e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f52:	4461      	add	r1, ip
 8007f54:	f8d9 c000 	ldr.w	ip, [r9]
 8007f58:	0c12      	lsrs	r2, r2, #16
 8007f5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f5e:	fb0a c202 	mla	r2, sl, r2, ip
 8007f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f66:	b289      	uxth	r1, r1
 8007f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f6c:	4577      	cmp	r7, lr
 8007f6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f72:	f849 1b04 	str.w	r1, [r9], #4
 8007f76:	d8e3      	bhi.n	8007f40 <__multiply+0xb0>
 8007f78:	9a01      	ldr	r2, [sp, #4]
 8007f7a:	f845 c002 	str.w	ip, [r5, r2]
 8007f7e:	9a03      	ldr	r2, [sp, #12]
 8007f80:	3304      	adds	r3, #4
 8007f82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f86:	f1b9 0f00 	cmp.w	r9, #0
 8007f8a:	d020      	beq.n	8007fce <__multiply+0x13e>
 8007f8c:	46ae      	mov	lr, r5
 8007f8e:	f04f 0a00 	mov.w	sl, #0
 8007f92:	6829      	ldr	r1, [r5, #0]
 8007f94:	f104 0c14 	add.w	ip, r4, #20
 8007f98:	f8bc b000 	ldrh.w	fp, [ip]
 8007f9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fa0:	b289      	uxth	r1, r1
 8007fa2:	fb09 220b 	mla	r2, r9, fp, r2
 8007fa6:	4492      	add	sl, r2
 8007fa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fac:	f84e 1b04 	str.w	r1, [lr], #4
 8007fb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8007fb8:	0c12      	lsrs	r2, r2, #16
 8007fba:	fb09 1102 	mla	r1, r9, r2, r1
 8007fbe:	4567      	cmp	r7, ip
 8007fc0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fc8:	d8e6      	bhi.n	8007f98 <__multiply+0x108>
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	50a9      	str	r1, [r5, r2]
 8007fce:	3504      	adds	r5, #4
 8007fd0:	e79b      	b.n	8007f0a <__multiply+0x7a>
 8007fd2:	3e01      	subs	r6, #1
 8007fd4:	e79d      	b.n	8007f12 <__multiply+0x82>
 8007fd6:	bf00      	nop
 8007fd8:	080098e8 	.word	0x080098e8
 8007fdc:	08009974 	.word	0x08009974

08007fe0 <__pow5mult>:
 8007fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	f012 0203 	ands.w	r2, r2, #3
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	d007      	beq.n	8008000 <__pow5mult+0x20>
 8007ff0:	4c25      	ldr	r4, [pc, #148]	; (8008088 <__pow5mult+0xa8>)
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffa:	f7ff fe55 	bl	8007ca8 <__multadd>
 8007ffe:	4607      	mov	r7, r0
 8008000:	10ad      	asrs	r5, r5, #2
 8008002:	d03d      	beq.n	8008080 <__pow5mult+0xa0>
 8008004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008006:	b97c      	cbnz	r4, 8008028 <__pow5mult+0x48>
 8008008:	2010      	movs	r0, #16
 800800a:	f7ff fdb5 	bl	8007b78 <malloc>
 800800e:	4602      	mov	r2, r0
 8008010:	6270      	str	r0, [r6, #36]	; 0x24
 8008012:	b928      	cbnz	r0, 8008020 <__pow5mult+0x40>
 8008014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <__pow5mult+0xac>)
 800801a:	481d      	ldr	r0, [pc, #116]	; (8008090 <__pow5mult+0xb0>)
 800801c:	f000 fd1e 	bl	8008a5c <__assert_func>
 8008020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008024:	6004      	str	r4, [r0, #0]
 8008026:	60c4      	str	r4, [r0, #12]
 8008028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800802c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008030:	b94c      	cbnz	r4, 8008046 <__pow5mult+0x66>
 8008032:	f240 2171 	movw	r1, #625	; 0x271
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ff14 	bl	8007e64 <__i2b>
 800803c:	2300      	movs	r3, #0
 800803e:	4604      	mov	r4, r0
 8008040:	f8c8 0008 	str.w	r0, [r8, #8]
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	f04f 0900 	mov.w	r9, #0
 800804a:	07eb      	lsls	r3, r5, #31
 800804c:	d50a      	bpl.n	8008064 <__pow5mult+0x84>
 800804e:	4639      	mov	r1, r7
 8008050:	4622      	mov	r2, r4
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff1c 	bl	8007e90 <__multiply>
 8008058:	4680      	mov	r8, r0
 800805a:	4639      	mov	r1, r7
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff fe01 	bl	8007c64 <_Bfree>
 8008062:	4647      	mov	r7, r8
 8008064:	106d      	asrs	r5, r5, #1
 8008066:	d00b      	beq.n	8008080 <__pow5mult+0xa0>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	b938      	cbnz	r0, 800807c <__pow5mult+0x9c>
 800806c:	4622      	mov	r2, r4
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff ff0d 	bl	8007e90 <__multiply>
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	f8c0 9000 	str.w	r9, [r0]
 800807c:	4604      	mov	r4, r0
 800807e:	e7e4      	b.n	800804a <__pow5mult+0x6a>
 8008080:	4638      	mov	r0, r7
 8008082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008086:	bf00      	nop
 8008088:	08009ac0 	.word	0x08009ac0
 800808c:	08009876 	.word	0x08009876
 8008090:	08009974 	.word	0x08009974

08008094 <__lshift>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	460c      	mov	r4, r1
 800809a:	4607      	mov	r7, r0
 800809c:	4691      	mov	r9, r2
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	6849      	ldr	r1, [r1, #4]
 80080a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080ac:	f108 0601 	add.w	r6, r8, #1
 80080b0:	42b3      	cmp	r3, r6
 80080b2:	db0b      	blt.n	80080cc <__lshift+0x38>
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff fd95 	bl	8007be4 <_Balloc>
 80080ba:	4605      	mov	r5, r0
 80080bc:	b948      	cbnz	r0, 80080d2 <__lshift+0x3e>
 80080be:	4602      	mov	r2, r0
 80080c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080c4:	4b29      	ldr	r3, [pc, #164]	; (800816c <__lshift+0xd8>)
 80080c6:	482a      	ldr	r0, [pc, #168]	; (8008170 <__lshift+0xdc>)
 80080c8:	f000 fcc8 	bl	8008a5c <__assert_func>
 80080cc:	3101      	adds	r1, #1
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	e7ee      	b.n	80080b0 <__lshift+0x1c>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f100 0114 	add.w	r1, r0, #20
 80080d8:	f100 0210 	add.w	r2, r0, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	4553      	cmp	r3, sl
 80080e0:	db37      	blt.n	8008152 <__lshift+0xbe>
 80080e2:	6920      	ldr	r0, [r4, #16]
 80080e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080e8:	f104 0314 	add.w	r3, r4, #20
 80080ec:	f019 091f 	ands.w	r9, r9, #31
 80080f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080f8:	d02f      	beq.n	800815a <__lshift+0xc6>
 80080fa:	468a      	mov	sl, r1
 80080fc:	f04f 0c00 	mov.w	ip, #0
 8008100:	f1c9 0e20 	rsb	lr, r9, #32
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	fa02 f209 	lsl.w	r2, r2, r9
 800810a:	ea42 020c 	orr.w	r2, r2, ip
 800810e:	f84a 2b04 	str.w	r2, [sl], #4
 8008112:	f853 2b04 	ldr.w	r2, [r3], #4
 8008116:	4298      	cmp	r0, r3
 8008118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800811c:	d8f2      	bhi.n	8008104 <__lshift+0x70>
 800811e:	1b03      	subs	r3, r0, r4
 8008120:	3b15      	subs	r3, #21
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	3304      	adds	r3, #4
 8008128:	f104 0215 	add.w	r2, r4, #21
 800812c:	4290      	cmp	r0, r2
 800812e:	bf38      	it	cc
 8008130:	2304      	movcc	r3, #4
 8008132:	f841 c003 	str.w	ip, [r1, r3]
 8008136:	f1bc 0f00 	cmp.w	ip, #0
 800813a:	d001      	beq.n	8008140 <__lshift+0xac>
 800813c:	f108 0602 	add.w	r6, r8, #2
 8008140:	3e01      	subs	r6, #1
 8008142:	4638      	mov	r0, r7
 8008144:	4621      	mov	r1, r4
 8008146:	612e      	str	r6, [r5, #16]
 8008148:	f7ff fd8c 	bl	8007c64 <_Bfree>
 800814c:	4628      	mov	r0, r5
 800814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008152:	f842 0f04 	str.w	r0, [r2, #4]!
 8008156:	3301      	adds	r3, #1
 8008158:	e7c1      	b.n	80080de <__lshift+0x4a>
 800815a:	3904      	subs	r1, #4
 800815c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008160:	4298      	cmp	r0, r3
 8008162:	f841 2f04 	str.w	r2, [r1, #4]!
 8008166:	d8f9      	bhi.n	800815c <__lshift+0xc8>
 8008168:	e7ea      	b.n	8008140 <__lshift+0xac>
 800816a:	bf00      	nop
 800816c:	080098e8 	.word	0x080098e8
 8008170:	08009974 	.word	0x08009974

08008174 <__mcmp>:
 8008174:	4603      	mov	r3, r0
 8008176:	690a      	ldr	r2, [r1, #16]
 8008178:	6900      	ldr	r0, [r0, #16]
 800817a:	b530      	push	{r4, r5, lr}
 800817c:	1a80      	subs	r0, r0, r2
 800817e:	d10d      	bne.n	800819c <__mcmp+0x28>
 8008180:	3314      	adds	r3, #20
 8008182:	3114      	adds	r1, #20
 8008184:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008188:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800818c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008194:	4295      	cmp	r5, r2
 8008196:	d002      	beq.n	800819e <__mcmp+0x2a>
 8008198:	d304      	bcc.n	80081a4 <__mcmp+0x30>
 800819a:	2001      	movs	r0, #1
 800819c:	bd30      	pop	{r4, r5, pc}
 800819e:	42a3      	cmp	r3, r4
 80081a0:	d3f4      	bcc.n	800818c <__mcmp+0x18>
 80081a2:	e7fb      	b.n	800819c <__mcmp+0x28>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e7f8      	b.n	800819c <__mcmp+0x28>
	...

080081ac <__mdiff>:
 80081ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	460d      	mov	r5, r1
 80081b2:	4607      	mov	r7, r0
 80081b4:	4611      	mov	r1, r2
 80081b6:	4628      	mov	r0, r5
 80081b8:	4614      	mov	r4, r2
 80081ba:	f7ff ffdb 	bl	8008174 <__mcmp>
 80081be:	1e06      	subs	r6, r0, #0
 80081c0:	d111      	bne.n	80081e6 <__mdiff+0x3a>
 80081c2:	4631      	mov	r1, r6
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff fd0d 	bl	8007be4 <_Balloc>
 80081ca:	4602      	mov	r2, r0
 80081cc:	b928      	cbnz	r0, 80081da <__mdiff+0x2e>
 80081ce:	f240 2132 	movw	r1, #562	; 0x232
 80081d2:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <__mdiff+0x110>)
 80081d4:	483a      	ldr	r0, [pc, #232]	; (80082c0 <__mdiff+0x114>)
 80081d6:	f000 fc41 	bl	8008a5c <__assert_func>
 80081da:	2301      	movs	r3, #1
 80081dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80081e0:	4610      	mov	r0, r2
 80081e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e6:	bfa4      	itt	ge
 80081e8:	4623      	movge	r3, r4
 80081ea:	462c      	movge	r4, r5
 80081ec:	4638      	mov	r0, r7
 80081ee:	6861      	ldr	r1, [r4, #4]
 80081f0:	bfa6      	itte	ge
 80081f2:	461d      	movge	r5, r3
 80081f4:	2600      	movge	r6, #0
 80081f6:	2601      	movlt	r6, #1
 80081f8:	f7ff fcf4 	bl	8007be4 <_Balloc>
 80081fc:	4602      	mov	r2, r0
 80081fe:	b918      	cbnz	r0, 8008208 <__mdiff+0x5c>
 8008200:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008204:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <__mdiff+0x110>)
 8008206:	e7e5      	b.n	80081d4 <__mdiff+0x28>
 8008208:	f102 0814 	add.w	r8, r2, #20
 800820c:	46c2      	mov	sl, r8
 800820e:	f04f 0c00 	mov.w	ip, #0
 8008212:	6927      	ldr	r7, [r4, #16]
 8008214:	60c6      	str	r6, [r0, #12]
 8008216:	692e      	ldr	r6, [r5, #16]
 8008218:	f104 0014 	add.w	r0, r4, #20
 800821c:	f105 0914 	add.w	r9, r5, #20
 8008220:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008228:	3410      	adds	r4, #16
 800822a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800822e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008232:	fa1f f18b 	uxth.w	r1, fp
 8008236:	448c      	add	ip, r1
 8008238:	b299      	uxth	r1, r3
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	ebac 0101 	sub.w	r1, ip, r1
 8008240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008244:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008248:	b289      	uxth	r1, r1
 800824a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800824e:	454e      	cmp	r6, r9
 8008250:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008254:	f84a 3b04 	str.w	r3, [sl], #4
 8008258:	d8e7      	bhi.n	800822a <__mdiff+0x7e>
 800825a:	1b73      	subs	r3, r6, r5
 800825c:	3b15      	subs	r3, #21
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	3515      	adds	r5, #21
 8008264:	3304      	adds	r3, #4
 8008266:	42ae      	cmp	r6, r5
 8008268:	bf38      	it	cc
 800826a:	2304      	movcc	r3, #4
 800826c:	4418      	add	r0, r3
 800826e:	4443      	add	r3, r8
 8008270:	461e      	mov	r6, r3
 8008272:	4605      	mov	r5, r0
 8008274:	4575      	cmp	r5, lr
 8008276:	d30e      	bcc.n	8008296 <__mdiff+0xea>
 8008278:	f10e 0103 	add.w	r1, lr, #3
 800827c:	1a09      	subs	r1, r1, r0
 800827e:	f021 0103 	bic.w	r1, r1, #3
 8008282:	3803      	subs	r0, #3
 8008284:	4586      	cmp	lr, r0
 8008286:	bf38      	it	cc
 8008288:	2100      	movcc	r1, #0
 800828a:	4419      	add	r1, r3
 800828c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008290:	b18b      	cbz	r3, 80082b6 <__mdiff+0x10a>
 8008292:	6117      	str	r7, [r2, #16]
 8008294:	e7a4      	b.n	80081e0 <__mdiff+0x34>
 8008296:	f855 8b04 	ldr.w	r8, [r5], #4
 800829a:	fa1f f188 	uxth.w	r1, r8
 800829e:	4461      	add	r1, ip
 80082a0:	140c      	asrs	r4, r1, #16
 80082a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082a6:	b289      	uxth	r1, r1
 80082a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80082b0:	f846 1b04 	str.w	r1, [r6], #4
 80082b4:	e7de      	b.n	8008274 <__mdiff+0xc8>
 80082b6:	3f01      	subs	r7, #1
 80082b8:	e7e8      	b.n	800828c <__mdiff+0xe0>
 80082ba:	bf00      	nop
 80082bc:	080098e8 	.word	0x080098e8
 80082c0:	08009974 	.word	0x08009974

080082c4 <__ulp>:
 80082c4:	4b11      	ldr	r3, [pc, #68]	; (800830c <__ulp+0x48>)
 80082c6:	400b      	ands	r3, r1
 80082c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dd02      	ble.n	80082d6 <__ulp+0x12>
 80082d0:	2000      	movs	r0, #0
 80082d2:	4619      	mov	r1, r3
 80082d4:	4770      	bx	lr
 80082d6:	425b      	negs	r3, r3
 80082d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80082dc:	f04f 0000 	mov.w	r0, #0
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082e8:	da04      	bge.n	80082f4 <__ulp+0x30>
 80082ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082ee:	fa43 f102 	asr.w	r1, r3, r2
 80082f2:	4770      	bx	lr
 80082f4:	f1a2 0314 	sub.w	r3, r2, #20
 80082f8:	2b1e      	cmp	r3, #30
 80082fa:	bfd6      	itet	le
 80082fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008300:	2301      	movgt	r3, #1
 8008302:	fa22 f303 	lsrle.w	r3, r2, r3
 8008306:	4618      	mov	r0, r3
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	7ff00000 	.word	0x7ff00000

08008310 <__b2d>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	6907      	ldr	r7, [r0, #16]
 8008316:	f100 0914 	add.w	r9, r0, #20
 800831a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800831e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008322:	f1a7 0804 	sub.w	r8, r7, #4
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff fd4e 	bl	8007dc8 <__hi0bits>
 800832c:	f1c0 0320 	rsb	r3, r0, #32
 8008330:	280a      	cmp	r0, #10
 8008332:	600b      	str	r3, [r1, #0]
 8008334:	491f      	ldr	r1, [pc, #124]	; (80083b4 <__b2d+0xa4>)
 8008336:	dc17      	bgt.n	8008368 <__b2d+0x58>
 8008338:	45c1      	cmp	r9, r8
 800833a:	bf28      	it	cs
 800833c:	2200      	movcs	r2, #0
 800833e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008342:	fa26 f30c 	lsr.w	r3, r6, ip
 8008346:	bf38      	it	cc
 8008348:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800834c:	ea43 0501 	orr.w	r5, r3, r1
 8008350:	f100 0315 	add.w	r3, r0, #21
 8008354:	fa06 f303 	lsl.w	r3, r6, r3
 8008358:	fa22 f20c 	lsr.w	r2, r2, ip
 800835c:	ea43 0402 	orr.w	r4, r3, r2
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008368:	45c1      	cmp	r9, r8
 800836a:	bf2e      	itee	cs
 800836c:	2200      	movcs	r2, #0
 800836e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008372:	f1a7 0808 	subcc.w	r8, r7, #8
 8008376:	f1b0 030b 	subs.w	r3, r0, #11
 800837a:	d016      	beq.n	80083aa <__b2d+0x9a>
 800837c:	f1c3 0720 	rsb	r7, r3, #32
 8008380:	fa22 f107 	lsr.w	r1, r2, r7
 8008384:	45c8      	cmp	r8, r9
 8008386:	fa06 f603 	lsl.w	r6, r6, r3
 800838a:	ea46 0601 	orr.w	r6, r6, r1
 800838e:	bf94      	ite	ls
 8008390:	2100      	movls	r1, #0
 8008392:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008396:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800839a:	fa02 f003 	lsl.w	r0, r2, r3
 800839e:	40f9      	lsrs	r1, r7
 80083a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80083a4:	ea40 0401 	orr.w	r4, r0, r1
 80083a8:	e7da      	b.n	8008360 <__b2d+0x50>
 80083aa:	4614      	mov	r4, r2
 80083ac:	ea46 0501 	orr.w	r5, r6, r1
 80083b0:	e7d6      	b.n	8008360 <__b2d+0x50>
 80083b2:	bf00      	nop
 80083b4:	3ff00000 	.word	0x3ff00000

080083b8 <__d2b>:
 80083b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80083bc:	2101      	movs	r1, #1
 80083be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80083c2:	4690      	mov	r8, r2
 80083c4:	461d      	mov	r5, r3
 80083c6:	f7ff fc0d 	bl	8007be4 <_Balloc>
 80083ca:	4604      	mov	r4, r0
 80083cc:	b930      	cbnz	r0, 80083dc <__d2b+0x24>
 80083ce:	4602      	mov	r2, r0
 80083d0:	f240 310a 	movw	r1, #778	; 0x30a
 80083d4:	4b24      	ldr	r3, [pc, #144]	; (8008468 <__d2b+0xb0>)
 80083d6:	4825      	ldr	r0, [pc, #148]	; (800846c <__d2b+0xb4>)
 80083d8:	f000 fb40 	bl	8008a5c <__assert_func>
 80083dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80083e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80083e4:	bb2d      	cbnz	r5, 8008432 <__d2b+0x7a>
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f1b8 0300 	subs.w	r3, r8, #0
 80083ec:	d026      	beq.n	800843c <__d2b+0x84>
 80083ee:	4668      	mov	r0, sp
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f7ff fd09 	bl	8007e08 <__lo0bits>
 80083f6:	9900      	ldr	r1, [sp, #0]
 80083f8:	b1f0      	cbz	r0, 8008438 <__d2b+0x80>
 80083fa:	9a01      	ldr	r2, [sp, #4]
 80083fc:	f1c0 0320 	rsb	r3, r0, #32
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	430b      	orrs	r3, r1
 8008406:	40c2      	lsrs	r2, r0
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	bf14      	ite	ne
 8008412:	2102      	movne	r1, #2
 8008414:	2101      	moveq	r1, #1
 8008416:	61a3      	str	r3, [r4, #24]
 8008418:	6121      	str	r1, [r4, #16]
 800841a:	b1c5      	cbz	r5, 800844e <__d2b+0x96>
 800841c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008420:	4405      	add	r5, r0
 8008422:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008426:	603d      	str	r5, [r7, #0]
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4620      	mov	r0, r4
 800842c:	b002      	add	sp, #8
 800842e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008436:	e7d6      	b.n	80083e6 <__d2b+0x2e>
 8008438:	6161      	str	r1, [r4, #20]
 800843a:	e7e7      	b.n	800840c <__d2b+0x54>
 800843c:	a801      	add	r0, sp, #4
 800843e:	f7ff fce3 	bl	8007e08 <__lo0bits>
 8008442:	2101      	movs	r1, #1
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	6121      	str	r1, [r4, #16]
 8008448:	6163      	str	r3, [r4, #20]
 800844a:	3020      	adds	r0, #32
 800844c:	e7e5      	b.n	800841a <__d2b+0x62>
 800844e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008452:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008456:	6038      	str	r0, [r7, #0]
 8008458:	6918      	ldr	r0, [r3, #16]
 800845a:	f7ff fcb5 	bl	8007dc8 <__hi0bits>
 800845e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008462:	6031      	str	r1, [r6, #0]
 8008464:	e7e1      	b.n	800842a <__d2b+0x72>
 8008466:	bf00      	nop
 8008468:	080098e8 	.word	0x080098e8
 800846c:	08009974 	.word	0x08009974

08008470 <__ratio>:
 8008470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	4688      	mov	r8, r1
 8008476:	4669      	mov	r1, sp
 8008478:	4681      	mov	r9, r0
 800847a:	f7ff ff49 	bl	8008310 <__b2d>
 800847e:	460f      	mov	r7, r1
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	4640      	mov	r0, r8
 8008486:	a901      	add	r1, sp, #4
 8008488:	f7ff ff42 	bl	8008310 <__b2d>
 800848c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008490:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008494:	468b      	mov	fp, r1
 8008496:	eba3 0c02 	sub.w	ip, r3, r2
 800849a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bfd5      	itete	le
 80084a8:	460a      	movle	r2, r1
 80084aa:	462a      	movgt	r2, r5
 80084ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084b4:	bfd8      	it	le
 80084b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084ba:	465b      	mov	r3, fp
 80084bc:	4602      	mov	r2, r0
 80084be:	4639      	mov	r1, r7
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7f8 f955 	bl	8000770 <__aeabi_ddiv>
 80084c6:	b003      	add	sp, #12
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084cc <__copybits>:
 80084cc:	3901      	subs	r1, #1
 80084ce:	b570      	push	{r4, r5, r6, lr}
 80084d0:	1149      	asrs	r1, r1, #5
 80084d2:	6914      	ldr	r4, [r2, #16]
 80084d4:	3101      	adds	r1, #1
 80084d6:	f102 0314 	add.w	r3, r2, #20
 80084da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084e2:	1f05      	subs	r5, r0, #4
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d30c      	bcc.n	8008502 <__copybits+0x36>
 80084e8:	1aa3      	subs	r3, r4, r2
 80084ea:	3b11      	subs	r3, #17
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	3211      	adds	r2, #17
 80084f2:	42a2      	cmp	r2, r4
 80084f4:	bf88      	it	hi
 80084f6:	2300      	movhi	r3, #0
 80084f8:	4418      	add	r0, r3
 80084fa:	2300      	movs	r3, #0
 80084fc:	4288      	cmp	r0, r1
 80084fe:	d305      	bcc.n	800850c <__copybits+0x40>
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	f853 6b04 	ldr.w	r6, [r3], #4
 8008506:	f845 6f04 	str.w	r6, [r5, #4]!
 800850a:	e7eb      	b.n	80084e4 <__copybits+0x18>
 800850c:	f840 3b04 	str.w	r3, [r0], #4
 8008510:	e7f4      	b.n	80084fc <__copybits+0x30>

08008512 <__any_on>:
 8008512:	f100 0214 	add.w	r2, r0, #20
 8008516:	6900      	ldr	r0, [r0, #16]
 8008518:	114b      	asrs	r3, r1, #5
 800851a:	4298      	cmp	r0, r3
 800851c:	b510      	push	{r4, lr}
 800851e:	db11      	blt.n	8008544 <__any_on+0x32>
 8008520:	dd0a      	ble.n	8008538 <__any_on+0x26>
 8008522:	f011 011f 	ands.w	r1, r1, #31
 8008526:	d007      	beq.n	8008538 <__any_on+0x26>
 8008528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800852c:	fa24 f001 	lsr.w	r0, r4, r1
 8008530:	fa00 f101 	lsl.w	r1, r0, r1
 8008534:	428c      	cmp	r4, r1
 8008536:	d10b      	bne.n	8008550 <__any_on+0x3e>
 8008538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800853c:	4293      	cmp	r3, r2
 800853e:	d803      	bhi.n	8008548 <__any_on+0x36>
 8008540:	2000      	movs	r0, #0
 8008542:	bd10      	pop	{r4, pc}
 8008544:	4603      	mov	r3, r0
 8008546:	e7f7      	b.n	8008538 <__any_on+0x26>
 8008548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800854c:	2900      	cmp	r1, #0
 800854e:	d0f5      	beq.n	800853c <__any_on+0x2a>
 8008550:	2001      	movs	r0, #1
 8008552:	e7f6      	b.n	8008542 <__any_on+0x30>

08008554 <_calloc_r>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	fba1 5402 	umull	r5, r4, r1, r2
 800855a:	b934      	cbnz	r4, 800856a <_calloc_r+0x16>
 800855c:	4629      	mov	r1, r5
 800855e:	f000 f875 	bl	800864c <_malloc_r>
 8008562:	4606      	mov	r6, r0
 8008564:	b928      	cbnz	r0, 8008572 <_calloc_r+0x1e>
 8008566:	4630      	mov	r0, r6
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	220c      	movs	r2, #12
 800856c:	2600      	movs	r6, #0
 800856e:	6002      	str	r2, [r0, #0]
 8008570:	e7f9      	b.n	8008566 <_calloc_r+0x12>
 8008572:	462a      	mov	r2, r5
 8008574:	4621      	mov	r1, r4
 8008576:	f7fc fbe5 	bl	8004d44 <memset>
 800857a:	e7f4      	b.n	8008566 <_calloc_r+0x12>

0800857c <_free_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4605      	mov	r5, r0
 8008580:	2900      	cmp	r1, #0
 8008582:	d040      	beq.n	8008606 <_free_r+0x8a>
 8008584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008588:	1f0c      	subs	r4, r1, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfb8      	it	lt
 800858e:	18e4      	addlt	r4, r4, r3
 8008590:	f000 faae 	bl	8008af0 <__malloc_lock>
 8008594:	4a1c      	ldr	r2, [pc, #112]	; (8008608 <_free_r+0x8c>)
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	b933      	cbnz	r3, 80085a8 <_free_r+0x2c>
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	6014      	str	r4, [r2, #0]
 800859e:	4628      	mov	r0, r5
 80085a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a4:	f000 baaa 	b.w	8008afc <__malloc_unlock>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d908      	bls.n	80085be <_free_r+0x42>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf01      	itttt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	1809      	addeq	r1, r1, r0
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	e7ed      	b.n	800859a <_free_r+0x1e>
 80085be:	461a      	mov	r2, r3
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b10b      	cbz	r3, 80085c8 <_free_r+0x4c>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d9fa      	bls.n	80085be <_free_r+0x42>
 80085c8:	6811      	ldr	r1, [r2, #0]
 80085ca:	1850      	adds	r0, r2, r1
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d10b      	bne.n	80085e8 <_free_r+0x6c>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	4401      	add	r1, r0
 80085d4:	1850      	adds	r0, r2, r1
 80085d6:	4283      	cmp	r3, r0
 80085d8:	6011      	str	r1, [r2, #0]
 80085da:	d1e0      	bne.n	800859e <_free_r+0x22>
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4401      	add	r1, r0
 80085e2:	6011      	str	r1, [r2, #0]
 80085e4:	6053      	str	r3, [r2, #4]
 80085e6:	e7da      	b.n	800859e <_free_r+0x22>
 80085e8:	d902      	bls.n	80085f0 <_free_r+0x74>
 80085ea:	230c      	movs	r3, #12
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	e7d6      	b.n	800859e <_free_r+0x22>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	1821      	adds	r1, r4, r0
 80085f4:	428b      	cmp	r3, r1
 80085f6:	bf01      	itttt	eq
 80085f8:	6819      	ldreq	r1, [r3, #0]
 80085fa:	685b      	ldreq	r3, [r3, #4]
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6054      	str	r4, [r2, #4]
 8008604:	e7cb      	b.n	800859e <_free_r+0x22>
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	200004fc 	.word	0x200004fc

0800860c <sbrk_aligned>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	4e0e      	ldr	r6, [pc, #56]	; (8008648 <sbrk_aligned+0x3c>)
 8008610:	460c      	mov	r4, r1
 8008612:	6831      	ldr	r1, [r6, #0]
 8008614:	4605      	mov	r5, r0
 8008616:	b911      	cbnz	r1, 800861e <sbrk_aligned+0x12>
 8008618:	f000 f9ee 	bl	80089f8 <_sbrk_r>
 800861c:	6030      	str	r0, [r6, #0]
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f000 f9e9 	bl	80089f8 <_sbrk_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d00a      	beq.n	8008640 <sbrk_aligned+0x34>
 800862a:	1cc4      	adds	r4, r0, #3
 800862c:	f024 0403 	bic.w	r4, r4, #3
 8008630:	42a0      	cmp	r0, r4
 8008632:	d007      	beq.n	8008644 <sbrk_aligned+0x38>
 8008634:	1a21      	subs	r1, r4, r0
 8008636:	4628      	mov	r0, r5
 8008638:	f000 f9de 	bl	80089f8 <_sbrk_r>
 800863c:	3001      	adds	r0, #1
 800863e:	d101      	bne.n	8008644 <sbrk_aligned+0x38>
 8008640:	f04f 34ff 	mov.w	r4, #4294967295
 8008644:	4620      	mov	r0, r4
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	20000500 	.word	0x20000500

0800864c <_malloc_r>:
 800864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008650:	1ccd      	adds	r5, r1, #3
 8008652:	f025 0503 	bic.w	r5, r5, #3
 8008656:	3508      	adds	r5, #8
 8008658:	2d0c      	cmp	r5, #12
 800865a:	bf38      	it	cc
 800865c:	250c      	movcc	r5, #12
 800865e:	2d00      	cmp	r5, #0
 8008660:	4607      	mov	r7, r0
 8008662:	db01      	blt.n	8008668 <_malloc_r+0x1c>
 8008664:	42a9      	cmp	r1, r5
 8008666:	d905      	bls.n	8008674 <_malloc_r+0x28>
 8008668:	230c      	movs	r3, #12
 800866a:	2600      	movs	r6, #0
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4630      	mov	r0, r6
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	4e2e      	ldr	r6, [pc, #184]	; (8008730 <_malloc_r+0xe4>)
 8008676:	f000 fa3b 	bl	8008af0 <__malloc_lock>
 800867a:	6833      	ldr	r3, [r6, #0]
 800867c:	461c      	mov	r4, r3
 800867e:	bb34      	cbnz	r4, 80086ce <_malloc_r+0x82>
 8008680:	4629      	mov	r1, r5
 8008682:	4638      	mov	r0, r7
 8008684:	f7ff ffc2 	bl	800860c <sbrk_aligned>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	4604      	mov	r4, r0
 800868c:	d14d      	bne.n	800872a <_malloc_r+0xde>
 800868e:	6834      	ldr	r4, [r6, #0]
 8008690:	4626      	mov	r6, r4
 8008692:	2e00      	cmp	r6, #0
 8008694:	d140      	bne.n	8008718 <_malloc_r+0xcc>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	4631      	mov	r1, r6
 800869a:	4638      	mov	r0, r7
 800869c:	eb04 0803 	add.w	r8, r4, r3
 80086a0:	f000 f9aa 	bl	80089f8 <_sbrk_r>
 80086a4:	4580      	cmp	r8, r0
 80086a6:	d13a      	bne.n	800871e <_malloc_r+0xd2>
 80086a8:	6821      	ldr	r1, [r4, #0]
 80086aa:	3503      	adds	r5, #3
 80086ac:	1a6d      	subs	r5, r5, r1
 80086ae:	f025 0503 	bic.w	r5, r5, #3
 80086b2:	3508      	adds	r5, #8
 80086b4:	2d0c      	cmp	r5, #12
 80086b6:	bf38      	it	cc
 80086b8:	250c      	movcc	r5, #12
 80086ba:	4638      	mov	r0, r7
 80086bc:	4629      	mov	r1, r5
 80086be:	f7ff ffa5 	bl	800860c <sbrk_aligned>
 80086c2:	3001      	adds	r0, #1
 80086c4:	d02b      	beq.n	800871e <_malloc_r+0xd2>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	442b      	add	r3, r5
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	e00e      	b.n	80086ec <_malloc_r+0xa0>
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	1b52      	subs	r2, r2, r5
 80086d2:	d41e      	bmi.n	8008712 <_malloc_r+0xc6>
 80086d4:	2a0b      	cmp	r2, #11
 80086d6:	d916      	bls.n	8008706 <_malloc_r+0xba>
 80086d8:	1961      	adds	r1, r4, r5
 80086da:	42a3      	cmp	r3, r4
 80086dc:	6025      	str	r5, [r4, #0]
 80086de:	bf18      	it	ne
 80086e0:	6059      	strne	r1, [r3, #4]
 80086e2:	6863      	ldr	r3, [r4, #4]
 80086e4:	bf08      	it	eq
 80086e6:	6031      	streq	r1, [r6, #0]
 80086e8:	5162      	str	r2, [r4, r5]
 80086ea:	604b      	str	r3, [r1, #4]
 80086ec:	4638      	mov	r0, r7
 80086ee:	f104 060b 	add.w	r6, r4, #11
 80086f2:	f000 fa03 	bl	8008afc <__malloc_unlock>
 80086f6:	f026 0607 	bic.w	r6, r6, #7
 80086fa:	1d23      	adds	r3, r4, #4
 80086fc:	1af2      	subs	r2, r6, r3
 80086fe:	d0b6      	beq.n	800866e <_malloc_r+0x22>
 8008700:	1b9b      	subs	r3, r3, r6
 8008702:	50a3      	str	r3, [r4, r2]
 8008704:	e7b3      	b.n	800866e <_malloc_r+0x22>
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	42a3      	cmp	r3, r4
 800870a:	bf0c      	ite	eq
 800870c:	6032      	streq	r2, [r6, #0]
 800870e:	605a      	strne	r2, [r3, #4]
 8008710:	e7ec      	b.n	80086ec <_malloc_r+0xa0>
 8008712:	4623      	mov	r3, r4
 8008714:	6864      	ldr	r4, [r4, #4]
 8008716:	e7b2      	b.n	800867e <_malloc_r+0x32>
 8008718:	4634      	mov	r4, r6
 800871a:	6876      	ldr	r6, [r6, #4]
 800871c:	e7b9      	b.n	8008692 <_malloc_r+0x46>
 800871e:	230c      	movs	r3, #12
 8008720:	4638      	mov	r0, r7
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	f000 f9ea 	bl	8008afc <__malloc_unlock>
 8008728:	e7a1      	b.n	800866e <_malloc_r+0x22>
 800872a:	6025      	str	r5, [r4, #0]
 800872c:	e7de      	b.n	80086ec <_malloc_r+0xa0>
 800872e:	bf00      	nop
 8008730:	200004fc 	.word	0x200004fc

08008734 <__ssputs_r>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	688e      	ldr	r6, [r1, #8]
 800873a:	4682      	mov	sl, r0
 800873c:	429e      	cmp	r6, r3
 800873e:	460c      	mov	r4, r1
 8008740:	4690      	mov	r8, r2
 8008742:	461f      	mov	r7, r3
 8008744:	d838      	bhi.n	80087b8 <__ssputs_r+0x84>
 8008746:	898a      	ldrh	r2, [r1, #12]
 8008748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800874c:	d032      	beq.n	80087b4 <__ssputs_r+0x80>
 800874e:	6825      	ldr	r5, [r4, #0]
 8008750:	6909      	ldr	r1, [r1, #16]
 8008752:	3301      	adds	r3, #1
 8008754:	eba5 0901 	sub.w	r9, r5, r1
 8008758:	6965      	ldr	r5, [r4, #20]
 800875a:	444b      	add	r3, r9
 800875c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008764:	106d      	asrs	r5, r5, #1
 8008766:	429d      	cmp	r5, r3
 8008768:	bf38      	it	cc
 800876a:	461d      	movcc	r5, r3
 800876c:	0553      	lsls	r3, r2, #21
 800876e:	d531      	bpl.n	80087d4 <__ssputs_r+0xa0>
 8008770:	4629      	mov	r1, r5
 8008772:	f7ff ff6b 	bl	800864c <_malloc_r>
 8008776:	4606      	mov	r6, r0
 8008778:	b950      	cbnz	r0, 8008790 <__ssputs_r+0x5c>
 800877a:	230c      	movs	r3, #12
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	f8ca 3000 	str.w	r3, [sl]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008790:	464a      	mov	r2, r9
 8008792:	6921      	ldr	r1, [r4, #16]
 8008794:	f7ff fa18 	bl	8007bc8 <memcpy>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800879e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	6126      	str	r6, [r4, #16]
 80087a6:	444e      	add	r6, r9
 80087a8:	6026      	str	r6, [r4, #0]
 80087aa:	463e      	mov	r6, r7
 80087ac:	6165      	str	r5, [r4, #20]
 80087ae:	eba5 0509 	sub.w	r5, r5, r9
 80087b2:	60a5      	str	r5, [r4, #8]
 80087b4:	42be      	cmp	r6, r7
 80087b6:	d900      	bls.n	80087ba <__ssputs_r+0x86>
 80087b8:	463e      	mov	r6, r7
 80087ba:	4632      	mov	r2, r6
 80087bc:	4641      	mov	r1, r8
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	f000 f97c 	bl	8008abc <memmove>
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	2000      	movs	r0, #0
 80087c8:	1b9b      	subs	r3, r3, r6
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	4433      	add	r3, r6
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	e7db      	b.n	800878c <__ssputs_r+0x58>
 80087d4:	462a      	mov	r2, r5
 80087d6:	f000 f997 	bl	8008b08 <_realloc_r>
 80087da:	4606      	mov	r6, r0
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1e1      	bne.n	80087a4 <__ssputs_r+0x70>
 80087e0:	4650      	mov	r0, sl
 80087e2:	6921      	ldr	r1, [r4, #16]
 80087e4:	f7ff feca 	bl	800857c <_free_r>
 80087e8:	e7c7      	b.n	800877a <__ssputs_r+0x46>
	...

080087ec <_svfiprintf_r>:
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	4698      	mov	r8, r3
 80087f2:	898b      	ldrh	r3, [r1, #12]
 80087f4:	4607      	mov	r7, r0
 80087f6:	061b      	lsls	r3, r3, #24
 80087f8:	460d      	mov	r5, r1
 80087fa:	4614      	mov	r4, r2
 80087fc:	b09d      	sub	sp, #116	; 0x74
 80087fe:	d50e      	bpl.n	800881e <_svfiprintf_r+0x32>
 8008800:	690b      	ldr	r3, [r1, #16]
 8008802:	b963      	cbnz	r3, 800881e <_svfiprintf_r+0x32>
 8008804:	2140      	movs	r1, #64	; 0x40
 8008806:	f7ff ff21 	bl	800864c <_malloc_r>
 800880a:	6028      	str	r0, [r5, #0]
 800880c:	6128      	str	r0, [r5, #16]
 800880e:	b920      	cbnz	r0, 800881a <_svfiprintf_r+0x2e>
 8008810:	230c      	movs	r3, #12
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	e0d1      	b.n	80089be <_svfiprintf_r+0x1d2>
 800881a:	2340      	movs	r3, #64	; 0x40
 800881c:	616b      	str	r3, [r5, #20]
 800881e:	2300      	movs	r3, #0
 8008820:	9309      	str	r3, [sp, #36]	; 0x24
 8008822:	2320      	movs	r3, #32
 8008824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008828:	2330      	movs	r3, #48	; 0x30
 800882a:	f04f 0901 	mov.w	r9, #1
 800882e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089d8 <_svfiprintf_r+0x1ec>
 8008836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800883a:	4623      	mov	r3, r4
 800883c:	469a      	mov	sl, r3
 800883e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008842:	b10a      	cbz	r2, 8008848 <_svfiprintf_r+0x5c>
 8008844:	2a25      	cmp	r2, #37	; 0x25
 8008846:	d1f9      	bne.n	800883c <_svfiprintf_r+0x50>
 8008848:	ebba 0b04 	subs.w	fp, sl, r4
 800884c:	d00b      	beq.n	8008866 <_svfiprintf_r+0x7a>
 800884e:	465b      	mov	r3, fp
 8008850:	4622      	mov	r2, r4
 8008852:	4629      	mov	r1, r5
 8008854:	4638      	mov	r0, r7
 8008856:	f7ff ff6d 	bl	8008734 <__ssputs_r>
 800885a:	3001      	adds	r0, #1
 800885c:	f000 80aa 	beq.w	80089b4 <_svfiprintf_r+0x1c8>
 8008860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008862:	445a      	add	r2, fp
 8008864:	9209      	str	r2, [sp, #36]	; 0x24
 8008866:	f89a 3000 	ldrb.w	r3, [sl]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80a2 	beq.w	80089b4 <_svfiprintf_r+0x1c8>
 8008870:	2300      	movs	r3, #0
 8008872:	f04f 32ff 	mov.w	r2, #4294967295
 8008876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800887a:	f10a 0a01 	add.w	sl, sl, #1
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	9307      	str	r3, [sp, #28]
 8008882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008886:	931a      	str	r3, [sp, #104]	; 0x68
 8008888:	4654      	mov	r4, sl
 800888a:	2205      	movs	r2, #5
 800888c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008890:	4851      	ldr	r0, [pc, #324]	; (80089d8 <_svfiprintf_r+0x1ec>)
 8008892:	f7ff f98b 	bl	8007bac <memchr>
 8008896:	9a04      	ldr	r2, [sp, #16]
 8008898:	b9d8      	cbnz	r0, 80088d2 <_svfiprintf_r+0xe6>
 800889a:	06d0      	lsls	r0, r2, #27
 800889c:	bf44      	itt	mi
 800889e:	2320      	movmi	r3, #32
 80088a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a4:	0711      	lsls	r1, r2, #28
 80088a6:	bf44      	itt	mi
 80088a8:	232b      	movmi	r3, #43	; 0x2b
 80088aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ae:	f89a 3000 	ldrb.w	r3, [sl]
 80088b2:	2b2a      	cmp	r3, #42	; 0x2a
 80088b4:	d015      	beq.n	80088e2 <_svfiprintf_r+0xf6>
 80088b6:	4654      	mov	r4, sl
 80088b8:	2000      	movs	r0, #0
 80088ba:	f04f 0c0a 	mov.w	ip, #10
 80088be:	9a07      	ldr	r2, [sp, #28]
 80088c0:	4621      	mov	r1, r4
 80088c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c6:	3b30      	subs	r3, #48	; 0x30
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d94e      	bls.n	800896a <_svfiprintf_r+0x17e>
 80088cc:	b1b0      	cbz	r0, 80088fc <_svfiprintf_r+0x110>
 80088ce:	9207      	str	r2, [sp, #28]
 80088d0:	e014      	b.n	80088fc <_svfiprintf_r+0x110>
 80088d2:	eba0 0308 	sub.w	r3, r0, r8
 80088d6:	fa09 f303 	lsl.w	r3, r9, r3
 80088da:	4313      	orrs	r3, r2
 80088dc:	46a2      	mov	sl, r4
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	e7d2      	b.n	8008888 <_svfiprintf_r+0x9c>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	1d19      	adds	r1, r3, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	9103      	str	r1, [sp, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfbb      	ittet	lt
 80088ee:	425b      	neglt	r3, r3
 80088f0:	f042 0202 	orrlt.w	r2, r2, #2
 80088f4:	9307      	strge	r3, [sp, #28]
 80088f6:	9307      	strlt	r3, [sp, #28]
 80088f8:	bfb8      	it	lt
 80088fa:	9204      	strlt	r2, [sp, #16]
 80088fc:	7823      	ldrb	r3, [r4, #0]
 80088fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008900:	d10c      	bne.n	800891c <_svfiprintf_r+0x130>
 8008902:	7863      	ldrb	r3, [r4, #1]
 8008904:	2b2a      	cmp	r3, #42	; 0x2a
 8008906:	d135      	bne.n	8008974 <_svfiprintf_r+0x188>
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	3402      	adds	r4, #2
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	9203      	str	r2, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfb8      	it	lt
 8008916:	f04f 33ff 	movlt.w	r3, #4294967295
 800891a:	9305      	str	r3, [sp, #20]
 800891c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80089dc <_svfiprintf_r+0x1f0>
 8008920:	2203      	movs	r2, #3
 8008922:	4650      	mov	r0, sl
 8008924:	7821      	ldrb	r1, [r4, #0]
 8008926:	f7ff f941 	bl	8007bac <memchr>
 800892a:	b140      	cbz	r0, 800893e <_svfiprintf_r+0x152>
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	eba0 000a 	sub.w	r0, r0, sl
 8008932:	fa03 f000 	lsl.w	r0, r3, r0
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	3401      	adds	r4, #1
 800893a:	4303      	orrs	r3, r0
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008942:	2206      	movs	r2, #6
 8008944:	4826      	ldr	r0, [pc, #152]	; (80089e0 <_svfiprintf_r+0x1f4>)
 8008946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800894a:	f7ff f92f 	bl	8007bac <memchr>
 800894e:	2800      	cmp	r0, #0
 8008950:	d038      	beq.n	80089c4 <_svfiprintf_r+0x1d8>
 8008952:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <_svfiprintf_r+0x1f8>)
 8008954:	bb1b      	cbnz	r3, 800899e <_svfiprintf_r+0x1b2>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	3307      	adds	r3, #7
 800895a:	f023 0307 	bic.w	r3, r3, #7
 800895e:	3308      	adds	r3, #8
 8008960:	9303      	str	r3, [sp, #12]
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	4433      	add	r3, r6
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	e767      	b.n	800883a <_svfiprintf_r+0x4e>
 800896a:	460c      	mov	r4, r1
 800896c:	2001      	movs	r0, #1
 800896e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008972:	e7a5      	b.n	80088c0 <_svfiprintf_r+0xd4>
 8008974:	2300      	movs	r3, #0
 8008976:	f04f 0c0a 	mov.w	ip, #10
 800897a:	4619      	mov	r1, r3
 800897c:	3401      	adds	r4, #1
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	4620      	mov	r0, r4
 8008982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008986:	3a30      	subs	r2, #48	; 0x30
 8008988:	2a09      	cmp	r2, #9
 800898a:	d903      	bls.n	8008994 <_svfiprintf_r+0x1a8>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0c5      	beq.n	800891c <_svfiprintf_r+0x130>
 8008990:	9105      	str	r1, [sp, #20]
 8008992:	e7c3      	b.n	800891c <_svfiprintf_r+0x130>
 8008994:	4604      	mov	r4, r0
 8008996:	2301      	movs	r3, #1
 8008998:	fb0c 2101 	mla	r1, ip, r1, r2
 800899c:	e7f0      	b.n	8008980 <_svfiprintf_r+0x194>
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	462a      	mov	r2, r5
 80089a4:	4638      	mov	r0, r7
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <_svfiprintf_r+0x1fc>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	f7fc fa71 	bl	8004e90 <_printf_float>
 80089ae:	1c42      	adds	r2, r0, #1
 80089b0:	4606      	mov	r6, r0
 80089b2:	d1d6      	bne.n	8008962 <_svfiprintf_r+0x176>
 80089b4:	89ab      	ldrh	r3, [r5, #12]
 80089b6:	065b      	lsls	r3, r3, #25
 80089b8:	f53f af2c 	bmi.w	8008814 <_svfiprintf_r+0x28>
 80089bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089be:	b01d      	add	sp, #116	; 0x74
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4638      	mov	r0, r7
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <_svfiprintf_r+0x1fc>)
 80089ce:	a904      	add	r1, sp, #16
 80089d0:	f7fc fcfa 	bl	80053c8 <_printf_i>
 80089d4:	e7eb      	b.n	80089ae <_svfiprintf_r+0x1c2>
 80089d6:	bf00      	nop
 80089d8:	08009acc 	.word	0x08009acc
 80089dc:	08009ad2 	.word	0x08009ad2
 80089e0:	08009ad6 	.word	0x08009ad6
 80089e4:	08004e91 	.word	0x08004e91
 80089e8:	08008735 	.word	0x08008735

080089ec <nan>:
 80089ec:	2000      	movs	r0, #0
 80089ee:	4901      	ldr	r1, [pc, #4]	; (80089f4 <nan+0x8>)
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	7ff80000 	.word	0x7ff80000

080089f8 <_sbrk_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	2300      	movs	r3, #0
 80089fc:	4d05      	ldr	r5, [pc, #20]	; (8008a14 <_sbrk_r+0x1c>)
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7f9 fb2e 	bl	8002064 <_sbrk>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_sbrk_r+0x1a>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_sbrk_r+0x1a>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000504 	.word	0x20000504

08008a18 <strncmp>:
 8008a18:	4603      	mov	r3, r0
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	b172      	cbz	r2, 8008a3c <strncmp+0x24>
 8008a1e:	3901      	subs	r1, #1
 8008a20:	1884      	adds	r4, r0, r2
 8008a22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a2a:	4290      	cmp	r0, r2
 8008a2c:	d101      	bne.n	8008a32 <strncmp+0x1a>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	d101      	bne.n	8008a36 <strncmp+0x1e>
 8008a32:	1a80      	subs	r0, r0, r2
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f3      	bne.n	8008a22 <strncmp+0xa>
 8008a3a:	e7fa      	b.n	8008a32 <strncmp+0x1a>
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	e7f9      	b.n	8008a34 <strncmp+0x1c>

08008a40 <__ascii_wctomb>:
 8008a40:	4603      	mov	r3, r0
 8008a42:	4608      	mov	r0, r1
 8008a44:	b141      	cbz	r1, 8008a58 <__ascii_wctomb+0x18>
 8008a46:	2aff      	cmp	r2, #255	; 0xff
 8008a48:	d904      	bls.n	8008a54 <__ascii_wctomb+0x14>
 8008a4a:	228a      	movs	r2, #138	; 0x8a
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	4770      	bx	lr
 8008a54:	2001      	movs	r0, #1
 8008a56:	700a      	strb	r2, [r1, #0]
 8008a58:	4770      	bx	lr
	...

08008a5c <__assert_func>:
 8008a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5e:	4614      	mov	r4, r2
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <__assert_func+0x2c>)
 8008a64:	4605      	mov	r5, r0
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68d8      	ldr	r0, [r3, #12]
 8008a6a:	b14c      	cbz	r4, 8008a80 <__assert_func+0x24>
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <__assert_func+0x30>)
 8008a6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a72:	9100      	str	r1, [sp, #0]
 8008a74:	462b      	mov	r3, r5
 8008a76:	4906      	ldr	r1, [pc, #24]	; (8008a90 <__assert_func+0x34>)
 8008a78:	f000 f80e 	bl	8008a98 <fiprintf>
 8008a7c:	f000 fa8a 	bl	8008f94 <abort>
 8008a80:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <__assert_func+0x38>)
 8008a82:	461c      	mov	r4, r3
 8008a84:	e7f3      	b.n	8008a6e <__assert_func+0x12>
 8008a86:	bf00      	nop
 8008a88:	2000000c 	.word	0x2000000c
 8008a8c:	08009add 	.word	0x08009add
 8008a90:	08009aea 	.word	0x08009aea
 8008a94:	08009b18 	.word	0x08009b18

08008a98 <fiprintf>:
 8008a98:	b40e      	push	{r1, r2, r3}
 8008a9a:	b503      	push	{r0, r1, lr}
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <fiprintf+0x20>)
 8008aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa6:	6800      	ldr	r0, [r0, #0]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	f000 f883 	bl	8008bb4 <_vfiprintf_r>
 8008aae:	b002      	add	sp, #8
 8008ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab4:	b003      	add	sp, #12
 8008ab6:	4770      	bx	lr
 8008ab8:	2000000c 	.word	0x2000000c

08008abc <memmove>:
 8008abc:	4288      	cmp	r0, r1
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	eb01 0402 	add.w	r4, r1, r2
 8008ac4:	d902      	bls.n	8008acc <memmove+0x10>
 8008ac6:	4284      	cmp	r4, r0
 8008ac8:	4623      	mov	r3, r4
 8008aca:	d807      	bhi.n	8008adc <memmove+0x20>
 8008acc:	1e43      	subs	r3, r0, #1
 8008ace:	42a1      	cmp	r1, r4
 8008ad0:	d008      	beq.n	8008ae4 <memmove+0x28>
 8008ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ada:	e7f8      	b.n	8008ace <memmove+0x12>
 8008adc:	4601      	mov	r1, r0
 8008ade:	4402      	add	r2, r0
 8008ae0:	428a      	cmp	r2, r1
 8008ae2:	d100      	bne.n	8008ae6 <memmove+0x2a>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aee:	e7f7      	b.n	8008ae0 <memmove+0x24>

08008af0 <__malloc_lock>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__malloc_lock+0x8>)
 8008af2:	f000 bc0b 	b.w	800930c <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	20000508 	.word	0x20000508

08008afc <__malloc_unlock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_unlock+0x8>)
 8008afe:	f000 bc06 	b.w	800930e <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000508 	.word	0x20000508

08008b08 <_realloc_r>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4614      	mov	r4, r2
 8008b10:	460e      	mov	r6, r1
 8008b12:	b921      	cbnz	r1, 8008b1e <_realloc_r+0x16>
 8008b14:	4611      	mov	r1, r2
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f7ff bd97 	b.w	800864c <_malloc_r>
 8008b1e:	b92a      	cbnz	r2, 8008b2c <_realloc_r+0x24>
 8008b20:	f7ff fd2c 	bl	800857c <_free_r>
 8008b24:	4625      	mov	r5, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	f000 fc56 	bl	80093dc <_malloc_usable_size_r>
 8008b30:	4284      	cmp	r4, r0
 8008b32:	4607      	mov	r7, r0
 8008b34:	d802      	bhi.n	8008b3c <_realloc_r+0x34>
 8008b36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b3a:	d812      	bhi.n	8008b62 <_realloc_r+0x5a>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7ff fd84 	bl	800864c <_malloc_r>
 8008b44:	4605      	mov	r5, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d0ed      	beq.n	8008b26 <_realloc_r+0x1e>
 8008b4a:	42bc      	cmp	r4, r7
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4631      	mov	r1, r6
 8008b50:	bf28      	it	cs
 8008b52:	463a      	movcs	r2, r7
 8008b54:	f7ff f838 	bl	8007bc8 <memcpy>
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fd0e 	bl	800857c <_free_r>
 8008b60:	e7e1      	b.n	8008b26 <_realloc_r+0x1e>
 8008b62:	4635      	mov	r5, r6
 8008b64:	e7df      	b.n	8008b26 <_realloc_r+0x1e>

08008b66 <__sfputc_r>:
 8008b66:	6893      	ldr	r3, [r2, #8]
 8008b68:	b410      	push	{r4}
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	6093      	str	r3, [r2, #8]
 8008b70:	da07      	bge.n	8008b82 <__sfputc_r+0x1c>
 8008b72:	6994      	ldr	r4, [r2, #24]
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	db01      	blt.n	8008b7c <__sfputc_r+0x16>
 8008b78:	290a      	cmp	r1, #10
 8008b7a:	d102      	bne.n	8008b82 <__sfputc_r+0x1c>
 8008b7c:	bc10      	pop	{r4}
 8008b7e:	f000 b949 	b.w	8008e14 <__swbuf_r>
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	1c58      	adds	r0, r3, #1
 8008b86:	6010      	str	r0, [r2, #0]
 8008b88:	7019      	strb	r1, [r3, #0]
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	bc10      	pop	{r4}
 8008b8e:	4770      	bx	lr

08008b90 <__sfputs_r>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	4614      	mov	r4, r2
 8008b98:	18d5      	adds	r5, r2, r3
 8008b9a:	42ac      	cmp	r4, r5
 8008b9c:	d101      	bne.n	8008ba2 <__sfputs_r+0x12>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	e007      	b.n	8008bb2 <__sfputs_r+0x22>
 8008ba2:	463a      	mov	r2, r7
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008baa:	f7ff ffdc 	bl	8008b66 <__sfputc_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d1f3      	bne.n	8008b9a <__sfputs_r+0xa>
 8008bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bb4 <_vfiprintf_r>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	460d      	mov	r5, r1
 8008bba:	4614      	mov	r4, r2
 8008bbc:	4698      	mov	r8, r3
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	b09d      	sub	sp, #116	; 0x74
 8008bc2:	b118      	cbz	r0, 8008bcc <_vfiprintf_r+0x18>
 8008bc4:	6983      	ldr	r3, [r0, #24]
 8008bc6:	b90b      	cbnz	r3, 8008bcc <_vfiprintf_r+0x18>
 8008bc8:	f000 fb02 	bl	80091d0 <__sinit>
 8008bcc:	4b89      	ldr	r3, [pc, #548]	; (8008df4 <_vfiprintf_r+0x240>)
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	d11b      	bne.n	8008c0a <_vfiprintf_r+0x56>
 8008bd2:	6875      	ldr	r5, [r6, #4]
 8008bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd6:	07d9      	lsls	r1, r3, #31
 8008bd8:	d405      	bmi.n	8008be6 <_vfiprintf_r+0x32>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	059a      	lsls	r2, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_vfiprintf_r+0x32>
 8008be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be2:	f000 fb93 	bl	800930c <__retarget_lock_acquire_recursive>
 8008be6:	89ab      	ldrh	r3, [r5, #12]
 8008be8:	071b      	lsls	r3, r3, #28
 8008bea:	d501      	bpl.n	8008bf0 <_vfiprintf_r+0x3c>
 8008bec:	692b      	ldr	r3, [r5, #16]
 8008bee:	b9eb      	cbnz	r3, 8008c2c <_vfiprintf_r+0x78>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f000 f960 	bl	8008eb8 <__swsetup_r>
 8008bf8:	b1c0      	cbz	r0, 8008c2c <_vfiprintf_r+0x78>
 8008bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bfc:	07dc      	lsls	r4, r3, #31
 8008bfe:	d50e      	bpl.n	8008c1e <_vfiprintf_r+0x6a>
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	b01d      	add	sp, #116	; 0x74
 8008c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0a:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <_vfiprintf_r+0x244>)
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	d101      	bne.n	8008c14 <_vfiprintf_r+0x60>
 8008c10:	68b5      	ldr	r5, [r6, #8]
 8008c12:	e7df      	b.n	8008bd4 <_vfiprintf_r+0x20>
 8008c14:	4b79      	ldr	r3, [pc, #484]	; (8008dfc <_vfiprintf_r+0x248>)
 8008c16:	429d      	cmp	r5, r3
 8008c18:	bf08      	it	eq
 8008c1a:	68f5      	ldreq	r5, [r6, #12]
 8008c1c:	e7da      	b.n	8008bd4 <_vfiprintf_r+0x20>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	0598      	lsls	r0, r3, #22
 8008c22:	d4ed      	bmi.n	8008c00 <_vfiprintf_r+0x4c>
 8008c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c26:	f000 fb72 	bl	800930e <__retarget_lock_release_recursive>
 8008c2a:	e7e9      	b.n	8008c00 <_vfiprintf_r+0x4c>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c30:	2320      	movs	r3, #32
 8008c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c36:	2330      	movs	r3, #48	; 0x30
 8008c38:	f04f 0901 	mov.w	r9, #1
 8008c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e00 <_vfiprintf_r+0x24c>
 8008c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c48:	4623      	mov	r3, r4
 8008c4a:	469a      	mov	sl, r3
 8008c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c50:	b10a      	cbz	r2, 8008c56 <_vfiprintf_r+0xa2>
 8008c52:	2a25      	cmp	r2, #37	; 0x25
 8008c54:	d1f9      	bne.n	8008c4a <_vfiprintf_r+0x96>
 8008c56:	ebba 0b04 	subs.w	fp, sl, r4
 8008c5a:	d00b      	beq.n	8008c74 <_vfiprintf_r+0xc0>
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7ff ff94 	bl	8008b90 <__sfputs_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	f000 80aa 	beq.w	8008dc2 <_vfiprintf_r+0x20e>
 8008c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c70:	445a      	add	r2, fp
 8008c72:	9209      	str	r2, [sp, #36]	; 0x24
 8008c74:	f89a 3000 	ldrb.w	r3, [sl]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80a2 	beq.w	8008dc2 <_vfiprintf_r+0x20e>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c88:	f10a 0a01 	add.w	sl, sl, #1
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	9307      	str	r3, [sp, #28]
 8008c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c94:	931a      	str	r3, [sp, #104]	; 0x68
 8008c96:	4654      	mov	r4, sl
 8008c98:	2205      	movs	r2, #5
 8008c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9e:	4858      	ldr	r0, [pc, #352]	; (8008e00 <_vfiprintf_r+0x24c>)
 8008ca0:	f7fe ff84 	bl	8007bac <memchr>
 8008ca4:	9a04      	ldr	r2, [sp, #16]
 8008ca6:	b9d8      	cbnz	r0, 8008ce0 <_vfiprintf_r+0x12c>
 8008ca8:	06d1      	lsls	r1, r2, #27
 8008caa:	bf44      	itt	mi
 8008cac:	2320      	movmi	r3, #32
 8008cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb2:	0713      	lsls	r3, r2, #28
 8008cb4:	bf44      	itt	mi
 8008cb6:	232b      	movmi	r3, #43	; 0x2b
 8008cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc2:	d015      	beq.n	8008cf0 <_vfiprintf_r+0x13c>
 8008cc4:	4654      	mov	r4, sl
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f04f 0c0a 	mov.w	ip, #10
 8008ccc:	9a07      	ldr	r2, [sp, #28]
 8008cce:	4621      	mov	r1, r4
 8008cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd4:	3b30      	subs	r3, #48	; 0x30
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	d94e      	bls.n	8008d78 <_vfiprintf_r+0x1c4>
 8008cda:	b1b0      	cbz	r0, 8008d0a <_vfiprintf_r+0x156>
 8008cdc:	9207      	str	r2, [sp, #28]
 8008cde:	e014      	b.n	8008d0a <_vfiprintf_r+0x156>
 8008ce0:	eba0 0308 	sub.w	r3, r0, r8
 8008ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	46a2      	mov	sl, r4
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	e7d2      	b.n	8008c96 <_vfiprintf_r+0xe2>
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	1d19      	adds	r1, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	9103      	str	r1, [sp, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bfbb      	ittet	lt
 8008cfc:	425b      	neglt	r3, r3
 8008cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008d02:	9307      	strge	r3, [sp, #28]
 8008d04:	9307      	strlt	r3, [sp, #28]
 8008d06:	bfb8      	it	lt
 8008d08:	9204      	strlt	r2, [sp, #16]
 8008d0a:	7823      	ldrb	r3, [r4, #0]
 8008d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0e:	d10c      	bne.n	8008d2a <_vfiprintf_r+0x176>
 8008d10:	7863      	ldrb	r3, [r4, #1]
 8008d12:	2b2a      	cmp	r3, #42	; 0x2a
 8008d14:	d135      	bne.n	8008d82 <_vfiprintf_r+0x1ce>
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	3402      	adds	r4, #2
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	9203      	str	r2, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfb8      	it	lt
 8008d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d28:	9305      	str	r3, [sp, #20]
 8008d2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008e04 <_vfiprintf_r+0x250>
 8008d2e:	2203      	movs	r2, #3
 8008d30:	4650      	mov	r0, sl
 8008d32:	7821      	ldrb	r1, [r4, #0]
 8008d34:	f7fe ff3a 	bl	8007bac <memchr>
 8008d38:	b140      	cbz	r0, 8008d4c <_vfiprintf_r+0x198>
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	eba0 000a 	sub.w	r0, r0, sl
 8008d40:	fa03 f000 	lsl.w	r0, r3, r0
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	3401      	adds	r4, #1
 8008d48:	4303      	orrs	r3, r0
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d50:	2206      	movs	r2, #6
 8008d52:	482d      	ldr	r0, [pc, #180]	; (8008e08 <_vfiprintf_r+0x254>)
 8008d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d58:	f7fe ff28 	bl	8007bac <memchr>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d03f      	beq.n	8008de0 <_vfiprintf_r+0x22c>
 8008d60:	4b2a      	ldr	r3, [pc, #168]	; (8008e0c <_vfiprintf_r+0x258>)
 8008d62:	bb1b      	cbnz	r3, 8008dac <_vfiprintf_r+0x1f8>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	3307      	adds	r3, #7
 8008d68:	f023 0307 	bic.w	r3, r3, #7
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d72:	443b      	add	r3, r7
 8008d74:	9309      	str	r3, [sp, #36]	; 0x24
 8008d76:	e767      	b.n	8008c48 <_vfiprintf_r+0x94>
 8008d78:	460c      	mov	r4, r1
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d80:	e7a5      	b.n	8008cce <_vfiprintf_r+0x11a>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4619      	mov	r1, r3
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d94:	3a30      	subs	r2, #48	; 0x30
 8008d96:	2a09      	cmp	r2, #9
 8008d98:	d903      	bls.n	8008da2 <_vfiprintf_r+0x1ee>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0c5      	beq.n	8008d2a <_vfiprintf_r+0x176>
 8008d9e:	9105      	str	r1, [sp, #20]
 8008da0:	e7c3      	b.n	8008d2a <_vfiprintf_r+0x176>
 8008da2:	4604      	mov	r4, r0
 8008da4:	2301      	movs	r3, #1
 8008da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008daa:	e7f0      	b.n	8008d8e <_vfiprintf_r+0x1da>
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <_vfiprintf_r+0x25c>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	f7fc f86a 	bl	8004e90 <_printf_float>
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	1c78      	adds	r0, r7, #1
 8008dc0:	d1d6      	bne.n	8008d70 <_vfiprintf_r+0x1bc>
 8008dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc4:	07d9      	lsls	r1, r3, #31
 8008dc6:	d405      	bmi.n	8008dd4 <_vfiprintf_r+0x220>
 8008dc8:	89ab      	ldrh	r3, [r5, #12]
 8008dca:	059a      	lsls	r2, r3, #22
 8008dcc:	d402      	bmi.n	8008dd4 <_vfiprintf_r+0x220>
 8008dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dd0:	f000 fa9d 	bl	800930e <__retarget_lock_release_recursive>
 8008dd4:	89ab      	ldrh	r3, [r5, #12]
 8008dd6:	065b      	lsls	r3, r3, #25
 8008dd8:	f53f af12 	bmi.w	8008c00 <_vfiprintf_r+0x4c>
 8008ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dde:	e711      	b.n	8008c04 <_vfiprintf_r+0x50>
 8008de0:	ab03      	add	r3, sp, #12
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	462a      	mov	r2, r5
 8008de6:	4630      	mov	r0, r6
 8008de8:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <_vfiprintf_r+0x25c>)
 8008dea:	a904      	add	r1, sp, #16
 8008dec:	f7fc faec 	bl	80053c8 <_printf_i>
 8008df0:	e7e4      	b.n	8008dbc <_vfiprintf_r+0x208>
 8008df2:	bf00      	nop
 8008df4:	08009b3c 	.word	0x08009b3c
 8008df8:	08009b5c 	.word	0x08009b5c
 8008dfc:	08009b1c 	.word	0x08009b1c
 8008e00:	08009acc 	.word	0x08009acc
 8008e04:	08009ad2 	.word	0x08009ad2
 8008e08:	08009ad6 	.word	0x08009ad6
 8008e0c:	08004e91 	.word	0x08004e91
 8008e10:	08008b91 	.word	0x08008b91

08008e14 <__swbuf_r>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	460e      	mov	r6, r1
 8008e18:	4614      	mov	r4, r2
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b118      	cbz	r0, 8008e26 <__swbuf_r+0x12>
 8008e1e:	6983      	ldr	r3, [r0, #24]
 8008e20:	b90b      	cbnz	r3, 8008e26 <__swbuf_r+0x12>
 8008e22:	f000 f9d5 	bl	80091d0 <__sinit>
 8008e26:	4b21      	ldr	r3, [pc, #132]	; (8008eac <__swbuf_r+0x98>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	d12b      	bne.n	8008e84 <__swbuf_r+0x70>
 8008e2c:	686c      	ldr	r4, [r5, #4]
 8008e2e:	69a3      	ldr	r3, [r4, #24]
 8008e30:	60a3      	str	r3, [r4, #8]
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	071a      	lsls	r2, r3, #28
 8008e36:	d52f      	bpl.n	8008e98 <__swbuf_r+0x84>
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	b36b      	cbz	r3, 8008e98 <__swbuf_r+0x84>
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	b2f6      	uxtb	r6, r6
 8008e42:	1ac0      	subs	r0, r0, r3
 8008e44:	6963      	ldr	r3, [r4, #20]
 8008e46:	4637      	mov	r7, r6
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	dc04      	bgt.n	8008e56 <__swbuf_r+0x42>
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 f92a 	bl	80090a8 <_fflush_r>
 8008e54:	bb30      	cbnz	r0, 8008ea4 <__swbuf_r+0x90>
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	3001      	adds	r0, #1
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	60a3      	str	r3, [r4, #8]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	6022      	str	r2, [r4, #0]
 8008e64:	701e      	strb	r6, [r3, #0]
 8008e66:	6963      	ldr	r3, [r4, #20]
 8008e68:	4283      	cmp	r3, r0
 8008e6a:	d004      	beq.n	8008e76 <__swbuf_r+0x62>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	07db      	lsls	r3, r3, #31
 8008e70:	d506      	bpl.n	8008e80 <__swbuf_r+0x6c>
 8008e72:	2e0a      	cmp	r6, #10
 8008e74:	d104      	bne.n	8008e80 <__swbuf_r+0x6c>
 8008e76:	4621      	mov	r1, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f915 	bl	80090a8 <_fflush_r>
 8008e7e:	b988      	cbnz	r0, 8008ea4 <__swbuf_r+0x90>
 8008e80:	4638      	mov	r0, r7
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <__swbuf_r+0x9c>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d101      	bne.n	8008e8e <__swbuf_r+0x7a>
 8008e8a:	68ac      	ldr	r4, [r5, #8]
 8008e8c:	e7cf      	b.n	8008e2e <__swbuf_r+0x1a>
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <__swbuf_r+0xa0>)
 8008e90:	429c      	cmp	r4, r3
 8008e92:	bf08      	it	eq
 8008e94:	68ec      	ldreq	r4, [r5, #12]
 8008e96:	e7ca      	b.n	8008e2e <__swbuf_r+0x1a>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 f80c 	bl	8008eb8 <__swsetup_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0cb      	beq.n	8008e3c <__swbuf_r+0x28>
 8008ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ea8:	e7ea      	b.n	8008e80 <__swbuf_r+0x6c>
 8008eaa:	bf00      	nop
 8008eac:	08009b3c 	.word	0x08009b3c
 8008eb0:	08009b5c 	.word	0x08009b5c
 8008eb4:	08009b1c 	.word	0x08009b1c

08008eb8 <__swsetup_r>:
 8008eb8:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <__swsetup_r+0xcc>)
 8008eba:	b570      	push	{r4, r5, r6, lr}
 8008ebc:	681d      	ldr	r5, [r3, #0]
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	b125      	cbz	r5, 8008ece <__swsetup_r+0x16>
 8008ec4:	69ab      	ldr	r3, [r5, #24]
 8008ec6:	b913      	cbnz	r3, 8008ece <__swsetup_r+0x16>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f981 	bl	80091d0 <__sinit>
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <__swsetup_r+0xd0>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	d10f      	bne.n	8008ef4 <__swsetup_r+0x3c>
 8008ed4:	686c      	ldr	r4, [r5, #4]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008edc:	0719      	lsls	r1, r3, #28
 8008ede:	d42c      	bmi.n	8008f3a <__swsetup_r+0x82>
 8008ee0:	06dd      	lsls	r5, r3, #27
 8008ee2:	d411      	bmi.n	8008f08 <__swsetup_r+0x50>
 8008ee4:	2309      	movs	r3, #9
 8008ee6:	6033      	str	r3, [r6, #0]
 8008ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	e03e      	b.n	8008f72 <__swsetup_r+0xba>
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <__swsetup_r+0xd4>)
 8008ef6:	429c      	cmp	r4, r3
 8008ef8:	d101      	bne.n	8008efe <__swsetup_r+0x46>
 8008efa:	68ac      	ldr	r4, [r5, #8]
 8008efc:	e7eb      	b.n	8008ed6 <__swsetup_r+0x1e>
 8008efe:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <__swsetup_r+0xd8>)
 8008f00:	429c      	cmp	r4, r3
 8008f02:	bf08      	it	eq
 8008f04:	68ec      	ldreq	r4, [r5, #12]
 8008f06:	e7e6      	b.n	8008ed6 <__swsetup_r+0x1e>
 8008f08:	0758      	lsls	r0, r3, #29
 8008f0a:	d512      	bpl.n	8008f32 <__swsetup_r+0x7a>
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	b141      	cbz	r1, 8008f22 <__swsetup_r+0x6a>
 8008f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d002      	beq.n	8008f1e <__swsetup_r+0x66>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff fb2f 	bl	800857c <_free_r>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6363      	str	r3, [r4, #52]	; 0x34
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f043 0308 	orr.w	r3, r3, #8
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	b94b      	cbnz	r3, 8008f52 <__swsetup_r+0x9a>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f48:	d003      	beq.n	8008f52 <__swsetup_r+0x9a>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 fa05 	bl	800935c <__smakebuf_r>
 8008f52:	89a0      	ldrh	r0, [r4, #12]
 8008f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f58:	f010 0301 	ands.w	r3, r0, #1
 8008f5c:	d00a      	beq.n	8008f74 <__swsetup_r+0xbc>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60a3      	str	r3, [r4, #8]
 8008f62:	6963      	ldr	r3, [r4, #20]
 8008f64:	425b      	negs	r3, r3
 8008f66:	61a3      	str	r3, [r4, #24]
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	b943      	cbnz	r3, 8008f7e <__swsetup_r+0xc6>
 8008f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f70:	d1ba      	bne.n	8008ee8 <__swsetup_r+0x30>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	0781      	lsls	r1, r0, #30
 8008f76:	bf58      	it	pl
 8008f78:	6963      	ldrpl	r3, [r4, #20]
 8008f7a:	60a3      	str	r3, [r4, #8]
 8008f7c:	e7f4      	b.n	8008f68 <__swsetup_r+0xb0>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e7f7      	b.n	8008f72 <__swsetup_r+0xba>
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c
 8008f88:	08009b3c 	.word	0x08009b3c
 8008f8c:	08009b5c 	.word	0x08009b5c
 8008f90:	08009b1c 	.word	0x08009b1c

08008f94 <abort>:
 8008f94:	2006      	movs	r0, #6
 8008f96:	b508      	push	{r3, lr}
 8008f98:	f000 fa50 	bl	800943c <raise>
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	f7f8 ffee 	bl	8001f7e <_exit>
	...

08008fa4 <__sflush_r>:
 8008fa4:	898a      	ldrh	r2, [r1, #12]
 8008fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa8:	4605      	mov	r5, r0
 8008faa:	0710      	lsls	r0, r2, #28
 8008fac:	460c      	mov	r4, r1
 8008fae:	d457      	bmi.n	8009060 <__sflush_r+0xbc>
 8008fb0:	684b      	ldr	r3, [r1, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dc04      	bgt.n	8008fc0 <__sflush_r+0x1c>
 8008fb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	dc01      	bgt.n	8008fc0 <__sflush_r+0x1c>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d0fa      	beq.n	8008fbc <__sflush_r+0x18>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fcc:	682f      	ldr	r7, [r5, #0]
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	d032      	beq.n	8009038 <__sflush_r+0x94>
 8008fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	075a      	lsls	r2, r3, #29
 8008fd8:	d505      	bpl.n	8008fe6 <__sflush_r+0x42>
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	1ac0      	subs	r0, r0, r3
 8008fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fe0:	b10b      	cbz	r3, 8008fe6 <__sflush_r+0x42>
 8008fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fe4:	1ac0      	subs	r0, r0, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fec:	4628      	mov	r0, r5
 8008fee:	6a21      	ldr	r1, [r4, #32]
 8008ff0:	47b0      	blx	r6
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	d106      	bne.n	8009006 <__sflush_r+0x62>
 8008ff8:	6829      	ldr	r1, [r5, #0]
 8008ffa:	291d      	cmp	r1, #29
 8008ffc:	d82c      	bhi.n	8009058 <__sflush_r+0xb4>
 8008ffe:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <__sflush_r+0x100>)
 8009000:	40ca      	lsrs	r2, r1
 8009002:	07d6      	lsls	r6, r2, #31
 8009004:	d528      	bpl.n	8009058 <__sflush_r+0xb4>
 8009006:	2200      	movs	r2, #0
 8009008:	6062      	str	r2, [r4, #4]
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	04d9      	lsls	r1, r3, #19
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	d504      	bpl.n	800901c <__sflush_r+0x78>
 8009012:	1c42      	adds	r2, r0, #1
 8009014:	d101      	bne.n	800901a <__sflush_r+0x76>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	b903      	cbnz	r3, 800901c <__sflush_r+0x78>
 800901a:	6560      	str	r0, [r4, #84]	; 0x54
 800901c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901e:	602f      	str	r7, [r5, #0]
 8009020:	2900      	cmp	r1, #0
 8009022:	d0cb      	beq.n	8008fbc <__sflush_r+0x18>
 8009024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d002      	beq.n	8009032 <__sflush_r+0x8e>
 800902c:	4628      	mov	r0, r5
 800902e:	f7ff faa5 	bl	800857c <_free_r>
 8009032:	2000      	movs	r0, #0
 8009034:	6360      	str	r0, [r4, #52]	; 0x34
 8009036:	e7c2      	b.n	8008fbe <__sflush_r+0x1a>
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	2301      	movs	r3, #1
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	1c41      	adds	r1, r0, #1
 8009042:	d1c7      	bne.n	8008fd4 <__sflush_r+0x30>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0c4      	beq.n	8008fd4 <__sflush_r+0x30>
 800904a:	2b1d      	cmp	r3, #29
 800904c:	d001      	beq.n	8009052 <__sflush_r+0xae>
 800904e:	2b16      	cmp	r3, #22
 8009050:	d101      	bne.n	8009056 <__sflush_r+0xb2>
 8009052:	602f      	str	r7, [r5, #0]
 8009054:	e7b2      	b.n	8008fbc <__sflush_r+0x18>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	e7ae      	b.n	8008fbe <__sflush_r+0x1a>
 8009060:	690f      	ldr	r7, [r1, #16]
 8009062:	2f00      	cmp	r7, #0
 8009064:	d0aa      	beq.n	8008fbc <__sflush_r+0x18>
 8009066:	0793      	lsls	r3, r2, #30
 8009068:	bf18      	it	ne
 800906a:	2300      	movne	r3, #0
 800906c:	680e      	ldr	r6, [r1, #0]
 800906e:	bf08      	it	eq
 8009070:	694b      	ldreq	r3, [r1, #20]
 8009072:	1bf6      	subs	r6, r6, r7
 8009074:	600f      	str	r7, [r1, #0]
 8009076:	608b      	str	r3, [r1, #8]
 8009078:	2e00      	cmp	r6, #0
 800907a:	dd9f      	ble.n	8008fbc <__sflush_r+0x18>
 800907c:	4633      	mov	r3, r6
 800907e:	463a      	mov	r2, r7
 8009080:	4628      	mov	r0, r5
 8009082:	6a21      	ldr	r1, [r4, #32]
 8009084:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009088:	47e0      	blx	ip
 800908a:	2800      	cmp	r0, #0
 800908c:	dc06      	bgt.n	800909c <__sflush_r+0xf8>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	e790      	b.n	8008fbe <__sflush_r+0x1a>
 800909c:	4407      	add	r7, r0
 800909e:	1a36      	subs	r6, r6, r0
 80090a0:	e7ea      	b.n	8009078 <__sflush_r+0xd4>
 80090a2:	bf00      	nop
 80090a4:	20400001 	.word	0x20400001

080090a8 <_fflush_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	690b      	ldr	r3, [r1, #16]
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	b913      	cbnz	r3, 80090b8 <_fflush_r+0x10>
 80090b2:	2500      	movs	r5, #0
 80090b4:	4628      	mov	r0, r5
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	b118      	cbz	r0, 80090c2 <_fflush_r+0x1a>
 80090ba:	6983      	ldr	r3, [r0, #24]
 80090bc:	b90b      	cbnz	r3, 80090c2 <_fflush_r+0x1a>
 80090be:	f000 f887 	bl	80091d0 <__sinit>
 80090c2:	4b14      	ldr	r3, [pc, #80]	; (8009114 <_fflush_r+0x6c>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	d11b      	bne.n	8009100 <_fflush_r+0x58>
 80090c8:	686c      	ldr	r4, [r5, #4]
 80090ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0ef      	beq.n	80090b2 <_fflush_r+0xa>
 80090d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090d4:	07d0      	lsls	r0, r2, #31
 80090d6:	d404      	bmi.n	80090e2 <_fflush_r+0x3a>
 80090d8:	0599      	lsls	r1, r3, #22
 80090da:	d402      	bmi.n	80090e2 <_fflush_r+0x3a>
 80090dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090de:	f000 f915 	bl	800930c <__retarget_lock_acquire_recursive>
 80090e2:	4628      	mov	r0, r5
 80090e4:	4621      	mov	r1, r4
 80090e6:	f7ff ff5d 	bl	8008fa4 <__sflush_r>
 80090ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ec:	4605      	mov	r5, r0
 80090ee:	07da      	lsls	r2, r3, #31
 80090f0:	d4e0      	bmi.n	80090b4 <_fflush_r+0xc>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	059b      	lsls	r3, r3, #22
 80090f6:	d4dd      	bmi.n	80090b4 <_fflush_r+0xc>
 80090f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fa:	f000 f908 	bl	800930e <__retarget_lock_release_recursive>
 80090fe:	e7d9      	b.n	80090b4 <_fflush_r+0xc>
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <_fflush_r+0x70>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d101      	bne.n	800910a <_fflush_r+0x62>
 8009106:	68ac      	ldr	r4, [r5, #8]
 8009108:	e7df      	b.n	80090ca <_fflush_r+0x22>
 800910a:	4b04      	ldr	r3, [pc, #16]	; (800911c <_fflush_r+0x74>)
 800910c:	429c      	cmp	r4, r3
 800910e:	bf08      	it	eq
 8009110:	68ec      	ldreq	r4, [r5, #12]
 8009112:	e7da      	b.n	80090ca <_fflush_r+0x22>
 8009114:	08009b3c 	.word	0x08009b3c
 8009118:	08009b5c 	.word	0x08009b5c
 800911c:	08009b1c 	.word	0x08009b1c

08009120 <std>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 3300 	strd	r3, r3, [r0]
 800912a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800912e:	6083      	str	r3, [r0, #8]
 8009130:	8181      	strh	r1, [r0, #12]
 8009132:	6643      	str	r3, [r0, #100]	; 0x64
 8009134:	81c2      	strh	r2, [r0, #14]
 8009136:	6183      	str	r3, [r0, #24]
 8009138:	4619      	mov	r1, r3
 800913a:	2208      	movs	r2, #8
 800913c:	305c      	adds	r0, #92	; 0x5c
 800913e:	f7fb fe01 	bl	8004d44 <memset>
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <std+0x38>)
 8009144:	6224      	str	r4, [r4, #32]
 8009146:	6263      	str	r3, [r4, #36]	; 0x24
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <std+0x3c>)
 800914a:	62a3      	str	r3, [r4, #40]	; 0x28
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <std+0x40>)
 800914e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <std+0x44>)
 8009152:	6323      	str	r3, [r4, #48]	; 0x30
 8009154:	bd10      	pop	{r4, pc}
 8009156:	bf00      	nop
 8009158:	08009475 	.word	0x08009475
 800915c:	08009497 	.word	0x08009497
 8009160:	080094cf 	.word	0x080094cf
 8009164:	080094f3 	.word	0x080094f3

08009168 <_cleanup_r>:
 8009168:	4901      	ldr	r1, [pc, #4]	; (8009170 <_cleanup_r+0x8>)
 800916a:	f000 b8af 	b.w	80092cc <_fwalk_reent>
 800916e:	bf00      	nop
 8009170:	080090a9 	.word	0x080090a9

08009174 <__sfmoreglue>:
 8009174:	2268      	movs	r2, #104	; 0x68
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	1e4d      	subs	r5, r1, #1
 800917a:	4355      	muls	r5, r2
 800917c:	460e      	mov	r6, r1
 800917e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009182:	f7ff fa63 	bl	800864c <_malloc_r>
 8009186:	4604      	mov	r4, r0
 8009188:	b140      	cbz	r0, 800919c <__sfmoreglue+0x28>
 800918a:	2100      	movs	r1, #0
 800918c:	e9c0 1600 	strd	r1, r6, [r0]
 8009190:	300c      	adds	r0, #12
 8009192:	60a0      	str	r0, [r4, #8]
 8009194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009198:	f7fb fdd4 	bl	8004d44 <memset>
 800919c:	4620      	mov	r0, r4
 800919e:	bd70      	pop	{r4, r5, r6, pc}

080091a0 <__sfp_lock_acquire>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sfp_lock_acquire+0x8>)
 80091a2:	f000 b8b3 	b.w	800930c <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	20000509 	.word	0x20000509

080091ac <__sfp_lock_release>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__sfp_lock_release+0x8>)
 80091ae:	f000 b8ae 	b.w	800930e <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	20000509 	.word	0x20000509

080091b8 <__sinit_lock_acquire>:
 80091b8:	4801      	ldr	r0, [pc, #4]	; (80091c0 <__sinit_lock_acquire+0x8>)
 80091ba:	f000 b8a7 	b.w	800930c <__retarget_lock_acquire_recursive>
 80091be:	bf00      	nop
 80091c0:	2000050a 	.word	0x2000050a

080091c4 <__sinit_lock_release>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__sinit_lock_release+0x8>)
 80091c6:	f000 b8a2 	b.w	800930e <__retarget_lock_release_recursive>
 80091ca:	bf00      	nop
 80091cc:	2000050a 	.word	0x2000050a

080091d0 <__sinit>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	f7ff fff0 	bl	80091b8 <__sinit_lock_acquire>
 80091d8:	69a3      	ldr	r3, [r4, #24]
 80091da:	b11b      	cbz	r3, 80091e4 <__sinit+0x14>
 80091dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e0:	f7ff bff0 	b.w	80091c4 <__sinit_lock_release>
 80091e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091e8:	6523      	str	r3, [r4, #80]	; 0x50
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <__sinit+0x68>)
 80091ec:	4a13      	ldr	r2, [pc, #76]	; (800923c <__sinit+0x6c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	bf08      	it	eq
 80091f6:	2301      	moveq	r3, #1
 80091f8:	4620      	mov	r0, r4
 80091fa:	bf08      	it	eq
 80091fc:	61a3      	streq	r3, [r4, #24]
 80091fe:	f000 f81f 	bl	8009240 <__sfp>
 8009202:	6060      	str	r0, [r4, #4]
 8009204:	4620      	mov	r0, r4
 8009206:	f000 f81b 	bl	8009240 <__sfp>
 800920a:	60a0      	str	r0, [r4, #8]
 800920c:	4620      	mov	r0, r4
 800920e:	f000 f817 	bl	8009240 <__sfp>
 8009212:	2200      	movs	r2, #0
 8009214:	2104      	movs	r1, #4
 8009216:	60e0      	str	r0, [r4, #12]
 8009218:	6860      	ldr	r0, [r4, #4]
 800921a:	f7ff ff81 	bl	8009120 <std>
 800921e:	2201      	movs	r2, #1
 8009220:	2109      	movs	r1, #9
 8009222:	68a0      	ldr	r0, [r4, #8]
 8009224:	f7ff ff7c 	bl	8009120 <std>
 8009228:	2202      	movs	r2, #2
 800922a:	2112      	movs	r1, #18
 800922c:	68e0      	ldr	r0, [r4, #12]
 800922e:	f7ff ff77 	bl	8009120 <std>
 8009232:	2301      	movs	r3, #1
 8009234:	61a3      	str	r3, [r4, #24]
 8009236:	e7d1      	b.n	80091dc <__sinit+0xc>
 8009238:	080096d4 	.word	0x080096d4
 800923c:	08009169 	.word	0x08009169

08009240 <__sfp>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	4607      	mov	r7, r0
 8009244:	f7ff ffac 	bl	80091a0 <__sfp_lock_acquire>
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <__sfp+0x84>)
 800924a:	681e      	ldr	r6, [r3, #0]
 800924c:	69b3      	ldr	r3, [r6, #24]
 800924e:	b913      	cbnz	r3, 8009256 <__sfp+0x16>
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ffbd 	bl	80091d0 <__sinit>
 8009256:	3648      	adds	r6, #72	; 0x48
 8009258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800925c:	3b01      	subs	r3, #1
 800925e:	d503      	bpl.n	8009268 <__sfp+0x28>
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	b30b      	cbz	r3, 80092a8 <__sfp+0x68>
 8009264:	6836      	ldr	r6, [r6, #0]
 8009266:	e7f7      	b.n	8009258 <__sfp+0x18>
 8009268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800926c:	b9d5      	cbnz	r5, 80092a4 <__sfp+0x64>
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <__sfp+0x88>)
 8009270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009274:	60e3      	str	r3, [r4, #12]
 8009276:	6665      	str	r5, [r4, #100]	; 0x64
 8009278:	f000 f847 	bl	800930a <__retarget_lock_init_recursive>
 800927c:	f7ff ff96 	bl	80091ac <__sfp_lock_release>
 8009280:	2208      	movs	r2, #8
 8009282:	4629      	mov	r1, r5
 8009284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800928c:	6025      	str	r5, [r4, #0]
 800928e:	61a5      	str	r5, [r4, #24]
 8009290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009294:	f7fb fd56 	bl	8004d44 <memset>
 8009298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800929c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092a0:	4620      	mov	r0, r4
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	3468      	adds	r4, #104	; 0x68
 80092a6:	e7d9      	b.n	800925c <__sfp+0x1c>
 80092a8:	2104      	movs	r1, #4
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7ff ff62 	bl	8009174 <__sfmoreglue>
 80092b0:	4604      	mov	r4, r0
 80092b2:	6030      	str	r0, [r6, #0]
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d1d5      	bne.n	8009264 <__sfp+0x24>
 80092b8:	f7ff ff78 	bl	80091ac <__sfp_lock_release>
 80092bc:	230c      	movs	r3, #12
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	e7ee      	b.n	80092a0 <__sfp+0x60>
 80092c2:	bf00      	nop
 80092c4:	080096d4 	.word	0x080096d4
 80092c8:	ffff0001 	.word	0xffff0001

080092cc <_fwalk_reent>:
 80092cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	4606      	mov	r6, r0
 80092d2:	4688      	mov	r8, r1
 80092d4:	2700      	movs	r7, #0
 80092d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092de:	f1b9 0901 	subs.w	r9, r9, #1
 80092e2:	d505      	bpl.n	80092f0 <_fwalk_reent+0x24>
 80092e4:	6824      	ldr	r4, [r4, #0]
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	d1f7      	bne.n	80092da <_fwalk_reent+0xe>
 80092ea:	4638      	mov	r0, r7
 80092ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f0:	89ab      	ldrh	r3, [r5, #12]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d907      	bls.n	8009306 <_fwalk_reent+0x3a>
 80092f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092fa:	3301      	adds	r3, #1
 80092fc:	d003      	beq.n	8009306 <_fwalk_reent+0x3a>
 80092fe:	4629      	mov	r1, r5
 8009300:	4630      	mov	r0, r6
 8009302:	47c0      	blx	r8
 8009304:	4307      	orrs	r7, r0
 8009306:	3568      	adds	r5, #104	; 0x68
 8009308:	e7e9      	b.n	80092de <_fwalk_reent+0x12>

0800930a <__retarget_lock_init_recursive>:
 800930a:	4770      	bx	lr

0800930c <__retarget_lock_acquire_recursive>:
 800930c:	4770      	bx	lr

0800930e <__retarget_lock_release_recursive>:
 800930e:	4770      	bx	lr

08009310 <__swhatbuf_r>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	460e      	mov	r6, r1
 8009314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009318:	4614      	mov	r4, r2
 800931a:	2900      	cmp	r1, #0
 800931c:	461d      	mov	r5, r3
 800931e:	b096      	sub	sp, #88	; 0x58
 8009320:	da08      	bge.n	8009334 <__swhatbuf_r+0x24>
 8009322:	2200      	movs	r2, #0
 8009324:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009328:	602a      	str	r2, [r5, #0]
 800932a:	061a      	lsls	r2, r3, #24
 800932c:	d410      	bmi.n	8009350 <__swhatbuf_r+0x40>
 800932e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009332:	e00e      	b.n	8009352 <__swhatbuf_r+0x42>
 8009334:	466a      	mov	r2, sp
 8009336:	f000 f903 	bl	8009540 <_fstat_r>
 800933a:	2800      	cmp	r0, #0
 800933c:	dbf1      	blt.n	8009322 <__swhatbuf_r+0x12>
 800933e:	9a01      	ldr	r2, [sp, #4]
 8009340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009348:	425a      	negs	r2, r3
 800934a:	415a      	adcs	r2, r3
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	e7ee      	b.n	800932e <__swhatbuf_r+0x1e>
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	2000      	movs	r0, #0
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	b016      	add	sp, #88	; 0x58
 8009358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800935c <__smakebuf_r>:
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009360:	079d      	lsls	r5, r3, #30
 8009362:	4606      	mov	r6, r0
 8009364:	460c      	mov	r4, r1
 8009366:	d507      	bpl.n	8009378 <__smakebuf_r+0x1c>
 8009368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	2301      	movs	r3, #1
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	b002      	add	sp, #8
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	466a      	mov	r2, sp
 800937a:	ab01      	add	r3, sp, #4
 800937c:	f7ff ffc8 	bl	8009310 <__swhatbuf_r>
 8009380:	9900      	ldr	r1, [sp, #0]
 8009382:	4605      	mov	r5, r0
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff f961 	bl	800864c <_malloc_r>
 800938a:	b948      	cbnz	r0, 80093a0 <__smakebuf_r+0x44>
 800938c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d4ef      	bmi.n	8009374 <__smakebuf_r+0x18>
 8009394:	f023 0303 	bic.w	r3, r3, #3
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	e7e3      	b.n	8009368 <__smakebuf_r+0xc>
 80093a0:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <__smakebuf_r+0x7c>)
 80093a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	9b00      	ldr	r3, [sp, #0]
 80093b0:	6120      	str	r0, [r4, #16]
 80093b2:	6163      	str	r3, [r4, #20]
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	b15b      	cbz	r3, 80093d0 <__smakebuf_r+0x74>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093be:	f000 f8d1 	bl	8009564 <_isatty_r>
 80093c2:	b128      	cbz	r0, 80093d0 <__smakebuf_r+0x74>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	89a0      	ldrh	r0, [r4, #12]
 80093d2:	4305      	orrs	r5, r0
 80093d4:	81a5      	strh	r5, [r4, #12]
 80093d6:	e7cd      	b.n	8009374 <__smakebuf_r+0x18>
 80093d8:	08009169 	.word	0x08009169

080093dc <_malloc_usable_size_r>:
 80093dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e0:	1f18      	subs	r0, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfbc      	itt	lt
 80093e6:	580b      	ldrlt	r3, [r1, r0]
 80093e8:	18c0      	addlt	r0, r0, r3
 80093ea:	4770      	bx	lr

080093ec <_raise_r>:
 80093ec:	291f      	cmp	r1, #31
 80093ee:	b538      	push	{r3, r4, r5, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	d904      	bls.n	8009400 <_raise_r+0x14>
 80093f6:	2316      	movs	r3, #22
 80093f8:	6003      	str	r3, [r0, #0]
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009402:	b112      	cbz	r2, 800940a <_raise_r+0x1e>
 8009404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009408:	b94b      	cbnz	r3, 800941e <_raise_r+0x32>
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f830 	bl	8009470 <_getpid_r>
 8009410:	462a      	mov	r2, r5
 8009412:	4601      	mov	r1, r0
 8009414:	4620      	mov	r0, r4
 8009416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941a:	f000 b817 	b.w	800944c <_kill_r>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <_raise_r+0x4c>
 8009422:	1c59      	adds	r1, r3, #1
 8009424:	d103      	bne.n	800942e <_raise_r+0x42>
 8009426:	2316      	movs	r3, #22
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	2001      	movs	r0, #1
 800942c:	e7e7      	b.n	80093fe <_raise_r+0x12>
 800942e:	2400      	movs	r4, #0
 8009430:	4628      	mov	r0, r5
 8009432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009436:	4798      	blx	r3
 8009438:	2000      	movs	r0, #0
 800943a:	e7e0      	b.n	80093fe <_raise_r+0x12>

0800943c <raise>:
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <raise+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff bfd3 	b.w	80093ec <_raise_r>
 8009446:	bf00      	nop
 8009448:	2000000c 	.word	0x2000000c

0800944c <_kill_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	2300      	movs	r3, #0
 8009450:	4d06      	ldr	r5, [pc, #24]	; (800946c <_kill_r+0x20>)
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	f7f8 fd80 	bl	8001f5e <_kill>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d102      	bne.n	8009468 <_kill_r+0x1c>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	b103      	cbz	r3, 8009468 <_kill_r+0x1c>
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000504 	.word	0x20000504

08009470 <_getpid_r>:
 8009470:	f7f8 bd6e 	b.w	8001f50 <_getpid>

08009474 <__sread>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f000 f894 	bl	80095a8 <_read_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfab      	itete	ge
 8009484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009486:	89a3      	ldrhlt	r3, [r4, #12]
 8009488:	181b      	addge	r3, r3, r0
 800948a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800948e:	bfac      	ite	ge
 8009490:	6563      	strge	r3, [r4, #84]	; 0x54
 8009492:	81a3      	strhlt	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__swrite>:
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	461f      	mov	r7, r3
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	4605      	mov	r5, r0
 80094a0:	05db      	lsls	r3, r3, #23
 80094a2:	460c      	mov	r4, r1
 80094a4:	4616      	mov	r6, r2
 80094a6:	d505      	bpl.n	80094b4 <__swrite+0x1e>
 80094a8:	2302      	movs	r3, #2
 80094aa:	2200      	movs	r2, #0
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	f000 f868 	bl	8009584 <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	4632      	mov	r2, r6
 80094b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	4628      	mov	r0, r5
 80094c0:	463b      	mov	r3, r7
 80094c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	f000 b817 	b.w	80094fc <_write_r>

080094ce <__sseek>:
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d6:	f000 f855 	bl	8009584 <_lseek_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	bf15      	itete	ne
 80094e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ea:	81a3      	strheq	r3, [r4, #12]
 80094ec:	bf18      	it	ne
 80094ee:	81a3      	strhne	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__sclose>:
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 b813 	b.w	8009520 <_close_r>
	...

080094fc <_write_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	2200      	movs	r2, #0
 8009506:	4d05      	ldr	r5, [pc, #20]	; (800951c <_write_r+0x20>)
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f8 fd5e 	bl	8001fcc <_write>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_write_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_write_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000504 	.word	0x20000504

08009520 <_close_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	2300      	movs	r3, #0
 8009524:	4d05      	ldr	r5, [pc, #20]	; (800953c <_close_r+0x1c>)
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fd6a 	bl	8002004 <_close>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_close_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_close_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000504 	.word	0x20000504

08009540 <_fstat_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	2300      	movs	r3, #0
 8009544:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_fstat_r+0x20>)
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f8 fd64 	bl	800201a <_fstat>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_fstat_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_fstat_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	20000504 	.word	0x20000504

08009564 <_isatty_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	2300      	movs	r3, #0
 8009568:	4d05      	ldr	r5, [pc, #20]	; (8009580 <_isatty_r+0x1c>)
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f8 fd62 	bl	8002038 <_isatty>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_isatty_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_isatty_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20000504 	.word	0x20000504

08009584 <_lseek_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	2200      	movs	r2, #0
 800958e:	4d05      	ldr	r5, [pc, #20]	; (80095a4 <_lseek_r+0x20>)
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 fd5a 	bl	800204c <_lseek>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_lseek_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_lseek_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000504 	.word	0x20000504

080095a8 <_read_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	2200      	movs	r2, #0
 80095b2:	4d05      	ldr	r5, [pc, #20]	; (80095c8 <_read_r+0x20>)
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f7f8 fceb 	bl	8001f92 <_read>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_read_r+0x1e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_read_r+0x1e>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20000504 	.word	0x20000504

080095cc <_init>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr

080095d8 <_fini>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr
